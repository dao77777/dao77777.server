/*
 Navicat Premium Data Transfer

 Source Server         : dao.home.centos7.virtual.3
 Source Server Type    : MySQL
 Source Server Version : 50733
 Source Host           : 192.168.0.203:3306
 Source Schema         : blog

 Target Server Type    : MySQL
 Target Server Version : 50733
 File Encoding         : 65001

 Date: 30/04/2021 14:28:37
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `cover` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `music` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `introduce` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL,
  `clickCount` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES (1, 'Javascript', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/1.png', NULL, 'Javascript索引', '# 编译器\r\n\r\n## 组成\r\n\r\n### ECMAScript\r\n\r\n* 语言标准\r\n    * 语法\r\n    * 类型\r\n    * 语句\r\n    * 关键字\r\n    * 保留字\r\n    * 操作符\r\n    * 全局对象\r\n* 版本\r\n    * ES1\r\n    * ES2\r\n    * ES3: 第 3 版第一次真正对这个标准进行更新，更新了字符串处理、错误定义和数值输出。此外还增加了对正则表达式、新的控制语句、try/catch 异常处理的支持，以及为了更好地让标准国际化所做的少量修改。对很多人来说，这标志着 ECMAScript 作为一门真正的编程语言的时代终于到来了\r\n    * ES4: 第 4 版包括强类型变量、新语句和数据结构、真正的类和经典的继承，以及操作数据的新手段\r\n    * ES5: 新功能包括原生的解析和序列化 JSON 数据的 JSON 对象、方便继承和高级属性定义的方法，以及新的增强 ECMAScript 引擎解释和执行代码能力的严格模式\r\n    * ES6: 这一版包 含了大概这个规范有史以来最重要的一批增强特性。ES6 正式支持了类、模块、迭代器、生成器、箭头 函数、期约、反射、代理和众多新的数据类型\r\n    * ES7: 这次修订只包含少量语法层面的 增强，如 Array.prototype.includes 和指数操作符\r\n    * ES8: 这一版主要增加了异步函数（async/ await）、SharedArrayBuffer 及 Atomics API，以及 Object.values()/Object.entries()/Object. getOwnPropertyDescriptors()和字符串填充方法，另外明确支持对象字面量最后的逗号\r\n    * ES9: 这次修订包括异步迭代、剩余和 扩展属性、一组新的正则表达式特性、Promise finally()，以及模板字面量修订\r\n    * ES10: 这次修订增加了 Array.prototype. flat()/flatMap()、String.prototype.trimStart()/trimEnd()、Object.fromEntries()方 法，以及 Symbol.prototype.description 属性，明确定义了 Function.prototype.toString() 的返回值并固定了 Array.prototype.sort()的顺序。另外，这次修订解决了与 JSON 字符串兼容的 问题，并定义了 catch 子句的可选绑定\r\n### DOM\r\n\r\n* 操控浏览器显示页面的一组API, 也即操控HTML与CSS\r\n    * 删除、添加、替换、修改节点\r\n    * DOM 视图: 描述追踪文档不同视图的接口\r\n    * DOM 事件: 描述事件及事件处理的接口\r\n    * DOM 样式: 描述处理元素 CSS 样式的接口\r\n    * DOM 遍历和范围: 描述遍历和操作 DOM 树的接口\r\n    * DOM 验证\r\n    * Mutation Events和Mutation Observers\r\n* HTML中的DOM: DOM core和DOM HTML, 前身是DHTML\r\n* XML\r\n    * HTML\r\n    * SVG: 可伸缩矢量图\r\n    * MathML: 数学标记语言\r\n    * SMIL: 同步多媒体集成语言\r\n### BOM\r\n\r\n* 操控浏览器显示页面之外的一组API\r\n    * 弹出新浏览器窗口的能力\r\n    * 移动、缩放和关闭浏览器窗口的能力\r\n    * navigator对象, 提供关于浏览器的详尽信息\r\n    * location对象, 提供浏览器加载页面的详尽信息\r\n    * screen对象, 提供关于用户屏幕分辨率的详尽信息\r\n    * performance对象, 提供浏览器内存占用、导航行为和时间统计的详尽信息\r\n    * 对cookie的支持\r\n    * 其他自定义对象, 如XMLHttpRequest和IE的ActiveXObject\r\n## 引入浏览器\r\n\r\n* <script>元素引入\r\n    * 属性\r\n        * src(常): 外部文件引入\r\n        * type(常): application/javascript或module, 脚本的内容类型, 前者表示普通js脚本, 后者表示支持模块, 脚本中可使用import, export关键字\r\n        * async: 异步执行脚本文件, 只适用于外部脚本, 异步脚本不应该在加载期间修改DOM\r\n        * defer: 脚本的执行延迟到文档被完全解析和显示后执行, 只对外部脚本有效\r\n        * charset: src属性指定的代码字符集\r\n        * crossorigin: anonymous和use-credentials俩值, 前者表示请求不必设置凭据标识, 后者表示出站请求会包含凭据\r\n        * integrity: 允许比对接收到的资源和指定的加密签名以验证资源完整性\r\n    * 方式\r\n        * 行内脚本: <script></script>中书写代码\r\n        * 外部脚本: 提供src属性, 加载外部脚本\r\n        * 动态加载脚本:![图片](https://uploader.shimo.im/f/KWSjPW93zj9UoZL5.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * 放置: 最佳放置不在head头而在body元素中的尾部\r\n* <noscript>元素在浏览器不支持脚本或对脚本的支持关闭情况下显示器内容\r\n## 垃圾回收机制\r\n\r\n* 垃圾回收: 标记清理和引用计数\r\n    * 解除引用: 变量名 = null\r\n# 语句\r\n\r\n* 分隔\r\n    * 手动以分号结尾或由解释器自动判断\r\n    * 最佳实践: 手动分号结尾\r\n* 关键字\r\n    * break do in typeof case else instanceof var catch export new void class extends return while const finally super with continue for switch yield debugger function this default if throw delete import try\r\n## 严格模式\r\n\r\n* 脚本或函数首行添加\"use strict\";\r\n## 注释\r\n\r\n* 单行: //\r\n* 多行: /* ... ... */\r\n## 声明\r\n\r\n* 标识符\r\n    * 第一个字符必须是一个字母、下划线（_）或美元符号（$）\r\n    * 剩下的其他字符可以是字母、下划线、美元符号或数字\r\n    * 区分大小写\r\n    * 不能是关键字\r\n    * 最佳实践: 驼峰命名法\r\n* 变量声明\r\n    * 声明\r\n        * 变量名 = 变量值: 全局作用域\r\n        * var 变量名 = 变量值\r\n            * 函数作用域\r\n            * 声明提升\r\n            * 重复声明\r\n            * 全局声明变成window的属性\r\n        * let 变量名 = 变量值\r\n            * 块级作用域\r\n            * 暂时性死区\r\n            * 无重复声明\r\n            * 全局声明不会变成window的属性\r\n        * const 变量名 = 变量值\r\n            * 块级作用域\r\n            * 暂时性死区\r\n            * 无重复声明\r\n            * 全局声明不会变成window的属性\r\n            * 只读\r\n        * 最佳实践: 不使用var, const优先, let次之\r\n* 函数声明\r\n    * 声明\r\n        * 普通函数: function 函数名(参数...) {... ...}\r\n        * 表达式声明: function (参数...) {... ...}\r\n        * 匿名函数: (参数...) => {... ...}, 参数 => {... ...}, 参数 => 单语句或表达式\r\n        * 构造函数: new Function (参数..., 函数体)\r\n    * 参数\r\n        * 所有参数都是传值\r\n        * 匿名参数: 函数体内部用arguments类数组对象接收\r\n        * 命名参数\r\n        * 默认值参数\r\n        * 剩余参数\r\n    * 函数体\r\n        * arguments\r\n        * this\r\n        * new.target: 用于检测函数是否使用new关键字调用, 若不是值为undefined, 若是值为将被调用的构造函数\r\n    * 调用\r\n        * 普通调用: 函数名()\r\n        * 标签函数: 函数名`... ...`![图片](https://uploader.shimo.im/f/SeLLPk0xkVLLe42Z.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * 尾调用优化\r\n        * 代码在严格模式下执行\r\n        * 外部函数的返回值是对尾调用函数的调用\r\n        * 尾调用函数返回后不需要执行额外的逻辑\r\n        * 尾调用函数不是引用外部函数作用域中自由变量的闭包\r\n    * 实例\r\n        * name: 返回函数名, 匿名函数返回空字符串, 构造函数返回anonymous, 绑定了对象名字会有bound前缀,获取函数, 设置函数会有get, set前缀\r\n        * length: 函数定义的命名参数个数\r\n        * prototype: 函数的原型对象\r\n        * bind(绑定对象): 绑定函数到指定对象, 并返回一个新的函数实例\r\n        * apply(调用对象, 参数数组), call(调用对象, 参数...): 以指定对象和参数调用该函数\r\n        * valueOf(), toString(), toLocaleString(): 前者返回函数自身, 后两者返回函数体\r\n    * 最佳实践: 是函数要么返回值，要么不返回值。只在某个条件下返回值的函数会带来麻烦，尤其是调试时\r\n* 类声明\r\n    * 声明\r\n        * 普通声明: class 类名 {... ...}\r\n        * 表达式声明: 类名 = class {... ...}\r\n    * 构成\r\n        * 构造函数\r\n        * 原型方法\r\n        * 获取函数, 设置函数\r\n        * 静态方法\r\n## 模块\r\n\r\n* 浏览器规范: AMD(Require.js) CMD(Sea.js)\r\n* 服务器端规范: common.js\r\n    * common.js\r\n        * 引入: require(模块名 | js文件 | 文件夹(含index.js件或指定了main字段的package.json文件))\r\n        * 暴露: module.exports=模块对象\r\n* es6规范: module规范\r\n    * module规范\r\n        * 引入\r\n            * 按需引入: import {变量} from 模块 | js文件 | 文件夹\r\n            * 直接导入: import 自定义模块名 from 模块 | js文件 | 文件夹\r\n            * 混合引入: import 自定义模块名, {变量}  from 模块 | js文件 | 文件夹\r\n            * 执行引入: import 模块 | js文件 | 文件夹\r\n        * 暴露\r\n            * 按需导出: export {变量} | export 声明\r\n            * 直接导出: export default 模块对象\r\n## 赋值\r\n\r\n* 赋值符号: =, +=, -=, *=, /=, %=, <<=, >>=, >>>=\r\n* 赋值方式\r\n    * 单变量赋值: 变量名 = 变量值\r\n    * 多变量赋值![图片](https://uploader.shimo.im/f/g6EMTx5pu4k3UZvX.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n## 流程控制\r\n\r\n* 条件分支\r\n    * if (布尔值) {... ...}\r\n    * switch (值) { case 值: ... ... break;... default: ... ... }\r\n* 循环\r\n    * do {... ...} white (布尔值)\r\n    * while (布尔值)\r\n    * for (初始化语句; 条件判断表达式; 自增自减表达式) {.. ...}\r\n    * for (const 变量名 in 对象) {... ...}: 迭代对象的可枚举属性的键\r\n    * for (const 变量名 of 可迭代对象): 迭代可迭代对象\r\n    * 标签语句:![图片](https://uploader.shimo.im/f/9TXiiy0HrkkNKJj1.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)![图片](https://uploader.shimo.im/f/hwS51oyzneseepmR.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * break\r\n    * continue\r\n## 解构\r\n\r\n* 解构赋值\r\n    * [变量...] = 可迭代对象\r\n    * {键...} = {键值对...}\r\n    * 函数的参数里解构赋值: 函数名(...可迭代对象)\r\n* 解构\r\n    * [...可迭代对象]\r\n    * {...对象}\r\n## 异步\r\n\r\n* async\r\n* await\r\n# 表达式\r\n\r\n* typeof 变量名: 判断变量类型\r\n* 对象 instanceof 类: 判断对象是否是类的实例\r\n* 条件表达式: ... ? ... : ...\r\n* 四则运算: ++, --, +, -, *, /, %, **\r\n* 位运算: ~, &, |, ^, <<, >>, >>>\r\n* 布尔运算: !, &&, ||\r\n* 关系运算: >, <, >=, <=, ==, ===, !==, !===![图片](https://uploader.shimo.im/f/tLFA1rvFr72xkcCM.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n# 数据类型\r\n\r\n* 数据类型\r\n    * undefined: 未声明的变量\r\n    * boolean: 布尔\r\n    * number: 数值\r\n    * string: 字符串\r\n    * function: 函数\r\n    * symbol\r\n    * object: 对象\r\n        * null: 空对象\r\n    * 最佳实践: 声明变量时一定要初始化一个非undefined值, 这样就能将未声明和声明的变量区分开\r\n* 类型转换\r\n    * 转boolean: 调用Boolean(var)方法\r\n        * undefined->false\r\n        * number\r\n            * 0, NaN->false\r\n            * 其他->true\r\n        * string\r\n            * 非空字符串->true\r\n            * \"\"->false\r\n        * function->true\r\n        * object\r\n            * null->false\r\n            * 其他->true\r\n    * 转number: 调用Number(var)方法\r\n        * undefined->NaN\r\n        * boolean\r\n            * true->1\r\n            * false->0\r\n        * string\r\n            * \"\", \"  \", \"    \"->0\r\n            * 字符串本身代表数值字面量->本身\r\n            * 含其他字符->NaN\r\n        * function->NaN\r\n        * object\r\n            * null->0\r\n            * 其他->调用自身valueOf()方法, 如果转换结果不是数值，则调用 toString()方法，再按照转换字符串的规则转换\r\n    * 转string: 调用String(var)\r\n        * undefined->\"undefined\"\r\n        * boolean\r\n            * true->\"true\"\r\n            * false->\"false\"\r\n        * number->\"number\"\r\n        * function->\"代码\"\r\n        * object\r\n            * null->\"null\"\r\n            * 其他->调用自身toString()方法\r\n# 全局\r\n\r\n## 属性\r\n\r\n### BOM\r\n\r\n* window\r\n    * top, parent, self, opener, closed: 顶层窗口, 父窗口, 本身窗口, 打开自己的窗口, 窗口是否关闭\r\n    * screenTop, screenLeft: 相对屏幕位置\r\n    * innerWidth, innerHeight, outerWidth, outerHeight: 浏览器视口大小和自身大小\r\n    * scrollX, scrolly: 浏览器滚动位置\r\n    * devicePixelRation: 物理像素与逻辑像素之间的缩放系数\r\n    * open(URL, 目标窗口名[, 特性字符串]), close(): 打开或关闭窗口![图片](https://uploader.shimo.im/f/9se4hchos2hR2rfR.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)![图片](https://uploader.shimo.im/f/nwVqVXkvGS4riF5N.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * moveTo(x坐标, y坐标), moveBy(x位移, y位移): 设置浏览器位置\r\n    * resizeTo(宽, 高), resizeBy(宽增量, 高增量): 设置浏览器宽高\r\n    * scrollTo(x滚动位置, y滚动位置), scrollBy(x滚动距离, y滚动巨鹿): 设置浏览器滚动位置![图片](https://uploader.shimo.im/f/P2ljvGTtPvgapDum.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * alert(), confirm(), prompt(), find(), print(): 系统对话框\r\n    * addEventListener(事件名, 回调函数)\r\n        * popstate: 历史记录后退时触发该事件\r\n    * document\r\n    * location![图片](https://uploader.shimo.im/f/L2nVv39qQ1uoDCgr.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * href: 完整URL\r\n        * origin: URL源地址\r\n        * protocol: 协议\r\n        * username: 用户名\r\n        * password: 密码\r\n        * host: 服务器名及端口号\r\n        * hostname: 服务器名\r\n        * port: 端口号\r\n        * pathname: 路径名\r\n        * search: 查询字符串\r\n        * hash: 锚点\r\n        * assign(URL): 修改location的URL, 并导航到新的URL, 并添加历史记录\r\n        * replace(URL): assign(URL), 但不添加历史记录\r\n        * reload([true]): 重新加载页面, 若添加true则不重缓存加载, 从服务器加载\r\n    * navigator![图片](https://uploader.shimo.im/f/6xRQUpv1lo04nHxZ.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)![图片](https://uploader.shimo.im/f/n0IqE2jE7vR7DOOQ.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * screen![图片](https://uploader.shimo.im/f/jb8dcsXMOVyz3vZ7.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * history\r\n        * length: 历史记录条目数\r\n        * state: 当前的状态对象\r\n        * go(前进或后退步数), back(), forward: 前进或后退\r\n        * pushState(状态对象, 标题, 相对路径): 更新URL并添加历史记录与状态对象\r\n        * replaceState(状态对象, 标题): 更新当前的状态对象\r\n## 函数\r\n\r\n* 数字\r\n    * isFinite(number): 是否Infinity\r\n    * isNaN(number): 是否NaN\r\n    * parseInt(string[, 数值格式]): 灵活地转换成整数\r\n    * parseFloat(string): 灵活地转换成浮点数\r\n* 字符串\r\n    * encodeURI(待编码字符串), encodeURIComponent(待编码字符串), decodeURI(待解码字符串), decodeURIComponent(待解码字符串): 以URI方式编码指定字符串![图片](https://uploader.shimo.im/f/najgSNSTzXb3pbQM.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * atob(字符串), btoa(字符串): base64编解码, 只支持ascii码\r\n* 异步\r\n    * setTimeout(执行函数, 延迟时间)\r\n    * clearTimeout(定时器)\r\n    * setInterval()\r\n    * clearInterval()\r\n* 输出\r\n    * console.log(变量)\r\n    * console.dir(变量)\r\n* eval(): 相当于一个解释器\r\n## 类\r\n\r\n### Boolean\r\n\r\n* 构造\r\n    * 字面量: true, false\r\n    * 函数: Boolean(var)\r\n    * 构造函数: new Boolean(var)\r\n### Number\r\n\r\n* 构造\r\n    * 字面量\r\n        * 十进制: 55\r\n        * 八进制: 070\r\n        * 十六进制: 0xA\r\n        * 科学计数法: 3.125e7\r\n        * 无穷大: Infinity\r\n        * 非数: NaN\r\n    * 函数: Number(var)\r\n    * 构造函数: new Number(var)\r\n* 静态\r\n    * MIN_SAFE_INTEGER: 可表示的最小整数(-2 ** 53 + 1)\r\n    * MAX_SAFE_INTEGER: 可表示的最大整数(2 ** 53 - 1)\r\n    * isInteger(数字): 判断指定数字是否在Number.MIN_SAFE_INTEGER（-2 ** 53 + 1）到 Number.MAX_SAFE_INTEGER（2 ** 53 - 1）安全范围内\r\n* 原型\r\n    * toString(进制): 按进制格式化\r\n    * toFixed(小数位数): 按小数位数格式化\r\n    * toExponential(小数位数): 按科学计数法小数位数格式化\r\n    * toPercision(位数): 按位数自动格式化\r\n### BigInt\r\n\r\n* 构造\r\n    * 字面量: 1321n\r\n    * 函数: BigInt(变量)\r\n    * 构造函数: new BigInt(变量)\r\n### String\r\n\r\n* 构造\r\n    * 字面量\r\n        * 方式\r\n            * 普通: \"... ...\", \'... ...\'\r\n            * 模板字符串: `... ...`\r\n        * 转义\r\n            * 转义字符: \\\r\n            * \\n换行, \\t制表, \\b退格, \\r回车, \\f换页, \\\\反斜杠, \\\'单引号, \\\"双引号, \\`反引号, \\xnn十六进制编码表示的字符, \\unnnn十六进制编码表示的Unicode字符\r\n    * 函数: String()\r\n    * 构造函数: new String()\r\n* 静态\r\n    * raw标签函数: 返回未经转义的字符串\r\n    * fromCodePointAt(32位编码...): 返回编码对应的字符, 类似方法fromCharCode(16位编码...)\r\n* 实例\r\n    \r\n    * length\r\n* 原型\r\n    * 查\r\n        * 按索引查\r\n            * [索引]: 最常用\r\n            * charAt(索引): 按索引查字符, 不服规则返回\"\"\r\n            * codePointAt(索引): 按索引查字符并转换为32位编码, 类似方法charCodeAt(索引)\r\n            * slice(起始索引[, 终止索引]): 字符串剪切, 其他类似方法substr(), substring()\r\n        * 按字符串查\r\n            * search(字符串|正则): 按字符串或正则查索引, 若无返回-1, 类似方法indexOf(字符串), lastIndexOf(字符串), startsWith(字符串), endsWith(字符串), includes(字符串), 不如直接用正则的exec()方法\r\n            * match(字符串片段|正则)\r\n                * 字符串片段: 查找到字符串内第一个满足字符串片段的内容返回, 返回格式和正则的exec()方法一样\r\n                * 正则: 无g标记时与正则的exec()方法一样, 有g标记时返回一个含所有匹配成功字符串的数组\r\n    * 比较\r\n        * localeCompare()\r\n            * 如果按照字母表顺序，字符串应该排在字符串参数前头，则返回负值。（通常是-1，具体还要看 与实际值相关的实现。）\r\n            * 如果字符串与字符串参数相等，则返回 0。\r\n            * 如果按照字母表顺序，字符串应该排在字符串参数后头，则返回正值。（通常是 1，具体还要看 与实际值相关的实现。）\r\n    * 转换\r\n        * split(字符串|正则[, 数组最大长度]): 分割字符串位数组\r\n        * valueOf(), toString(), toLocalString(): 返回原始字符串值\r\n    * 映射\r\n        * replace(字符串|正则, 要替换的内容)\r\n            * 字符串片段: 只能替换第一个查找到的内容, 返回替换好的字符串\r\n            * 正则: 没有标记g时只能替换第一个查找的内容, 有g的时候替换所有匹配的内容, 返回替换好的字符串\r\n        * concat(字符串...): 字符串拼接\r\n        * trim(), trimLeft(), trimRight(): 删除前后空格\r\n        * repeat(重复次数): 重复字符串\r\n        * padStart(长度[, 填充字符串]), padEnd(长度[, 填充字符串]): 填充字符串到指定长\r\n        * toLowerCase(), toLocaleLowerCase(), toUpperCase(), toLocaleUpperCase()\r\n### Symbol\r\n\r\n### Object\r\n\r\n* 构造\r\n    * 字面量: { key: value... }\r\n    * 构造函数: new Object()\r\n* 静态\r\n    * 属性描述\r\n        * *defineProperty(对象, 属性名, 数据属性配置对象|访问器属性配置对象)\r\n            * 数据属性配置对象\r\n                * configurable: 属性是否可删除, 是否可配置, 是否可改为访问器属性默认true\r\n                * enumerable: 属性是否可枚举, 默认true\r\n                * writable: 属性是否可写, 默认true\r\n                * value: 属性实际值, 默认undefined\r\n            * 访问器属性配置对象: 访问器属性内部要加下划线![图片](https://uploader.shimo.im/f/08S8H5rniqmnn7Ux.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                * configurable: 属性是否可删除, 是否可配置, 是否可改为数据属性默认true\r\n                * enumerable: 属性是否可枚举, 默认true\r\n                * get: 获取函数, 在读取属性时调用, 默认值为undefined\r\n                * set: 设置函数, 写入属性时调用, 默认值为undefined\r\n        * *defineProperties(对象, 属性配置对象):![图片](https://uploader.shimo.im/f/GNmTpfSrRQ0gvGXP.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * getOwnPropertyDescriptor(对象, 属性): 获取属性描述对象\r\n        * getOwnPropertyDescriptors(对象): 获取所有属性描述对象\r\n    * 原型操作\r\n        * getPrototypeOf(对象): 获取指定对象的原型\r\n        * *setPrototypeOf(对象, 原型对象): 设置指定对象的原型对象\r\n        * create(原型对象): 以指定原型对象构建一个新的对象\r\n    * 增删改查\r\n        * getOwnPropertyNames(对象): 获取对象的所有属性名(Symbol除外)\r\n        * getOwnPropertySymbols(对象): 获取对象的所有Symbol属性名\r\n        * *assign(目的对象, 源对象...): 将源对象的可枚举属性混入到目的对象, 会覆盖重复属性\r\n        * is(值, 值): 判断两个值是否相等\r\n    * 映射\r\n        * keys()\r\n        * values()\r\n        * entries()\r\n* 原型\r\n    * 查\r\n        * 变量.属性\r\n        * hasOwnProperty(属性名): 判断指定属性是否存在于自身\r\n        * 属性 in 变量: 判断指定属性是否存在\r\n    * 增删改\r\n        * *delete 变量.属性: 删除对象属性, 成功返回true, 失败返回false\r\n        * *变量.属性 = 值\r\n    * 原型操作\r\n        * isPrototypeOf(对象): 判断当前对象是否指定对象的原型\r\n        * propertyIsEnumerable(属性名): 判断指定属性是否可枚举\r\n    * 转换\r\n        * toString(), toLocaleString(): 返回对象字符串表示\r\n        * valueOf(): 返回对象的数值表示\r\n### Proxy\r\n\r\n* 概念\r\n    * 处理对象\r\n        * 捕获器\r\n            * get(目标对象, 属性名, 代理对象) {... ...}\r\n* 构造\r\n    * 构造函数: new Proxy(目标对象, 处理对象)\r\n    * 函数: {proxy, revoke} = Proxy.revocable(目标对象, 处理对象), 调用revoke()会切断代理目标对象和代理对象之间的联系\r\n### Reflect\r\n\r\n* 静态\r\n    * 属性描述\r\n        * defineProperty(目标对象, 属性名, 属性描述对象): 替代Object.defineProperty()\r\n        * getWonPropertyDescriptor(目标对象, 属性名): 替代Object.getWonPropertyDescriptor()\r\n        * isExtensible(目标对象): 替代Object.isExtensible()\r\n        * preventExtensions(目标对象): 替代Object.preventExtensions()\r\n    * 原型操作\r\n        * getPrototypeOf(目标对象): 替代Object.getPrototypeOf()\r\n        * setPrototypeOf(目标对象, 原型对象): 替代Object.SetPrototypeOf()\r\n    * 构造\r\n        * construct(目标对象, 参数列表, 构造函数): 替代new操作符\r\n    * 增删改查\r\n        * get(目标对象, 属性名, 代理对象): 替代[]对象属性访问操作符\r\n        * set(目标对象, 属性名, 值, 代理对象): 替代=赋值操作符\r\n        * has(目标对象, 属性名): 替代in操作符\r\n        * deleteProperty(目标对象, 属性名): 替代delete操作符\r\n        * ownKeys(目标对象): 替代Object.keys()\r\n    * 函数\r\n        * apply(目标对象, this对象, 参数列表): 替代Function.prototype.apply()|call()\r\n### Iterable接口\r\n\r\n* 已经实现的全局类: String, Array, Set, Map, arguments对象, NodeList等DOM集合类型\r\n* 实现方法\r\n    * Symbol.iterator(): 此方法返回一个迭代器对象\r\n### Iterator接口\r\n\r\n* 实现方法\r\n    * next(): 此方法每次返回迭代的值与done![图片](https://uploader.shimo.im/f/g57u7ulZ2XXmY8CK.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * return(): 可选方法, 当迭代提前结束时触发\r\n    * throw(): 可选方法, 当迭代发生错误时触发, 若处理则跳过这个值继续迭代后面的值\r\n### Generator\r\n\r\n* 构造\r\n    * 声明: function* 变量名(args...) {... ...}\r\n    * 字面量: function* (args...) {}\r\n* 调用: 变量名(args...), 返回一个iterable对象, 迭代的值为每次执行yield返回的值\r\n* 返回: yield 值, yield* 可迭代对象![图片](https://uploader.shimo.im/f/9VSOcwCue7JJEE11.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)![图片](https://uploader.shimo.im/f/FTInbuvCfvgG34JH.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n### Set\r\n\r\n* 构造\r\n    * new Set(可迭代对象)\r\n* 实例\r\n    * size\r\n* 原型\r\n    * 查\r\n        * has(值)\r\n    * 增删改\r\n        * *add(值): 添加值, 返回自身\r\n        * *delete(值)\r\n        * *clear()\r\n    * 遍历\r\n        * forEach(回调函数, 回调函数的this)\r\n    * 映射\r\n        * keys()\r\n        * values()\r\n        * entries()\r\n### Map\r\n\r\n* 构造\r\n    * 构造函数: new Map(可迭代对象)\r\n* 实例\r\n    * size: 容量\r\n* 原型\r\n    * 查\r\n        * 按键查\r\n            * has(键): 按值查键是否存在\r\n            * get(键): 按值查键的值\r\n        * 按值查\r\n    * 增删改\r\n        * *set(键, 值): 设置键值对, 返回自身\r\n        * *delete(键): 删除键值对, 返回布尔值\r\n        * *clear(): 清除所有键值对\r\n    * 遍历\r\n        * *forEach(回调函数, 回调函数的this)\r\n    * 映射\r\n        * keys()\r\n        * values()\r\n        * entries()\r\n### Array\r\n\r\n* 构造\r\n    * 字面量: []\r\n    * 函数\r\n        * Array.from(可迭代对象[, 映射函数[, 映射函数中this的值]])\r\n        * Array.of(参数...)\r\n    * 构造函数: Array([长度])\r\n* 静态\r\n    * from(可迭代对象[, 映射函数[, 映射函数中this的值]]): 将可迭代对象转换为数组\r\n    * of(参数...): 将一组参数转换为数组, 可用[]代替\r\n    * isArray(): 判断是否是数组![图片](https://uploader.shimo.im/f/S7ZIclPOL7eRJP65.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n* 实例\r\n    \r\n    * length\r\n* 原型\r\n    * 查\r\n        * 按索引查\r\n            * [索引]: 查找指定索引的元素\r\n            * slice([起始索引[, 终止索引]]): 裁剪数组\r\n        * 按值查\r\n            * indexOf(要查的元素...), lastIndexOf(要查的元素...), includes(要查的元素...): indexOf()和 lastIndexOf()都返回要查找的元素在数组中的位置，如果没找到则返回-1。 includes()返回布尔值，表示是否至少找到一个与指定元素匹配的项\r\n            * find(断言函数), findeIndex(断言函数): find()和 findIndex()方法使用了断言函数。这两个方法都从数组的最小索引开始。find()返回 第一个匹配的元素，findIndex()返回第一个匹配元素的索引。这两个方法也都接收第二个可选的参数， 用于指定断言函数内部 this 的值\r\n            * every(断言函数), some(断言函数)\r\n            * filter(断言函数)\r\n    * 增删改\r\n        * 数组 + 数组, concat(数组): 数组拼接\r\n        * *[索引] = 元素\r\n        * *fill(值[, 起始索引[, 终止索引]]): 以指定值填充数组, 若索引不合规范则略过此次操作\r\n        * *copyWithin(填充起始索引[, 填充物起始索引[, 填充物终止索引]]): 填充指定位置开始的一系列值![图片](https://uploader.shimo.im/f/gvN9W4tVXZ5i98c2.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * *push(), pop(), shift(), unshift(): 栈与队列方法\r\n        * *splice(索引位置, 要删除的元素数量[, 要插入的元素...]): 插删, 返回被删除的元素的数组\r\n    * 遍历\r\n        \r\n        * *forEach(副作用函数): 本质上等同于 for (const 元素 of 可迭代对象)\r\n    * 排序\r\n        \r\n        * *reverse(), sort(比较函数): 比较函数接收两个参数，如果第一个参数应该排在第二个参数前面，就返回负值；如果两个参数相 等，就返回 0；如果第一个参数应该排在第二个参数后面，就返回正值\r\n    * 映射\r\n        * map(映射函数): 映射\r\n        * keys(): 返回数组索引的可迭代对象\r\n        * values(): 返回数组元素的可迭代对象\r\n        * entries(): 返回索引与值对的可迭代对象\r\n        * flat(拉平层数): 拉平数组\r\n        * flatMap(映射函数): 先映射, 后拉平\r\n    * 归并\r\n        \r\n        * reduce(归并函数), reduceRight(归并函数): 归并\r\n    * 转换\r\n        * join(连接字符串): 将数组元素以指定字符串连接\r\n        * valueOf(), toString(), toLocaleString():![图片](https://uploader.shimo.im/f/jEwAgkvEZsWp4pXW.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n### 定型数组\r\n\r\n* 元素类型: Int8, Uint8, Int16, Uint16, Int32, Uint32, Float32, Float64![图片](https://uploader.shimo.im/f/UxYpYFATkAqKwfnA.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n#### ArrayBuffer\r\n\r\n![图片](https://uploader.shimo.im/f/Sz4KMcyJ0UexprDr.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n\r\n* 构造\r\n    * 构造函数: new ArrayBuffer(分配字节数)\r\n* 实例\r\n    * byteLength: 字节长度\r\n#### DataView\r\n\r\n* 构造\r\n    * 构造函数: new DataView(ArrayBuffer对象[, 字节偏移量[, 字节长度]])\r\n* 实例\r\n    * byteOffset: 字节偏移量\r\n    * byteLength: 字节长度\r\n    * buffer: 所代理的ArrayBuffer对象\r\n* 原型\r\n    * 查\r\n        * get元素类型(字节索引[, 是否开启小端序])\r\n    * 增删改\r\n        * *set元素类型(字节索引, 值[, 是否开启小端序])\r\n#### 元素类型Array\r\n\r\n* 构造\r\n    * 构造函数: new 元素类型Array(分配元素数|ArrayBuffer对象|纯数字元素的数组)\r\n* 静态\r\n    * from(), of()\r\n* 实例\r\n    * length: 长度\r\n    * byteLength: 字节长度\r\n    * buffer: 所代理的ArrayBuffer对象\r\n    * BYTES_PER_ELEMENT: 每个元素所占字节数\r\n* 原型\r\n    * 查\r\n        * 按索引查\r\n            * [索引]\r\n            * slice([起始索引[,终止索引]]), subarray\r\n        * 按值查\r\n            * filter(映射函数)\r\n            * find(断言函数), findIndex(断言函数)\r\n            * indexOf(), lastIndexOf()\r\n            * every(断言函数), some(断言函数)\r\n    * 增删改\r\n        * *[索引] = 值\r\n        * *fill(值[, 起始索引[, 终止索引]])\r\n        * *copyWithin(覆盖起始索引[, 复制起始索引[, 复制终止索引]])\r\n        * *set(元素类型Array对象|纯数字元素的数组[, 起始索引])\r\n    * 遍历\r\n        * *forEach()\r\n    * 排序\r\n        * *reverse(), sort(排序函数)\r\n    * 映射\r\n        * map(映射函数)\r\n        * entries()\r\n        * keys()\r\n        * values()\r\n    * 归并\r\n        * reduce(归并函数), reduceRight(归并函数)\r\n    * 转换\r\n        * join(连接字符串)\r\n        * toString(), toLocaleString()\r\n### Promise\r\n\r\n* 概念\r\n    * 期约状态机\r\n        * 待定(pending)\r\n        * 解决(resolved)\r\n        * 拒绝(rejected)\r\n    * 期约函数\r\n        * (resolve, reject) {}: 调用resolve()将会把promise对象状态从pending变为resolved, 调用rejcet()将会把promise对象状态从pending变为rejected\r\n* 构造\r\n    * new Promise(期约函数)\r\n* 静态\r\n    * resolve(): 实例化一个解决状态的期约\r\n    * reject(): 实例化一个拒绝状态的期约\r\n    * all(期约数组): 期约数组所有期约状态为resolved, 返回的合成期约状态才为resolved\r\n    * race(期约数组): 期约数组中的期约最先状态改变的那个期约为返回的合成期约的状态\r\n* 原型\r\n    * then([解决处理函数[, 拒绝处理函数]])\r\n    * catch(拒绝处理函数)\r\n    * finally()\r\n### Date\r\n\r\n* 构造\r\n    * 构造函数: new Date([毫秒数])\r\n* 静态\r\n    * parse(表示日期的字符串): 返回转换后的毫秒数![图片](https://uploader.shimo.im/f/zuYSGVnpDFf6Ra1u.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * UTC(年[, 月[, 日[, 时[, 分[, 秒]]]]): 返回转换后的毫秒数![图片](https://uploader.shimo.im/f/I5Oxr2eMoWsphSh0.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * now(): 返回当前毫秒数\r\n* 原型\r\n    * 日期格式化\r\n        * toLocaleString()\r\n        * toString()\r\n        * toDateString()\r\n        * toTimeString()\r\n        * toLocaleDateString()\r\n        * toUTCString()\r\n    * 日期特定部分\r\n        * getTime(): 返回日期的毫秒表示\r\n        * getFullYear(): 返回4位数年分\r\n        * getMonth(): 返回月份(0表示1月, 11表示12月)\r\n        * getDate(): 返回日期中的日(1~31)\r\n        * getDay(): 返回周几(0表示周日, 6表示周六)\r\n        * getHours(): 返回时(0~23)\r\n        * getMinutes(): 返回分(0~59)\r\n        * getSeconds(): 返回秒(0~59)\r\n        * getMilliseconds(): 返回毫秒(0~999)\r\n        * getTimezoneOffset(): 返回以分钟记的本地时区与UTC的偏移量\r\n        * *setTime(毫秒): 以指定毫秒设置日期\r\n        * *setFullYear(4位数年分): 设置年分\r\n        * *setMonth(月份): 设置月份\r\n        * *setDate(日): 设置日期中的日(1~31)\r\n        * *setDay(周几): 设置周几(0表示周日, 6表示周六)\r\n        * *setHours(时): 设置时(0~23)\r\n        * *setMinutes(分): 设置分(0~59)\r\n        * *setSeconds(秒): 设置秒(0~59)\r\n        * *setMilliseconds(毫秒): 设置毫秒(0~999)\r\n### RegExp\r\n\r\n* 概念\r\n    * 元字符: ( [ { \\ ^ $ | ) ] } ? * + .\r\n        * 基础元字符\r\n            * \\t: 制表符\r\n            * \\s: 表示一个空格\r\n            * \\r: 回车\r\n            * \\n: 换行\r\n            * \\S: 表示一个非空格, 可用[^\\s]表示\r\n            * \\d: 表示一个数字, 可用[0-9]表示\r\n            * \\D: 表示一个非数字, 可用[^0-9]表示\r\n            * \\w: 表示一个数字 或 字母 下划线, 可用[0-9a-zA-Z_]表示\r\n            * \\W: 表示一个非\\w, 可用[^0-9a-zA-Z_]表示\r\n            * .: 非换行和回车的任意字符, 可用[^\\r\\n]表示, 当其出现在[]里时只表示点这个字符\r\n        * 边界元字符\r\n            * ^: 表示字符串需以此开头\r\n            * $: 表示字符串需以此结束\r\n        * 限定元字符\r\n            * 贪婪模式: 尽可能捕获更多的内容\r\n                * *: 字符出现0~无穷次\r\n                * +: 字符出现1~无穷次\r\n                * ?: 字符出现0或1次\r\n                * {n}: 字符出现n次\r\n                * {n,}: 字符出现n~无穷次\r\n                * {n,m}: 字符出现n~m次\r\n            * 非贪婪模式: 尽可能捕获更少的内容\r\n                * 贪婪模式后加?\r\n        * 特殊字符\r\n            * ()\r\n                * 作用1: 表示一个整体\r\n                * 作用2: 单独捕获\r\n            * (?:): 只表示一个整体, 不捕获\r\n            * (?=): 正向肯定预查![图片](https://uploader.shimo.im/f/MgPBy9v8DaiXqbwD.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * (?!): 正向否定预查![图片](https://uploader.shimo.im/f/AQ3nNtfssQQLAjmY.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * (?<=): 负向肯定预查![图片](https://uploader.shimo.im/f/HBjaAn2qiXGzWaDL.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * (?<!): 负向否定预查![图片](https://uploader.shimo.im/f/ecQUkv8iwIoOKcZB.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * \\n: 第n个可被捕获括号匹配的字符串![图片](https://uploader.shimo.im/f/whpSWTP4fPTU6air.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * |: 占位或, 表示左边右边都行, 分开的时左边和右边整个![图片](https://uploader.shimo.im/f/68N4re3paMgfPpNr.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * []: 含其中任意一个都行![图片](https://uploader.shimo.im/f/tI4XkHXqp3zDvaiw.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * [^]: 非其中任意一个都行\r\n            * [字符-字符]: 表示从哪一个字符到哪一个字符的意思,前提是他们的ASCII码时连着的\r\n    * 标记\r\n        * g：全局模式，表示查找字符串的全部内容![图片](https://uploader.shimo.im/f/KpfTXd2m9fXdgAJx.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * i：不区分大小写，表示在查找匹配时忽略 pattern 和字符串的大小写\r\n        * y：粘附模式，表示只查找从 lastIndex 开始及之后的字符串![图片](https://uploader.shimo.im/f/fce4Fu5Oqyt8yucI.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * m：多行模式，表示查找到一行文本末尾时会继续查找\r\n        * u：Unicode 模式，启用 Unicode 匹配\r\n        * s：dotAll 模式，表示元字符.匹配任何字符（包括\\n 或\\r）\r\n    * 局限\r\n        * \\A 和\\Z 锚（分别匹配字符串的开始和末尾）\r\n        * 联合及交叉类\r\n        * 原子组\r\n        * x（忽略空格）匹配模式\r\n        * 条件式匹配\r\n        * 正则表达式注释 虽然还有这些局限，但 ECMAScript 的正则表达式已经非常强大，可以用于大多数模式匹配任务。\r\n* 构造\r\n    * 字面量: /匹配模式/标记\r\n    * 构造函数: new RegExp(匹配模式, 标记)\r\n* 实例\r\n    * global：布尔值，表示是否设置了 g 标记\r\n    * ignoreCase：布尔值，表示是否设置了 i 标记\r\n    * unicode：布尔值，表示是否设置了 u 标记\r\n    * sticky：布尔值，表示是否设置了 y 标记\r\n    * lastIndex：整数，表示在源字符串中下一次搜索的开始位置，始终从 0 开始\r\n    * multiline：布尔值，表示是否设置了 m 标记\r\n    * dotAll：布尔值，表示是否设置了 s 标记\r\n    * source：正则表达式的字面量字符串（不是传给构造函数的模式字符串）\r\n    * flags：正则表达式的标记字符串（不是传给构造函数的模式字符串）\r\n* 原型\r\n    * *exec(要进行捕获的字符串)\r\n        * 匹配成功: 返回一个数组, 数组含捕获的字符串, 以及index(首次匹配成功索引), input(进行捕获的字符串), groups属性\r\n        * 匹配不成功: 返回null\r\n    * *test(要进行匹配的字符串): 匹配成功返回true, 反之返回false\r\n    * valueOf(): 返回正则表达式自身\r\n    * toString(), toLocalString: 返回正则表达式字面量形式\r\n### Math\r\n\r\n* 静态\r\n    * E: 自然对数的基数 e 的值\r\n    * LN10: 10 为底的自然对数\r\n    * LN2: 2 为底的自然对数\r\n    * LOG2E: 以 2 为底 e 的对数\r\n    * LOG10E: 以 10 为底 e 的对数\r\n    * PI: π 的值\r\n    * SQRT1_2: 1/2 的平方根\r\n    * SQRT2: 2 的平方根\r\n* 原型\r\n    * min(数值...), max(数值...)\r\n    * ceil(浮点数), floor(浮点数), round(浮点数), fround(浮点数)![图片](https://uploader.shimo.im/f/qtwTsYBj25JTNLCA.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n    * random(): 返回0~1之间的随机数, 包含0不包含1\r\n    * ![图片](https://uploader.shimo.im/f/GpWvDfAJOC0eE1o7.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n### 字符编解码\r\n\r\n#### TextEncoder\r\n\r\n* 构造\r\n    * new TextEncoder()\r\n* 原型\r\n    * encode(字符串): 将指定字符串编码位UTF-8, 以Unit8Array格式返回\r\n    * encodeInto(字符串, Unit8Array数组)\r\n#### TextEncoderStream\r\n\r\n#### TextDecodeer\r\n\r\n* 构造\r\n    * new TextDecoder(编码格式)\r\n* 原型\r\n    * decode()\r\n#### TextDecoderStream\r\n\r\n### 文件编解码\r\n\r\n#### File\r\n\r\n* 实例\r\n    * name\r\n    * size\r\n    * type\r\n    * lastModifiedDate\r\n* 原型\r\n    * slice()\r\n#### FileReader\r\n\r\n* 实例\r\n    * result: 获取的结果存储在这里\r\n    * error\r\n    * 事件\r\n        * onprogress\r\n            * 事件参数\r\n                * loaded\r\n                * total\r\n                * lengthcomputable\r\n        * onerror\r\n        * onload\r\n        * onabort\r\n* 原型\r\n    * readAsText(文件, encoding)\r\n    * readAsDataURL(文件)\r\n    * readAsBinaryString(文件)\r\n    * readAsArrayBuffer(文件)\r\n    * abort(): 停止文件读取\r\n#### FileReaderSync\r\n\r\n#### Blob\r\n\r\n* 构造\r\n    * new Blob(包含字符串的数组 | 定型数组, { type: MIME类型 })\r\n* 实例\r\n    * size\r\n    * type\r\n* 原型\r\n    * slice()\r\n### 序列化与反序列化\r\n\r\n#### JSON\r\n\r\n* 静态\r\n    * stringify(被序列化对象[, 过滤函数[, 缩进空格个数]]): 若含toJSON()方法则序列化其返回值, 若无则序列化原始对象\r\n    * parse(JSON串[, 过滤函数])\r\n#### FormData\r\n\r\n* 构造\r\n    * new FormData([表单元素])\r\n* 原型\r\n    * append(键, 值)\r\n#### URL\r\n\r\n* 构造\r\n    * new URL(url地址)\r\n* 静态\r\n    * createObjectURL(File对象 | Blob对象)\r\n    * revokeObjectURL(url): 释放指定url\r\n* 实例\r\n    * href: 完整URL\r\n    * origin: URL源地址\r\n    * protocol: 协议\r\n    * username: 用户名\r\n    * password: 密码\r\n    * host: 服务器名及端口号\r\n    * hostname: 服务器名\r\n    * port: 端口号\r\n    * pathname: 路径名\r\n    * search: 查询字符串\r\n    * searchParams: URLSearchParams对象\r\n    * hash: 锚点\r\n#### URLSearchParams\r\n\r\n* 特性\r\n    * 可迭代对象: [键, 值]\r\n* 构造\r\n    * new URLSearchParams(查询字符串)\r\n* 原型\r\n    * 查\r\n        * has(键)\r\n        * get(键)\r\n    * 增删改\r\n        * set(键, 值)\r\n        * delete(键)\r\n    * 转换\r\n        * toString()\r\n### 网络\r\n\r\n#### XMLHttpRequest\r\n\r\n* 概念\r\n    * 跨域\r\n        * 简单请求\r\n            * 只含默认请求头\r\n            * 请求体是text/plain\r\n        * 预检请求\r\n        * 凭据请求\r\n            * withCredentials头为true\r\n    * 替代性跨域\r\n        * 图片探测\r\n        * JSONP\r\n* 构造\r\n    * new XMLHttpRequest()\r\n* 实例\r\n    * responseText, responseXML\r\n    * status, 2xx表示成功, 304表示从缓存取\r\n    * statusText\r\n    * timeout\r\n    * readyState: 0未初始化, 1已初始化, 2已发送, 3接受中, 4完成\r\n* 原型\r\n    * open(请求方式, 请求url, 布尔): 初始化\r\n        * 请求方式\r\n            * get\r\n                * 数据传输格式为URLParams\r\n            * post\r\n                * 数据传输格式\r\n                    * application/json\r\n                    * application/x-www-formurlencoded\r\n                    * application/multiple-formdata\r\n    * setResponseHeader(头部字段名, 头部字段值): 设置请求头\r\n        * 默认请求头\r\n            * Accept：浏览器可以处理的内容类型\r\n            * Accept-Charset：浏览器可以显示的字符集\r\n            * Accept-Encoding：浏览器可以处理的压缩编码类型\r\n            * Accept-Language：浏览器使用的语言\r\n            * Connection：浏览器与服务器的连接类型\r\n            * Cookie：页面中设置的 Cookie\r\n            * Host：发送请求的页面所在的域\r\n            * Referer：发送请求的页面的 URI。\r\n            * User-Agent：浏览器的用户代理字符串\r\n        * 常用请求头\r\n            * Content-Type\r\n            * Content-Length\r\n    * getResponseHeader(头部字段名)\r\n    * getAllResponseHeaders()\r\n    * overrideMimeType(MIME类型)\r\n    * send(null | 请求体): 发送请求\r\n    * abort(): 取消请求\r\n* 事件\r\n    * onreadystatechange\r\n    * 进度事件\r\n        * loadstart：在接收到响应的第一个字节时触发\r\n        * progress：在接收响应期间反复触发\r\n            * 事件参数\r\n                * lengthComputable: 进度信息是否可用\r\n                * position: 接收到的字节数\r\n                * totalSize: Content-Length定义的总字节数\r\n        * error：在请求出错时触发\r\n        * abort：在调用 abort()终止连接时触发\r\n        * load：在成功接收完响应时触发\r\n        * loadend：在通信完成时，且在 error、abort 或 load 之后触发\r\n#### FetchAPI\r\n\r\n* fetch(URL[, 初始化对象] | Request对象): 对URL发起请求, 返回值为Response对象的promise\r\n#### Headers\r\n\r\n#### Request\r\n\r\n* 构造\r\n    * new Request(URL[, 初始化对象])\r\n* 实例\r\n    * body\r\n    * bodyUsed\r\n    * cache\r\n    * credentials\r\n    * destination\r\n    * integrity\r\n    * keepalive\r\n    * method\r\n    * mode\r\n    * redirect\r\n    * referrer\r\n    * referrerPolicy\r\n    * signal\r\n    * url\r\n* 原型\r\n    * clone()\r\n    * text()\r\n    * blob()\r\n    * json()\r\n    * formData()\r\n    * arrayBuffer()\r\n#### Response\r\n\r\n* 构造\r\n    * new Response()\r\n* 静态\r\n    * redirect()\r\n    * error()\r\n* 实例\r\n    * body\r\n    * bodyUsed\r\n    * headers\r\n    * ok\r\n    * redirected\r\n    * status\r\n    * statusText\r\n    * url\r\n* 原型\r\n    * clone()\r\n    * text(): 返回值为纯文本格式响应体的promise\r\n    * blob(): 返回值为Blob格式响应体的promise\r\n    * json()\r\n    * formData()\r\n    * arrayBuffer()\r\n#### WebSocket\r\n\r\n* 构造\r\n    * new WebSocket(URL)\r\n* 静态\r\n    * OPENING: 0, 连接正在建立\r\n    * OPEN: 1, 连接已经建立\r\n    * CLOSING: 2, 连接正在关闭\r\n    * CLOSE: 3, 连接已经关闭\r\n* 原型\r\n    * send(数据)\r\n    * close()\r\n* 事件\r\n    * onmessage\r\n        * 事件参数\r\n            * data\r\n    * onopen\r\n    * onerror\r\n    * onclose\r\n        * 事件参数\r\n            * wasClean: 是一个布尔值，表示连接是否干净地关闭\r\n            * code: 是一 个来自服务器的数值状态码\r\n            * reason: 是一个字符串，包含服务器发来的消息\r\n### 本地\r\n\r\n#### Cookie\r\n\r\n* 概念\r\n    * 每个cookie的构成![图片](https://uploader.shimo.im/f/Y1CbKRHhAuwAyL7P.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * Name\r\n        * Value\r\n        * Domain\r\n        * Path\r\n        * Expire/Max-Age\r\n        * Size\r\n        * HttpOnly\r\n        * Secure\r\n        * SameSite\r\n        * Priority\r\n* 构造\r\n    * document.cookie\r\n* 获取cookie: document.cookie, 获取后需要decodeURIComponent()进行解码, 获取的字符串格式为\"name1=value1;name2=value2;name3=value3\"\r\n* 设置cookie: document.cookie = \"键=值\", 设置后需要encodeURIComponent()进行编码\r\n#### Storage\r\n\r\n* 构造\r\n    * sessionStorage: 本次会话的本地存储\r\n    * localStorage: 永久存储\r\n* 实例\r\n    * length: 保存的数据项个数\r\n* 原型\r\n    * setItem(): 存储或修改数据\r\n    * getItem(): 取出数据\r\n    * removeItem(): 删除数据\r\n    * clear(): 清除所有数据\r\n    * key(): 根据索引取出键\r\n### DOM\r\n\r\n#### EventTarget\r\n\r\n#### Node\r\n\r\n* 概念\r\n    * 一个文档中同一个节点不能出现在多个地方\r\n* 静态\r\n    * ELEMENT_NODE: 1\r\n    * ATTRIBUTE_NODE: 2\r\n    * TEXT_NODE: 3\r\n    * CDATA_SECTION_NODE: 4\r\n    * ENTITY_REFERENCE_NODE: 5\r\n    * ENTITY_NODE: 6\r\n    * PROCESSING_INSTRUCTION_NODE: 7\r\n    * COMMENT_NODE: 8\r\n    * DOCUMENT_NODE: 9\r\n    * DOCUMENT_TYPE_NODE: 10\r\n    * DOCUMENT_FRAGMENT_NODE: 11\r\n    * NOTATION_NODE: 12\r\n* 实例\r\n    * 索引\r\n        * ownerDocument, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling: 文档节点, 父子节点, 首末子节点, 前后兄弟节点\r\n    * 属性\r\n        * nodeType, nodeName, nodeValue: 节点类型, 节点名, 节点值\r\n* 原型\r\n    * 查\r\n        * hasChildNodes(): 是否有子节点\r\n        * matches(css查询器): 元素节点是否匹配css查询器\r\n    * 增删改\r\n        * *insertBefore(新节点, 参照节点): 子节点的参照节点前插入新的子节点, 返回新节点\r\n        * *appendChild(新节点): 子节点末尾添加新的子节点, 返回新节点\r\n        * *replaceChild(新节点, 被替换节点): 将新的子节点替换指定子节点, 返回被替换节点\r\n        * *removeChild(移除节点): 移除指定节点并返回之\r\n    * cloneNode(布尔值): 复制本节点并返回, 若为true则深复制, 否则只复制本节点\r\n    * normalize()\r\n#### NodeList\r\n\r\n* 实例\r\n    * length\r\n* 原型\r\n    * 查\r\n        * [索引], item(索引)\r\n#### HTMLCollection\r\n\r\n* 实例\r\n    * length\r\n* 原型\r\n    * 查\r\n        * [索引], item(索引)\r\n        * namedItem(name属性)\r\n#### Document\r\n\r\n* 构造\r\n    * document\r\n* 实例\r\n    * 索引\r\n        * doctype, documentElement, head, body: 指向!doctype元素, html元素, head元素, body元素, r\r\n        * anchors, forms, images, links: 所有带 name 属性的a元素, 所有form元素, 所有img元素, 所有带href的a元素, r\r\n        * activeElement: 获取焦点的元素\r\n    * 属性\r\n        * title, URL, domain, referrer: 标题, rw, 完整URL, r, 域名, rw, 链接到当前页面的那个页面的URL, r\r\n        * readyState: 文档加载状态\r\n        * compatMode: 渲染模式\r\n        * characterSet: 文档字符集\r\n* 原型\r\n    * createTextNode(文本), createElement(元素名), createElementNS(命名空间, 元素名), createDocumentFragment()\r\n    * write(), writeln()\r\n    * hasFocus()\r\n    * defaultView.getComputedStyle(元素, 伪元素)\r\n    * createEvent(事件名), dispatchEvent(事件名)\r\n    * 遍历\r\n    * 范围\r\n#### DocumentFragment\r\n\r\n* 构造\r\n    * document.createDocumentFragment()\r\n#### Element\r\n\r\n* 构造\r\n    * document.createElement(元素名)\r\n* 实例\r\n    * 索引\r\n        * childElementCount, children, firstElementChild, lastElementChild, previousElementSibling, nextElementSibling: 子元素结点个数, 子元素结点, 首末子元素结点, 前后兄弟元素结点\r\n    * 标签属性\r\n        * id, className, title, lang, dir, data-, draggable\r\n        * dataset\r\n        * attributes\r\n            * 原型\r\n                * [节点名], getNamedItem(节点名), item(节点名)\r\n                * removeNamedItem(节点名)\r\n                * setNamedItem(节点): 添加新的节点\r\n    * 样式\r\n        * classList\r\n            * 原型\r\n                * add(value): 向类名列表添加\r\n                * contains(value): 查询指定类名是否存在类名列表\r\n                * remove(value): 类名列表删除指定类名\r\n                * toggle(value): 类名列表存在指定类名则删除, 否则添加\r\n        * style\r\n            * cssText\r\n            * length\r\n            * parentRule\r\n            * getPropertyPriority(属性名)\r\n            * getPropertyValue(属性名)\r\n            * item(索引)\r\n            * removeProperty(属性名)\r\n            * setProperty(属性名, 值, 是否!important)\r\n    * 属性\r\n        * innerHTML, outerHTML, innerText, outerText\r\n        * offsetParent, offsetHeight, offsetWidth, offsetTop, offLeft, clientWidth, clientHeight, scrollTop, scrollLeft, scrollHeight, scrollWidth\r\n* 原型\r\n    * getElementById(), getElementsByTagName(), querySelector(), querySelectorAll(), getElementByclassName()\r\n    * getAttribute(), setAttribute(), removeAttribute()\r\n    * insertAdjacentHTML(模式, 内容), insertAdjacentText(模式, 文本)\r\n        * 模式\r\n            * beforebegin\r\n            * afterbegin\r\n            * beforeend\r\n            * afterend\r\n    * scrollIntoView(alignToTop | scrollIntoViewOptions)\r\n        * alignToTop 是一个布尔值\r\n            * true：窗口滚动后元素的顶部与视口顶部对齐\r\n            * false：窗口滚动后元素的底部与视口底部对齐\r\n        * scrollIntoViewOptions 是一个选项对象\r\n            * behavior：定义过渡动画，可取的值为\"smooth\"和\"auto\"，默认为\"auto\"\r\n            * block：定义垂直方向的对齐，可取的值为\"start\"、\"center\"、\"end\"和\"nearest\"，默 认为 \"start\"\r\n            * inline：定义水平方向的对齐，可取的值为\"start\"、\"center\"、\"end\"和\"nearest\"，默 认为 \"nearest\"。\r\n    * getBoundingClientRect()\r\n        * left\r\n        * top\r\n        * right\r\n        * bottom\r\n    * addEventListener(事件名, 回调[, 是否在捕获阶段触发]), removeEventListener(事件名, 回调[, 是否在捕获阶段触发])\r\n    * contains(元素)\r\n* 事件\r\n    * 用户界面事件\r\n        * DOMActivate\r\n        * load\r\n        * DOMContentLoaded\r\n        * unload\r\n        * abort\r\n        * error\r\n        * select\r\n        * resize\r\n        * scroll\r\n        * contextmenu: 常用作禁止鼠标右键\r\n            * 事件参数\r\n                * clientX, clientY\r\n        * selectstart: 常用作禁止文本选取\r\n        * beforeunload\r\n            * 事件参数\r\n                * returnValue\r\n        * readystatechange\r\n        * pageshow, pagehide\r\n        * haschange\r\n    * 设备事件\r\n        * orientationchange\r\n        * deviceorientation\r\n        * devicemotion\r\n    * 触摸及手势事件\r\n        * touchstart, touchend\r\n        * touchmove\r\n        * touchcancel\r\n        * gesturestart, gestureend\r\n        * gesturechange\r\n        * 事件参数\r\n            * clientX, clientY\r\n            * pageX, pageY\r\n            * screenX, screenY\r\n            * shiftKey, ctrlKey, altKey, metaKey\r\n            * touches, targetTouches, changeTouches\r\n                * clientX, clientY\r\n                * pageX, pageY\r\n                * screenX, screenY\r\n                * target：触摸事件的事件目标\r\n                * identifier：触点 ID\r\n    * 焦点事件\r\n        * blur(无冒泡)\r\n        * focus, focusin, focusout(无冒泡)\r\n    * 键盘与输入事件\r\n        * keydown, keyup: 不区分大小写\r\n        * keypress: 不触发功能键, 区分大小写\r\n        * textInput\r\n        * 事件参数\r\n            * keyCode: 按下键的ascii值\r\n    * 鼠标和滚轮事件\r\n        * click, dbclick\r\n        * mousedown, mouseup\r\n        * mouseenter, mouseleave(无冒泡)\r\n        * mouseout, mouseover\r\n        * mousemove\r\n        * mousewheel\r\n        * 事件参数\r\n            * clientX, clientY: 相对于可视区的距离\r\n            * pageX, pageY: 相对于文档整个页面的距离\r\n            * screenX, screenY: 相对于屏幕距离\r\n            * shiftKey, ctrlKey, altKey, metaKey\r\n            * button\r\n                * 0，表示没有按下任何键\r\n                * 1，表示按下鼠标主键\r\n                * 2，表示按下鼠标副键\r\n                * 3，表示同时按下鼠标主键、副键\r\n                * 4，表示按下鼠标中键\r\n                * 5，表示同时按下鼠标主键和中键\r\n                * 6，表示同时按下鼠标副键和中键\r\n                * 7，表示同时按下 3 个键\r\n    * 拖放事件\r\n        * dragstart\r\n        * drag\r\n        * dragend\r\n        * dragenter\r\n        * dragover\r\n        * dragleave\r\n        * drop\r\n* 事件参数\r\n    * 事件委托\r\n        * currentTarget: 指向绑定事件对象\r\n        * target: 触发事件的元素, this指向绑定事件对象\r\n    * 阻止事件默认回调\r\n        * preventDefault(): 调用后阻止当前元素指定事件的默认回调触发\r\n        * defaultPrevented: true 表示已经调用 preventDefault()方法\r\n    * 阻止事件冒泡\r\n        * stopPropagation(): 用于取消所有后续事件捕获或事件冒泡\r\n        * stopImmediatePropagation(): 用于取消所有后续事件捕获或事件冒泡，并阻止调用任 何后续事件处理程序\r\n        * cancelable 布尔值 只读 表示是否可以取消事件的默认行为\r\n        * bubbles: 事件是否冒泡\r\n    * 其他\r\n        * detail 整数 只读\r\n        * eventPhase 整数 只读 表示调用事件处理程序的阶段：1 代表捕获阶段，2 代表 到达目标，3 代表冒泡阶段\r\n        * preventDefault() 函数 只读 用于取消事件的默认行为。只有 cancelable 为 true 才 可以调用这个方法\r\n        * trusted 布尔值 只读 true 表示事件是由浏览器生成的。false 表示事件是开 发者通过 JavaScript 创建的（DOM3 Events 中新增）\r\n        * type 字符串 只读 被触发的事件类型\r\n        * View AbstractView 只读 与事件相关的抽象视图。等于事件所发生的 window 对象\r\n#### <form>\r\n\r\n* 实例\r\n    * action：请求的 URL，等价于 HTML 的 action 属性\r\n    * enctype：请求的编码类型，等价于 HTML 的 enctype 属性\r\n    * method：HTTP 请求的方法类型，等价于 HTML 的 method 属性\r\n    * name：表单的名字，等价于 HTML 的 name 属性\r\n    * acceptCharset：服务器可以接收的字符集，等价于 HTML 的 accept-charset 属性\r\n    * target：用于发送请求和接收响应的窗口的名字，等价于 HTML 的 target 属性\r\n    * length：表单中控件的数量\r\n    * elements：表单中所有控件的 HTMLCollection\r\n* 原型\r\n    * [索引]: 返回form表单中的元素\r\n    * reset()：把表单字段重置为各自的默认值\r\n    * submit()：提交表单\r\n* 事件\r\n    * submit\r\n    * reset\r\n#### <input>, <button>, <textarea>, <select>, <fieldset>\r\n\r\n* 实例\r\n    * name\r\n    * value\r\n    * form\r\n    * tabIndex\r\n    * readOnly\r\n    * disabled\r\n    * placeholder\r\n    * src\r\n    * files\r\n    * type\r\n        * submit\r\n        * reset\r\n        * image\r\n        * text\r\n        * button\r\n        * radio\r\n        * select-one\r\n        * select-multiple\r\n* 原型\r\n    * focus()\r\n    * blur()\r\n* 事件\r\n    * change\r\n    * blur\r\n    * focus\r\n    * input\r\n#### <video>, <audio>\r\n\r\n* 实例\r\n    * 基本\r\n        * videoHeight: 视频高\r\n        * videoWidth: 视频宽\r\n        * src: 音频文件地址\r\n        * controls: 是否显示控制器\r\n        * autoplay: 是否自动播放\r\n        * volume: 音量\r\n        * muted: 是否静音\r\n        * paused: 是否暂停\r\n        * loop: 是否循环\r\n        * defaultPlaybackRate: 默认播放速率\r\n        * start: 媒体开始位置\r\n    * 加载\r\n        * networkState: 当前网络连接状态, 0表示空, 1表示加载中, 2表示加载元素据, 3表示加载了第一帧, 4表示加载完成\r\n        * readyState: 媒体当前准备情况, 0表示不可用, 1表示可显示当前帧, 2表示可以开始播放, 3表示可以从头到尾播放\r\n        * buffered: 已下载缓冲的时间范围\r\n        * bufferedByte: 已下载的缓冲字节方位\r\n        * bufferingRate: 每秒下载的位数\r\n        * bufferingThrottled: 缓冲是否被浏览器截流\r\n    * 播放\r\n        * totalBytes: 资源总字节数\r\n        * duration: 媒体总秒数\r\n        * currentLoop: 当前媒体循环次数\r\n        * currentSrc: 当前媒体URL\r\n        * currentTime: 当前秒数\r\n        * ended: 媒体是否播放完成\r\n        * played: 以播放的时间范围\r\n        * playbackRate: 当前播放速率\r\n        * seekable: 可跳转时间范围\r\n        * seeking: 是否正移动到媒体新位置\r\n* 原型\r\n    * play()\r\n    * pause()\r\n    * canPlayType()\r\n* 事件\r\n    * timeupdate: 随着播放不断触发\r\n    * abort: 下载被中断\r\n    * canplay: 回放可以开始, readyState为2\r\n    * canplaythrough: 回放可以继续, readyState为3\r\n    * canshowcurrentframe: 可以显示当前帧, readyState为1\r\n    * dataunavailable: 不能回放, 因为没有数据, readyState为0\r\n    * durationchange: duration属性的值发生变化\r\n    * emptied: 网络连接关闭了\r\n    * empty: 发生了错误, 阻止媒体下载\r\n    * ended: 媒体已经播放完一遍, 且停止了\r\n    * error: 下载期间发生了网络错误\r\n    * loadedmetadata: 媒体的元数据已经下载\r\n    * loadstart: 西在已经开始\r\n    * pause: 回放已经暂停\r\n    * play: 媒体收到开始播放的请求\r\n    * playing: 媒体已经开始播放\r\n    * progress: 下载中\r\n    * ratechange: 媒体播放速率发生变化\r\n    * seeked: 跳转已结束\r\n    * seeking: 回放已移动到新位置\r\n    * stalled: 浏览器尝试下载, 但尚未收到数据\r\n    * timeupdate: currentTime被非常规或意外地更改了\r\n    * volumechange: volume或muted属性值发生了变化\r\n    * waiting: 回放暂停, 以下载更多数据\r\n#### Text\r\n\r\n* 构造\r\n    * document.createTextNode(文本)\r\n* 实例\r\n    * length\r\n* 原型\r\n    * appendData(文本)\r\n    * deleteData(offset, count)\r\n    * insertData(offset, text)\r\n    * replaceData(offset, count, text)\r\n    * splitText(offset)\r\n    * substringData(offset, count)\r\n#### Comment\r\n\r\n#### CDATASection\r\n\r\n#### DocumentType\r\n\r\n* 实例\r\n    * name\r\n#### Attr\r\n\r\n* 推荐使用element.getAttribute(), removeAttribute(), setAttribute()方法替代属性结点操作\r\n#### MutationObserver\r\n\r\n* 构造\r\n    * new MutationObserver(回调函数![图片](https://uploader.shimo.im/f/JMpSUY1SLJAMC75i.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr))\r\n        * 回调函数接收MutationRecord实例\r\n            * target\r\n            * type\r\n            * oldValue\r\n            * attributeName\r\n            * attributeNamespace\r\n            * addedNodes\r\n            * removeNodes\r\n            * previousSibling\r\n            * nextSibling\r\n* 原型\r\n    * observe(结点, MutationObserverInit对象)\r\n        * MutationObserveInit对象\r\n            * subtree: 观察目标结点子树, 布尔值\r\n            * attributes: 观察目标结点属性, 布尔值\r\n            * attributeFilter: 观察目标结点指定属性， 字符串数组\r\n            * attributeOldValue:\r\n            * characterData\r\n            * characterDataOldValue\r\n            * childList\r\n    * disconnect(): 取消结点绑定\r\n    * takeRecords(): 清空任务队列\r\n#### CanvasRenderingContext2D\r\n\r\n* 构造: canvas标签对象.getContext(\"2d\")\r\n* 实例\r\n    * 路径\r\n        * 路径\r\n            * beginPath(): 下笔\r\n            * closePath(): 停笔, 并封闭路径\r\n            * moveTo(x坐标, y坐标): 移笔\r\n            * lineTo(x坐标, y坐标): 画直线\r\n        * 样式\r\n            * fill(): 路径内部着色\r\n            * stroke(): 路径着色\r\n            * fillStyle: 路径内部着色样式\r\n            * strokeStyle: 路径着色样式\r\n            * lineWidth: 线条宽\r\n            * lineCap: 线条末端样式\r\n                * 可选值: butt(矩形, 默认值), round(圆形), square(突出的矩形)\r\n            * lineJoin: 线条交点样式\r\n                * 可选值: miter(菱形), round(扇形), bevel(三角形底边)\r\n            * getLineDash(): 返回数组, 表示虚线里面线段和间距的长度\r\n            * setLineDash([线段长, 间距长])\r\n# NodeJs\r\n\r\n## 脚本\r\n\r\n* node\r\n    * node js文件\r\n* npm\r\n    * npm init [脚本]\r\n    * npm install 包 [-g]\r\n    * npm uninstall 包\r\n    * npx 脚本\r\n    * npm run 自定义脚本\r\n## package.json\r\n\r\n* name: 模块名\r\n* main: 模块入口文件\r\n* scripts: 自定义脚本\r\n* dependencies: 运行时依赖\r\n* devDependencies: 开发时依赖\r\n## 属性\r\n\r\n* __dirname: 返回执行js文件的绝对路径\r\n## 类\r\n\r\n### EventEmitter\r\n\r\n* 构造\r\n    * new require(\"events\")\r\n* 原型\r\n    * on(事件, 回调函数)\r\n    * once(事件，回调函数)\r\n    * off(事件, 回调函数)\r\n    * emit(事件)\r\n### Buffer\r\n\r\n* 构造\r\n    * new Buffer()\r\n* 静态\r\n    * alloc(), allocUnsafe(), from()\r\n* 原型\r\n    * toString()\r\n## 模块\r\n\r\n### http\r\n\r\n* 属性\r\n    * METHODS: 支持的所有HTTP方法\r\n    * STATUS_CODES: 所有HTTP状态码及其描述\r\n    * globalAgent: Agent对象, 全局实例\r\n* 函数\r\n    * createServer(回调函数): 返回Server对象, 回调函数接收IncomingMessage对象和ServerResponse对象\r\n    * request(options,回调函数):返回ClientRequest对象, 回调函数参数为IncomingMessage对象\r\n        * options\r\n            * hostname\r\n            * port\r\n            * path\r\n            * method\r\n            * headers\r\n* 类\r\n    * ClientRequest\r\n        * 原型\r\n            * on(事件, 回调函数)\r\n            * write(Buffer对象| 字符串)\r\n            * end(): 发送请求\r\n        * 事件\r\n            * error\r\n                * 事件参数: Error对象\r\n    * Agent\r\n    * Server\r\n        * 原型\r\n            * close()\r\n            * listen(端口号, 回调函数)\r\n    * ServerResponse\r\n        * 实例\r\n            * statusCode，statusMessage\r\n        * 原型\r\n            * getHeaderNames() 获取已设置的 HTTP 消息头名称的列表。\r\n            * getHeaders() 获取已设置的 HTTP 消息头的副本。\r\n            * setHeader(\'headername\',value) 设置 HTTP 消息头的值。\r\n            * getHeader(\'headername\')获取已设置的 HTTP 消息头。\r\n            * removeHeader(\'headername\') 删除已设置的 HTTP 消息头。\r\n            * hasHeader(\'headername\') 如果响应已设置该消息头，则返回 true。\r\n            * headersSent() 如果消息头已被发送给客户端，则返回 true。\r\n            * writeHead(状态码,状态消息[, 请求头])\r\n            * end(): 结束响应\r\n            * on(事件, 回调函数)\r\n            * write(Buffer对象 | 字符串): 写入数据\r\n        * 事件\r\n            * finish: 写入完成时触发\r\n    * IncomingMessage\r\n        * 实例\r\n            * headers, rawHeaders\r\n            * statusCode(, statusMessage()\r\n            * method\r\n            * url\r\n            * httpVersion()\r\n            * socket()\r\n            * on(事件, 回调函数)\r\n            * pipe(WriteStream对象): 创建由ReadStream对象到WriteStream对象的管道流\r\n        * 事件\r\n            * data: 接收到数据时触发\r\n                * 事件参数: Buffer对象\r\n            * end: 数据接收完成时触发\r\n            * error: 出错时触发\r\n                * 事件参数: Error对象\r\n### fs\r\n\r\n* 函数\r\n    * 文件操作\r\n        * stat(路径, 回调函数): 检测是文件还是目录, 回调函数参数为Error对象和Stat对象\r\n        * mkdir(路径, 回调函数): 创建目录, 回调函数参数为Error对象\r\n        * writeFile(路径, 数据[, 选项], 回调函数): 创建并写入文件, 回调函数参数为Error对象\r\n            * 选项\r\n                * encoding: 默认\"utf-8\"\r\n                * mode: 读写权限, 默认438\r\n                * flag: 默认\"w\"\r\n        * appendFile(路径, 数据, 回调函数): 追加文件, 回调函数参数为Error对象\r\n        * readFile(路径[, 编码], 回调函数): 读取文件, 回调函数参数为Error对象和Buffer对象\r\n        * readdir(路径, 回调函数): 读取目录, 回调函数参数为Error对象和Array对象\r\n        * rename(源路径, 目的路径, 回调函数): 重命名或移动文件, 回调函数参数为Error对象\r\n        * rmdir(路径, 回调函数): 删除目录, 回调函数参数为Error对象\r\n        * unlink(路径, 回调函数): 删除文件\r\n    * 流\r\n        * createReadStream(路径): 创建ReadStream对象\r\n        * createWriteStream(路径): 创建WriteStream对象\r\n* 类\r\n    * Stat\r\n        * 原型\r\n            * isFile(): 判断是否是文件\r\n            * isDirectory(): 判断是否是目录\r\n    * ReadStream\r\n        * 构造\r\n            * fs.createReadStream(路径)\r\n        * 原型\r\n            * on(事件, 回调函数)\r\n            * pipe(WriteStream对象): 创建由ReadStream对象到WriteStream对象的管道流\r\n        * 事件\r\n            * data: 接收到数据时触发\r\n                * 事件参数: Buffer对象\r\n            * end: 数据接收完成时触发\r\n            * error: 出错时触发\r\n                * 事件参数: Error对象\r\n    * WriteStream\r\n        * 构造\r\n            * fs.createWriteStream(路径)\r\n        * 原型\r\n            * on(事件, 回调函数)\r\n            * write(Buffer对象 | 字符串): 写入数据\r\n        * 事件\r\n            * finish: 写入完成时触发\r\n### path\r\n\r\n* 函数\r\n    * basename(路径): 返回路径最后一部分\r\n    * dirname(路径): 返回路径目录部分\r\n    * extname(路径): 返回路径扩展名部分\r\n    * isAbsolute(路径): 是否绝对路径\r\n    * join(路径, ...): 连接多个路径\r\n    * normalize(路径): 计算实际路径\r\n    * parse(路径): 解析路径为Path对象\r\n    * relative(路径1, 路径2): 返回路径2对于路径1的相对路径\r\n    * resolve([路径, ...]): 返回绝对路径\r\n* 类\r\n    * Path\r\n        * 实例\r\n            * root: 根路径\r\n            * dir: 从根路径开始的文件夹路径\r\n            * base: 文件名+扩展名\r\n            * name: 文件名\r\n            * ext: 扩展名\r\n# 库\r\n\r\n## axios\r\n\r\n* 自身\r\n    * async axios(URL[, Config对象]): 返回Res对象\r\n    * async axios(Config对象): 返回Res对象fd\r\n* 属性\r\n    * defaults: 全局Config对象默认值\r\n    * interceptors: Interceptor对象\r\n        * Interceptor对象\r\n            * request\r\n                * async use(回调函数): 回调函数参数是Config对象\r\n                * eject(use函数返回的Promise对象)\r\n            * response\r\n                * async use(回调函数): 回调函数参数是Res对象\r\n                * eject(use函数返回的Promise对象)\r\n* 函数\r\n    * 方法别名\r\n        * async request(Config对象): 返回Res对象\r\n        * async get(URL[, Config对象]): 返回Res对象\r\n        * async post(URL[, Config对象]): 返回Res对象\r\n        * async delete(URL[, Config对象]): 返回Res对象\r\n        * async put(URL[, Config对象]): 返回Res对象\r\n    * 并发\r\n        * async all(迭代对象): 返回Res对象\r\n        * async spread(回调函数)\r\n    * 实例\r\n        * create(Config对象): 返回自定义配置的axios实例\r\n* 类\r\n    * Config\r\n        * method: 请求方法\r\n        * baseURL: 请求基地址\r\n        * url: 请求地址\r\n        * headers: 请求头\r\n        * withCredentials: 跨域请求是否使用凭证\r\n        * auth: 设置Authorization头\r\n        * proxy: 设置Proxy-Authorization头\r\n        * params: 查询参数, 数据类型为plain object | URLSearchParams对象\r\n        * data: 请求体\r\n            * 常见的请求体格式对应数据类型\r\n                * json\r\n                    * application/json->plain object\r\n                * 表单\r\n                    * application/x-www-form-urlencoded->plain object | URLSearchParams对象\r\n                    * multipart/form-data->FormData\r\n                * 文本\r\n                    * text/plain->string\r\n                    * text/html->string\r\n                    * text/xml->string\r\n                    * text/markdown->string\r\n                * 图片\r\n                    * image/gif: gif格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * image/jpeg: jpg格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * image/png: png格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                * 多媒体\r\n                    * audio/mpeg: mp3格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * audio/x-wav: wav格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * audio/x-ms-wma: w格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * video/mp4: mp4格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * video/avi: avi格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                    * video/x-ms-wmv: wmv格式->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n                * 二进制流\r\n                    * application/octet-stream->ArrayBuffer对象 | ArrayBufferView对象 | File对象 | Blob对象\r\n        * responseType: 响应体类型\r\n            * 响应体类型: arraybuffer, blob, document, json\r\n        * responseEncoding: 响应体编码\r\n        * onUploadProgress\r\n        * onDownloadProgress\r\n        * timeout: 请求超时时间\r\n    * Res\r\n        * data: 响应体\r\n        * status: 状态码\r\n        * statusText: 状态文本\r\n        * headers: 响应头\r\n        * config: 请求的配置\r\n        * request: 请求\r\n## koa\r\n\r\n* 安装\r\n    * npm i koa\r\n* 类\r\n    * Application\r\n        * 构造\r\n            * new require(\"koa\")\r\n        * 实例\r\n            * env: 环境\r\n            * keys: 签名的cookie密钥数组\r\n            * proxy: 是否启用代理\r\n            * proxyIpHeader: 代理ip消息头, 默认为X-Forwarded-For\r\n            * subdomainOffset: 偏移量, 默认为2\r\n            * maxIpsCount: 从代理ip消息头读取的最大ips, 默认为0(代表无限)\r\n        * 原型\r\n            * use(异步回调函数): 回调函数参数为Context对象和next函数, 返回this\r\n                * next函数: 调用next函数达成洋葱圈模型await next()\r\n            * listen(端口号): http.createServer(app.callback()).listen(端口号)的语法糖\r\n            * callback(): 返回一个回调函数, 供http.createServer(回调函数)或https.createServer(回调函数)使用\r\n            * on(事件, 回调函数)\r\n        * 事件\r\n            * error\r\n                * 事件参数: Error对象和Context对象\r\n    * Context\r\n        * 实例\r\n            * state: 用于通过中间件传递信息的属性\r\n            * app: 对app的引用\r\n            * cookies\r\n                * get(name[, options])\r\n                * set(name, value[, options])\r\n            * req: 返回Request对象\r\n            * res: 返回Response对象\r\n        * 原型\r\n            * throw(状态码[, 状态消息]): 用于发送400或500的错误响应\r\n            * set(响应头的键, 响应头的值)\r\n    * Request\r\n        * 实例\r\n            * URL: 获取URL对象\r\n            * method: 请求方法\r\n            * headers: 请求头\r\n            * length: 请求头的Content-Length字段\r\n            * type: 请求头的Content-Type字段, 不含charset参数\r\n            * charset: 请求的Content-Type字段的charset参数\r\n            * fresh: 用于 If-None-Match / ETag, 和 If-Modified-Since 和 Last-Modified 之间的缓存协商\r\n            * body\r\n            * socket\r\n            * ip: 请求的远程地址, 当app.proxy是true时支持X-Forwarded-Proto\r\n            * ips\r\n            * subdomains\r\n        * 原型\r\n            * acceptsEncodings()\r\n            * acceptsCharsets()\r\n            * acceptsLanguages()\r\n            * accepts()\r\n            * get(请求头的键)\r\n            * has(响应头的键)\r\n    * Response\r\n        * 实例\r\n            * status\r\n            * message\r\n            * headers\r\n            * headerSent: 检查响应头是否发送\r\n            * lastModified\r\n            * etag\r\n            * length\r\n            * type\r\n            * body: 可为string | Buffer对象 | Stream对象 | 可序列化为Json的plain object或Array对象 | null\r\n            * socket\r\n        * 原型\r\n            * redirect()\r\n            * attachment()\r\n            * get(响应头的键)\r\n            * set(响应头的键, 响应头的值 | 以一个对象表示的多个响应头)\r\n            * remove(响应头的键)\r\n            * has(响应头的键)\r\n            * append([文件名[, 部分参数]])\r\n            * remove()\r\n## react\r\n\r\n* 复用\r\n* 目录结构\r\n    * public\r\n        * favicon.ico: 网页图标\r\n        * index.html\r\n    * src\r\n        * tool: 存放工具js文件的文件夹\r\n        * remoteApi: 存放服务端api的文件夹\r\n        * localApi: 存放本地api的文件夹\r\n        * component: 存放通用组件\r\n        * page: 存放各种组件文件夹, 组件文件夹由index.jsx, index.scss, asset文件夹构成, asset文件夹存放视频, 图片, 文本等\r\n        * index.js: 项目启动后运行的入口函数, 用ReactDOM.render()函数进行根React元素的DOM挂载, 根组件通常用BrowserRouter组件包裹用以提供路由相关的全局状态和副作用函数![图片](https://uploader.shimo.im/f/iyGZi6qEJcXT8Yta.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * index.scss: 全局css![图片](https://uploader.shimo.im/f/54d0RZ0kCTsEqCpj.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * App.jsx: 根组件\r\n        * App.scss: 根组件的css\r\n* 模块\r\n    * react\r\n        * 类\r\n            * *React\r\n                * 静态\r\n                    * createElement(类型[, 属性[, 子组件...]]): 创建React元素, 可用jsx语法简写![图片](https://uploader.shimo.im/f/wgke2do4yH6LyclA.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                        * jsx语法\r\n                            * 标签中混入JS表达式要用{}\r\n                            * 样式的类名指定不要用class, 要用className\r\n                            * 内联样式style接收对象\r\n                            * 属性用驼峰命名法\r\n                            * 虚拟DOM只能有一个根标签\r\n                            * 标签必须闭合\r\n                            * 首字母大写的标签<=>React组件\r\n                            * 标签的属性可以用展开对象语法...\r\n                    * createContext(初始值): 返回一个Context对象\r\n                    * Fragment组件: 减少不必要的嵌套\r\n            * Context\r\n                * 构造\r\n                    * React.createContext(初始值)![图片](https://uploader.shimo.im/f/cQ9MLy0yZmRknwWc.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                * 原型\r\n                    * Provider组件: 为后代组件提供全局状态和副作用函数, 参数value提供全局状态和副作用函数, 参数children为子组件![图片](https://uploader.shimo.im/f/n2DG94hNLgwrtxD6.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n        * 函数\r\n            * -useState(初始化参数): 返回一个数组, 数组第一个元素为状态值, 第二元素为改变状态值的方法![图片](https://uploader.shimo.im/f/YILe6Av0TfEwLOqL.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr), 改变状态的方法接收参数为值或一个回调函数, 这个回调函数的参数为现在的状态值, 返回值为要赋的值![图片](https://uploader.shimo.im/f/4W6BtvRqW8DUgYPX.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * -useReducer(reducer, 默认值): 返回一个数组, 数组第一个元素为状态值, 第二个元素为改变状态值的dispatch, 可替代useState\r\n            * -useContext(Context对象): 返回Context对象的先代Provider组件提供的全局状态和副作用函数\r\n            * useRef(初始值): 返回ref\r\n            * -useEffect(回调函数[, 监听状态数组]): 每次组件渲染后触发, 返回值为组件卸载时触发的函数![图片](https://uploader.shimo.im/f/AJ0eXMafwMdtgk5C.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr), 监听状态数组把触发时机改为指定状态改变后触发, 若为空数组[]则只在第一次渲染和卸载时触发\r\n            * -useLayoutEffect(回调函数[, 监听状态数组]): 同useEffect, 但调用时机不同, useEffect在浏览器渲染完成后调用, useLayoutEffect在浏览器渲染完成前调用\r\n    * react-dom\r\n        * 类\r\n            * *ReactDOM\r\n                * 静态\r\n                    * render(React元素, DOM元素): 渲染React元素到DOM元素上\r\n                    * unmountComponentAtNode(DOM元素)\r\n    * react-router-dom(需额外安装)\r\n        * 函数\r\n            * -BrowserRouter组件: 包裹在根组件外提供路由相关的全局状态与副作用函数![图片](https://uploader.shimo.im/f/6Y9tc0yr6f1eCkJj.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n            * -HashRouter组件: 与BrowserRouter组件不同在于HashRouter组件利用的时锚点\r\n            * -Switch组件: 唯一路由匹配组件, 包裹在Route组件和Redirect组件外\r\n            * -Route组件: 参数path为匹配路径, 参数component为匹配组件, 会给component指定组件传递三个路由参数\r\n                * history\r\n                    * go(数值):\r\n                    * goBack(): 路由后退一步\r\n                    * goForward(): 路由前进一步\r\n                    * push(路由[, 传参]): 跳转到指定路由, 可进行传参\r\n                    * replace()\r\n                * location\r\n                    * pathname\r\n                    * search\r\n                    * state\r\n                * match\r\n                    * params\r\n                    * path\r\n                    * url\r\n            * -Redirect组件: 参数to为重定向路径\r\n            * -withRouter(组件): 将指定组件赋予三个路由参数\r\n# 环境\r\n\r\n## babel\r\n\r\n* 安装\r\n    * npm i @babel/core @babel/cli @babel/node @babel/preset-env -D\r\n    * npm i @babel/polyfill\r\n* 配置\r\n    * 根目录下创建的babel.config.js\r\n```javascript\r\nconst presets = [\r\n  [\r\n    \"@babel/env\",\r\n    {\r\n      targets: {\r\n        edge: \"17\",\r\n        firefox: \"60\",\r\n        chrome: \"67\",\r\n        safari: \"11.1\",\r\n      },\r\n      useBuiltIns: \"usage\",\r\n      corejs: \"3.6.4\",\r\n    },\r\n  ],\r\n];\r\nmodule.exports = { presets };\r\n```\r\n* 脚本\r\n    * babel-node js文件\r\n## webpack\r\n\r\n* 安装\r\n    * npm i webpack webpack-cli -D\r\n* 配置\r\n    * 根目录下创建webpack.config.js, 暴露一个presets对象\r\n        * presets\r\n            * mode: 打包模式, \"development\"表示开发模式, 开发效率高, \"production\"表示生产模式, 执行速度快\r\n            * entry\r\n                * main: 被打包文件的绝对路径, 默认./index.js\r\n            * output\r\n                * path: 打包文件输出目录的绝对路径, 默认./dist\r\n                * filename: 打包文件的文件名, 默认main.js\r\n            * module\r\n                * rules: 规则数组\r\n                    * 规则\r\n                        * test: 正则表达式, 表示匹配的文件\r\n                        * exclude: 正则表达式, 表示排除掉的文件\r\n                        * use: loader名字数组, 加载顺序从右往左\r\n                            * loader\r\n                                * 处理css: style-loader css-loader\r\n                                * 处理样式兼容性css: 处理css postcss-loader, 还需安装autoprefixer, 需在根目录下创建postcss.config.js配置文件\r\n```javascript\r\nconst autoprefixer = require(\"autoprefixer\")\r\nmodule.exports = {\r\n  plugins: [autoprefixer]\r\n}\r\n```\r\n                                * 处理less: 处理样式兼容性css less-locaer, 还需安装less模块\r\n                                * 处理sass: 处理样式兼容性css sass-loader, 还需安装sass模块\r\n                                * 处理图片: file-loader\r\n                                * 处理base64图片: url-loader, 还需安装file-loader![图片](https://uploader.shimo.im/f/8KAvrfKRaNOzQ4px.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                                * 处理字体: 同图片\r\n                                * 处理base64字体: 同图片![图片](https://uploader.shimo.im/f/aVE4iUTnIj0R2dHF.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                                * 处理js高级语法: babel-loader, 还需安装 @babel/core, @babel/runtime, @babel/preset-env, @babel/plugin-transform-runtime, @babel/plugin-proposal-class-properties, 还需在根目录下创建babel.config.js配置文件![图片](https://uploader.shimo.im/f/19oW0CoDYKSiwyPm.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n```javascript\r\nconst presets = [\r\n  [\r\n    \"@babel/env\",\r\n    {\r\n      targets: {\r\n        edge: \"17\",\r\n        firefox: \"60\",\r\n        chrome: \"67\",\r\n        safari: \"11.1\",\r\n      },\r\n      useBuiltIns: \"usage\",\r\n      corejs: \"3.6.4\",\r\n    },\r\n  ],\r\n];\r\nconst plugins = [\r\n  \"@babel/plugin-transform-runtime\",\r\n  \"@babel/plugin-proposal-class-properties\"\r\n]\r\nmodule.exports = { presets, plugins };\r\n```\r\n                                * 处理vue单文件组件: 看vue官网\r\n            * plugins: 内置插件数组\r\n                * 内置插件\r\n                    * html-webpack-plugin: html文件打包\r\n                        * 安装\r\n                            * npm i html-webpack-plugin -D\r\n                        * 插件生成\r\n                            * const HtmlWebpackPlugin = require(\"html-webpack-plugin\")\r\n                            * const htmlPlugin = new HtmlWebpackPlugin({ template: 源html, filename: 打包后的html文件名 })\r\n* 脚本\r\n    * webpack: 打包\r\n* 脚本插件\r\n    * webpack-dev-server: 热加载插件\r\n        * 安装\r\n            * npm i webpack-dev-server -D\r\n        * 脚本\r\n            * webpack serve: 开启一个热加载服务器\r\n                * 可选项\r\n                    * --open: 自动打开浏览器\r\n                    * --host 主机: 指定主机\r\n                    * --port 端口号: 指定端口号\r\n# 抽象\r\n\r\n* 系统\r\n    * 构成\r\n        * 配置\r\n        * 状态\r\n        * 副作用\r\n        * 函数\r\n    * 概念\r\n        * 监听(监听作用域, 监听生命周期)\r\n        * 生命周期\r\n        * 作用域\r\n        * 配置点\r\n    * 例子\r\n        * UI\r\n            * 状态\r\n                * 内部可改的状态\r\n                * 外部可改的状态\r\n            * 常量\r\n                * html\r\n                * css\r\n                * 自定义常量\r\n            * 渲染函数\r\n                * 模板语法\r\n                    * 插值\r\n                    * 条件渲染\r\n                    * 列表渲染\r\n            * 监听\r\n                * DOM\r\n                * 生命周期\r\n                * 路由\r\n                    * 路由匹配\r\n                    * 路由重定向\r\n                * 状态\r\n        * API\r\n* 标识\r\n    * 可靠的标识\r\n    * 不可靠的标识\r\n        * https: 客户端, 服务端标识\r\n        * 鉴权: 权限标识\r\n            * 密码学\r\n                * 对称加密\r\n                * 非对称加密\r\n                * 不可逆加密\r\n            * 例子\r\n                * session\r\n                * jwt\r\n                    * 构成: 三段信息构成, 每段都是json对象采用base64进行加密, 最后将三段用.连接起来![图片](https://uploader.shimo.im/f/ZHtBFf4vHIll0mKp.png!thumbnail?fileGuid=tdgHd88WqG3c9Wrr)\r\n                        * 头部\r\n                            * typ: 声明类型\r\n                            * alg: 加密算法\r\n                        * 载荷\r\n                            * 标准中注册的声明\r\n                                * iss: jwt签发者\r\n                                * sub: jwt所面向的用户\r\n                                * aud: 接收jwt的一方\r\n                                * exp: jwt的过期时间, number类型, 单位为秒\r\n                                * nbf: 定义在什么时间之前, 该jwt都是不可用的\r\n                                * iat: jwt的签发时间\r\n                                * jti:jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击\r\n                            * 公共的声明\r\n                            * 私有的声明\r\n                        * 签名\r\n                            * 头部指定的加密算法(base64后的头部和载荷用.进行连接的字符串, 密钥作为盐)\r\n                    * 用法\r\n                        * 在请求头中加入Autho\r\n                * oauth\r\n        * 验证码: 人机标识\r\n* 权限管理\r\n    * 用户\r\n    * 角色\r\n    * 权限\r\n* 版本管理\r\n    * 实时数据\r\n        * 生命周期最短的数据记录点\r\n        * 生命周期在每次设置数据之间\r\n        * 数据记录点的范围为 本实时数据\r\n        * 实时的数据\r\n    * 暂存数据\r\n        * 生命周期较短的数据记录点\r\n        * 生命周期在两个版本数据提交之间\r\n        * 数据记录点的范围为 最新提交到暂存数据的实时数据 和 本版本数据\r\n        * 用于实时数据到版本数据的中间站,暂存数据可从实时数据提交, 也可提交到版本数据 记录着暂存数据与实时数据和提交数据的差异\r\n    * 版本数据\r\n        * 生命周期最长的数据记录点\r\n        * 生命周期在该数据的创建到销毁全过程\r\n        * 数据记录点的范围为 所有从暂存数据提交的版本数据\r\n        * 每从暂存数据提交一次生成一个数据版本, 可将版本指针跳转到任意版本, 可从任意版本生成一个新的分支, 可将两个分支版本指针指向的版本进行合并\r\n* IO\r\n    * 阻塞式IO\r\n    * 非阻塞式IO\r\n    * 多路复用IO\r\n        * select\r\n        * poll\r\n        * epoll\r\n    * 信号驱动式IO\r\n    * 异步IO\r\n* 代数学\r\n    * 研究方向: 代数运算\r\n    * 学科\r\n        * 线性代数\r\n        * 抽象代数(近世代数)\r\n        * 数论\r\n            * 代数数论\r\n            * 解析数论\r\n        * 代数几何\r\n    * 概念\r\n        * 群\r\n            * 正四面体的旋转\r\n            * 模(线性代数一般化理论)\r\n        * 环\r\n            * 加和乘\r\n        * 域\r\n            * 四则运算\r\n                * 伽瓦罗理论\r\n* 几何学\r\n    * 研究方向: 图形\r\n    * 学科\r\n        * 流形\r\n        * 集合与拓扑\r\n        * 拓扑学\r\n            * 欧拉公式\r\n        * 微分几何\r\n            * 曲率\r\n            * 图形分类(黎曼几何)\r\n    * 概念\r\n        * 流形\r\n* 分析学\r\n    * 研究方向: 函数运算\r\n    * 学科\r\n        * 微积分: 对函数的运算\r\n        * 向量分析, 向量积分(水流的表示, 场论)\r\n        * 复分析\r\n            * 欧拉公式\r\n        * 微分方程: 求解对象为函数\r\n        * 偏微分方程\r\n        * 勒贝格积分\r\n        * 泛函分析: 全体函数组成的空间\r\n        * 傅里叶分析\r\n            * 傅里叶变换\r\n* 应用数学\r\n    * 普通\r\n        * 概率论\r\n        * 数理统计\r\n        * 随机过程\r\n    * 计算数学\r\n    * 图论\r\n    * 数值分析\r\n* 基础数学\r\n    * 集合论\r\n    * 逻辑学\r\n    * 范畴论\r\n* 离散数学\r\n    * 集合论与图论\r\n    * 数理逻辑\r\n    * 近世代数\r\n    * 形式语言与自动机\r\n* 抽象表示\r\n    * 计算机的数学模型: 图灵机\r\n\r\n\r\n\r\n\r\n\r\n### \r\n\r\n\r\n', 204, '2021-04-22 23:20:38', '2021-04-22 23:20:40');
INSERT INTO `article` VALUES (2, 'Html', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/2.png', NULL, 'html索引', '# 标签\r\n\r\n* 基本标签\r\n    * <!doctype>\r\n    * <html>\r\n    * <head>\r\n    * <link>\r\n    * <script>\r\n    * <style>\r\n    * <base>\r\n    * <meta>\r\n    * <title>\r\n    * <body>\r\n* 语义标签\r\n    * 通用: div span\r\n    * 布局: header, aside, main, footer, nav, section, article\r\n    * 文本: pre, br, h1~ h6, p, b, i, sub, del, code, samp\r\n    * 图像: img, figure, figcaption\r\n        * src, alt, auto, lazy, eager\r\n    * 表单: form, label, input, button, select, option, datalist, textarea, progress\r\n    * 列表: ol, ul, li, dl, dt, dd\r\n    * 链接: a\r\n        * href, download(此属性只在不跨域的时候起效)\r\n    * 多媒体\r\n        * track\r\n        * source\r\n        * embed\r\n        * object\r\n        * param\r\n    * 嵌入: iframe\r\n* 通用属性\r\n    * id\r\n    * class\r\n    * title\r\n    * tabindex\r\n    * accesskey\r\n    * style\r\n    * hidden\r\n    * lang, dir\r\n    * contenteditable\r\n    * spellcheck\r\n    * data-\r\n    * 事件处理属性\r\n# SVG\r\n\r\n* js创建svg及其子元素要用document.createElementNS(命名空间, 元素名)\r\n* 功能\r\n    * svg: width, height, viewBox\r\n    * g: 属性复用\r\n    * defs: 可被引用\r\n* 形状\r\n    * 几何\r\n        * rect: x, y, width, height, rx, ry\r\n        * circle: cx, cy, r\r\n        * ellipse: cx, cy, rx, ry\r\n        * line: x1, y1, x2, y2\r\n        * polygon: points\r\n        * polyline: points\r\n        * path: d\r\n            * M = moveto\r\n            * L = lineto\r\n            * H = horizontal lineto\r\n            * V = vertical lineto\r\n            * C = curveto\r\n            * S = smooth curveto\r\n            * Q = quadratic Bézier curve\r\n            * T = smooth quadratic Bézier curveto\r\n            * A = elliptical Arc\r\n            * Z = closepath\r\n            * 注意：以上所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。\r\n    * 文本\r\n        * a: xlink\r\n        * text: x, y\r\n        * textPath: xlink\r\n        * tspan: x, y\r\n* 渲染\r\n    * 普通属性\r\n        * fill, fill-opacity, fill-rule\r\n        * stroke, stroke-opacity, stroke-width, stroke-linecap, stroke-dasharray， stroke-dashoffset\r\n    * 滤镜\r\n        * filter: id, x, y\r\n    * 渐变\r\n        * linearGradient\r\n        * radialGradient\r\n', 87, '2021-04-22 23:23:15', '2021-04-22 23:23:18');
INSERT INTO `article` VALUES (3, 'Css', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/3.png', NULL, 'css索引', '# 属性\r\n\r\n#### 布局\r\n\r\n* 定位\r\n    * position: static(默认值), relative, absolute, fixed, stickey\r\n        * absolute相对于开启了position的元素定位\r\n    * top\r\n    * left\r\n    * bottom\r\n    * right\r\n    * z-index\r\n* 变换\r\n    * transform\r\n    * transform-style\r\n    * perspective\r\n    * perspective-origin\r\n    * backface-visibility\r\n* 层叠上下文\r\n    * position: 开启fixed和stickey或开启absolute, relative且z-index不为auto\r\n    * flex元素, grid元素且z-index不为auto\r\n    * transform, perspective, transform-style, opacity, filter, clip-path\r\n#### 形状\r\n\r\n* 盒模型![图片](https://uploader.shimo.im/f/p7SRAeyQGujEmypG.png!thumbnail?fileGuid=6jkgrxt6djvXWwvG)![图片](https://uploader.shimo.im/f/KN1ZJDi2j3mZLUc5.png!thumbnail?fileGuid=6jkgrxt6djvXWwvG)\r\n    * box\r\n    * border\r\n    * border-collapse: collapse(表格专属)\r\n    * margin\r\n    * padding\r\n* 尺寸\r\n    * flex-grow\r\n    * flex-shrink\r\n    * flex-basis\r\n    * width\r\n    * min-width(若子元素有固定长度, 则默认带min-width)\r\n    * max-width\r\n    * height\r\n    * min-height(若子元素有固定高度 则默认带min-height)\r\n    * max-height\r\n* 蒙版\r\n    * clip-path\r\n* 轮廓\r\n    * outline\r\n#### 子布局\r\n\r\n* 文档流\r\n    * 块元素\r\n        * 可设置固定尺寸, 但始终独占一行\r\n        * margin和padding都生效\r\n    * 内联元素\r\n        * 无固定尺寸\r\n        * 垂直方向上的margin和padding能生效但不挤占空间\r\n    * inline-block元素\r\n        * 可设置固定尺寸, 但不独占一行\r\n        * margin和padding都生效\r\n* 非正常文档流\r\n    * 弹性盒布局\r\n        * display: flex\r\n        * 若只指定display: flex则元素宽度占满辅轴, 元素在辅轴上有高度\r\n        * 若弹性盒设置了固定宽高则里面的元素会在主轴上被压缩和拉伸, 压缩最多到最小尺寸\r\n        * 设置了min-width|height的元素有最小尺寸, 元素里有固定尺寸元素的有最小尺寸(设置了overflow除外)\r\n    * 网格布局\r\n        * 关键字: fr, auto, span, column, row, column dense, row dense\r\n        * 函数: repeat(), minmax()\r\n        * display: grid | inline-grid\r\n        * grid-auto-flow\r\n        * align-items, justify-items, place-items\r\n        * align-content, justify-content\r\n        * grid-template-columns, grid-template-rows, grid-template-areas, grid-template\r\n        * column-gap, row-gap, gap\r\n        * grid-column-start, grid-column-end, grid-row-start, grid-row-end, grid-column, grid-row, grid-area\r\n        * justify-self, align-self, place-self\r\n* 边距塌陷\r\n    * 上边距塌陷\r\n        * border\r\n        * padding\r\n        * BFC\r\n            * float的值不是none。\r\n            * position的值不是static或者relative。\r\n            * display的值是inline-block, grid, flex或者inline-flex\r\n            * overflow的值不是visible\r\n    * 下边塌陷: 以上加上父元素具有height或min-height属性\r\n#### 背景(背景色, jpg, png, svg)\r\n\r\n* background-color: 背景色\r\n* background-image: 背景图\r\n* background-attachment: 背景图定位方式\r\n* background-position: 背景图定位位置\r\n* background-size: 背景图大小\r\n* background-repeat: 背景图如何重复\r\n#### 文本(普通文本, icon)\r\n\r\n* 常用\r\n    * font-family\r\n    * font-size\r\n    * font-weight\r\n    * font-style\r\n    * color(继承)\r\n    * letter-spacing: 字间距, 0.36px为佳\r\n    * line-height\r\n    * text-align\r\n    * text-align-last: 用于单行justify, text-align的最后行justify不起效\r\n    * text-indent\r\n    * white-space\r\n    * text-overflow\r\n    * writing-mode\r\n    * text-orientation\r\n    * text-decoration\r\n    * vertical-align\r\n    * user-select: 设为none可使文本无法选取\r\n* 非常用\r\n    * font-variant\r\n    * direction: 文本方向\r\n    * text-shadow\r\n    * text-transform\r\n    * word-spacing\r\n#### 替换元素\r\n\r\n* object-fit\r\n* object-position\r\n#### 滤镜(普通滤镜, svg)\r\n\r\n* backdrop-filter\r\n    * blur()\r\n    * brightness()\r\n    * contrast()\r\n* filter\r\n    * blur()\r\n    * brightness()\r\n    * contrast()\r\n    * drop-shadow()\r\n    * grayscale()\r\n    * hue-rotate()\r\n    * invert()\r\n    * opacity()\r\n    * saturate()\r\n    * sepia()\r\n    * url()\r\n* 透明\r\n    * opacity\r\n#### 过渡与动画\r\n\r\n* transition: 过渡属性 过渡时间 时间函数 延迟时间\r\n* animation\r\n    * animation-name\r\n    * animation-duration\r\n    * animation-timing-function\r\n    * animation-delay\r\n    * animation-iteration-count\r\n    * animation-direction\r\n#### 其他\r\n\r\n* 指针\r\n    * cursor\r\n* 可见性\r\n    * display\r\n    * visibility\r\n* 溢出\r\n    * overflow\r\n#### 特殊\r\n\r\n* <input type=\"range\">:apperance\r\n* 列表:list-style\r\n# 语法\r\n\r\n#### 关键字\r\n\r\n* #, %, px, rem, em\r\n#### 函数\r\n\r\n* rgb(), rgba(), url(), calc(), var()\r\n#### 导入\r\n\r\n* @import\r\n* @font-face![图片](https://uploader.shimo.im/f/KteIvQsHoEP29hhX.png!thumbnail?fileGuid=6jkgrxt6djvXWwvG)\r\n#### 声明\r\n\r\n* 变量声明: :root\r\n* 动画声明: @keyframes![图片](https://uploader.shimo.im/f/bDd9i79PVaGs8dr9.png!thumbnail?fileGuid=6jkgrxt6djvXWwvG)\r\n* 响应式声明: @media\r\n#### 选择器\r\n\r\n* id选择器: #id\r\n* class选择器: .class\r\n* 属性选择器\r\n    * [type]: 含有该属性即可\r\n    * [type=\"xxx\"]: 精确匹配\r\n    * [type^=\"xxx\"]: 前缀匹配\r\n    * [type$=\"xxx\"]: 后缀匹配\r\n    * [type*=\"xxx\"]: 任意匹配\r\n* 并集选择器: .red, #container, span\r\n* 交集选择器\r\n    * div .red: 选中所有交集\r\n    * div > .red: 选中交集中的子元素\r\n* 相邻选择器: div ~ span\r\n* 直接相邻选择器: div + span\r\n* 伪类\r\n    * :active: 被激活的元素的样式\r\n    * :focus: 拥有键盘输入焦点的元素的样式\r\n    * :hover: 指针浮于元素上方时的样式\r\n    * :first-child: 元素的第一个子元素的样式\r\n    * :last-child\r\n    * :not()\r\n    * :nth-child()\r\n* 特殊伪类\r\n    \r\n    * <a>: :link, :visited\r\n* 伪元素\r\n    * ::before\r\n    * ::after\r\n* 特殊伪元素\r\n    * <input type=\"text|textarea\">: ::placeholder\r\n    * <input type=\"range\">::-webkit-slider-thumb\r\n# 效果\r\n\r\n* 发光效果:\r\n    * ::before缩放并添加box-shadow\r\n    * 文字text-shadow 图片flter: drop-shadow()\r\n* 毛玻璃效果: ::before裁剪出原图并设置模糊度filter: blur()和透明度box-shadow: inset\r\n* 聊天UI: 对某一元素的fixed定位可利用absolute完成\r\n* 立体Box: transform-style与perspective的应用\r\n* 五十音图: 滤镜效果可以加载svg\r\n* 导航高亮指示: clip-path的应用\r\n* 进度条: ::before和::after的应用\r\n* 轮播图: vw vh属性, 竖向滚动条将会导致横向滚动条出现, 慎用vw\r\n* 上传按钮: svg的应用, css状态分组\r\n* 个人资料卡: 图片大小控制, 语义化标签, 网格布局, html标签data-的运用\r\n* 打字效果: 随机种的应用\r\n* 滑动选择美化: 浏览器原生组件 border取三角形\r\n* 色差故障效果\r\n# 工具链\r\n\r\n* 模块化: node-sass dart-sass less\r\n# 库\r\n\r\n* 初始化: normalize.css\r\n* 图标库: font-awesome\r\n* 图片库: pixel\r\n* 字体库\r\n* 滤镜库\r\n* svg库: undraw\r\n# 常用操作\r\n\r\n* 布局\r\n    * 铺满\r\n        * 开启定位元素\r\n            * left: 0; right: 0; top: 0; bottom: 0;\r\n        * 文档流元素\r\n            * width: 100%; height: 100%\r\n    * 居中\r\n        * 开启定位元素\r\n            * top: calc(50% - 自身元素高 / 2); left: calc(50% - 自身元素宽 / 2);\r\n        * 普通文档流元素\r\n            * 水平居中: margin: 0 auto;\r\n        * flex元素\r\n            * 父元素: display: flex; align-items: center; justify-content: center;\r\n# Scss\r\n\r\n## 介绍\r\n\r\n* 环境\r\n    * Node环境下的node-sass模块\r\n    * Node环境下的dart-sass模块\r\n    * Ruby环境下的sass模块\r\n    * Dart环境下的sass模块\r\n* 解决\r\n    * 最初的问题\r\n        * 选择器不可嵌套\r\n        * 属性值不能以变量形式, 只能以字面量形式\r\n* 进化史\r\n    * sass->scss, 两套语法\r\n* 功能\r\n    * 兼容css3\r\n    * 增加变量、嵌套、混合等功能\r\n    * 通过函数进行颜色值与属性值的运算\r\n    * 提供控制指令等高级功能\r\n    * 自定义输出格式\r\n* 工具链\r\n    * Vscode: Easy Sass, Sass\r\n## 语法\r\n\r\n* 注释\r\n    * 单行: //\r\n    * 多行: /* */, /*! */(生产环境仍存在的注释)\r\n* 变量\r\n    * 格式: $变量名\r\n    * 作用域: 模块, 选择器\r\n* 数据类型\r\n    * 数字: 1, 2.5, 13, 10px, 5a\r\n    * 字符串: \"foo\", \'bar\', baz\r\n    * 颜色: blue, #04a3f9, rgba(255, 0, 0, 0.5), rgba(#04a3f9, 0.5) rgb(2, 2, 2)\r\n    * 布尔型: true, false\r\n    * 空值: null\r\n    * 数组(list): 用空格或逗号做分隔符, 1.5em 1em 2em, Helvetica, Arial, sans-serif\r\n    * 对象(maps): (key1: value1, key2: value2)\r\n    * type-of($value): 判断数据类型\r\n* 运算\r\n    * 四则运算\r\n        * 纯数: +, -, *, /, %, 其中一个带符号, 结果也带\r\n        * 纯字符串: +, 最前的字符带引号, 结果带, 反之, 结果不带\r\n        * 数字和字符串: +,- 结果为字符串, 字符带引号, 结果带, 反之, 结果不带\r\n        * 颜色: +, -, *\r\n    * 关系运算: > >= < <= == !=\r\n    * 布尔运算: and or not\r\n* 条件控制语句\r\n    * 选择\r\n        * 三元运算符: if(expressiong, value1, value2)\r\n        * 选择语句: @if @else @else if\r\n    * 循环\r\n        * @for $var from <start> through <end>\r\n        * @for $var from <start> to <end>\r\n        * @while expression\r\n* 模块化\r\n    * @import\r\n        * 原css语法\r\n            * 文件扩展名时.css\r\n            * 文件名不以http://开头\r\n            * 文件名是url(), 这里可以用插值语法\r\n            * 包含media queries\r\n        * scss语法\r\n            * 文件名扩展为.scss或没有\r\n            * 可导入多个scss文件, 以逗号分割\r\n* 继承\r\n    * @extend\r\n* 嵌套语法\r\n* 杂\r\n    * 插值语法: #{}\r\n    * 父选择器语法: &\r\n    * !global: 使局部作用域变量变为全局作用域\r\n    * !default: 变量默认值\r\n    * !optional: 当@extend相关代码出现语法错误时, 编译器可能会给我们\"乱\"编译为css, 我们加上这个参数可以再出现问题后不让他编译该部分代码\r\n    * 选择器占位符: %\r\n', 88, '2021-04-22 23:24:29', '2021-04-22 23:24:31');
INSERT INTO `article` VALUES (4, '线性代数', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/4.png', NULL, '线性代数索引', '\r\n\r\n* 代数学\r\n    * 研究方向: 代数运算\r\n    * 学科\r\n        * 线性代数\r\n        * 抽象代数(近世代数)\r\n        * 数论\r\n            * 代数数论\r\n            * 解析数论\r\n        * 代数几何\r\n    * 概念\r\n        * 群\r\n            * 正四面体的旋转\r\n            * 模(线性代数一般化理论)\r\n        * 环\r\n            * 加和乘\r\n        * 域\r\n            * 四则运算\r\n                * 伽瓦罗理论\r\n* 几何学\r\n    * 研究方向: 图形\r\n    * 学科\r\n        * 流形\r\n        * 集合与拓扑\r\n        * 拓扑学\r\n            * 欧拉公式\r\n        * 微分几何\r\n            * 曲率\r\n            * 图形分类(黎曼几何)\r\n    * 概念\r\n        * 流形\r\n* 分析学\r\n    * 研究方向: 函数运算\r\n    * 学科\r\n        * 微积分: 对函数的运算\r\n        * 向量分析, 向量积分(水流的表示, 场论)\r\n        * 复分析\r\n            * 欧拉公式\r\n        * 微分方程: 求解对象为函数\r\n        * 偏微分方程\r\n        * 勒贝格积分\r\n        * 泛函分析: 全体函数组成的空间\r\n        * 傅里叶分析\r\n            * 傅里叶变换\r\n* 应用数学\r\n    * 普通\r\n        * 概率论\r\n        * 数理统计\r\n        * 随机过程\r\n    * 计算数学\r\n    * 图论\r\n    * 数值分析\r\n* 基础数学\r\n    * 集合论\r\n    * 逻辑学\r\n    * 范畴论\r\n\r\n* 计算机\r\n    * 计算机理论科学\r\n        * 图灵机\r\n        * lambda演算\r\n        * 计算机无法解决问题\r\n        * P与NP\r\n    * 软件工程\r\n    * 应用程序\r\n', 5, '2021-04-29 12:23:20', '2021-04-29 12:23:22');
INSERT INTO `article` VALUES (5, '离散数学', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/5.png', NULL, '离散数学索引', '# 集合\r\n\r\n## 定义\r\n\r\n* 概念\r\n    * 集合\r\n        * 定义\r\n            * 朴素集合论![图片](https://uploader.shimo.im/f/tAkMSb0qSbpDwJD6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 公理化集合论![图片](https://uploader.shimo.im/f/sLsCBdWFRu8AXSdc.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 表示\r\n            * 枚举法:![图片](https://uploader.shimo.im/f/0zU1JrptUHKbqcs6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/bAjTZ8lYuQTXtX1q.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 叙述法:![图片](https://uploader.shimo.im/f/sJXYaZUPMlk5HKCO.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 文氏图\r\n        * 特殊\r\n            * 有限集与无限集![图片](https://uploader.shimo.im/f/DsukHbvp4KrmMOxj.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 空集![图片](https://uploader.shimo.im/f/CfluZT5L8pBiwsg6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 全集![图片](https://uploader.shimo.im/f/xulf1s8y6DPkX22U.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 幂集![图片](https://uploader.shimo.im/f/kANKIyMMxn2bz0MI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 可数集与不可数集\r\n                * 自然数集的定义\r\n                    * 皮亚诺公理:![图片](https://uploader.shimo.im/f/DNcDGNCXrpf3TALJ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 冯.诺依曼:![图片](https://uploader.shimo.im/f/UzR7yaqZUAXBnWVD.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 等势:![图片](https://uploader.shimo.im/f/yLcJmaEGEPE3k5fN.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 可数集合: 与自然数集合N等势的集合称为可数集, 基数记为:![图片](https://uploader.shimo.im/f/Uy35tRtBxB2hHkf1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 不可数集合: 与开区间(0, 1)等势的集合称为不可数集, 基数记为:![图片](https://uploader.shimo.im/f/Y09cFeehVW29e4hF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 元素基本特性\r\n        * 集合中的元素是无序的\r\n        * 集合中的元素是不同的\r\n    * 外延公理![图片](https://uploader.shimo.im/f/bG6FV0jrCMT0F8WH.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 属于关系:![图片](https://uploader.shimo.im/f/ugTzdvIpyvPrZbIb.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/YMPQADmncz9TJthK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 包含关系\r\n        * 子集:![图片](https://uploader.shimo.im/f/RrDg5Rgh3LzxvrF7.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/eOoW45WgA6PkadmF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 真子集:![图片](https://uploader.shimo.im/f/niAHEHcAT6TNT1q6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/5tIdEc8ZDCM04z8O.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 运算\r\n    * 并运算:![图片](https://uploader.shimo.im/f/axlHdnvLNMq85csA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 交运算:![图片](https://uploader.shimo.im/f/J7LaaykiJuwun7CD.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 补运算:![图片](https://uploader.shimo.im/f/SkFBJDqIjakq5yNG.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 差运算:![图片](https://uploader.shimo.im/f/NZAUMrSekj66KvaK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 对称差:![图片](https://uploader.shimo.im/f/tDrYUK8XcjT5wiI1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n## 定理\r\n\r\n* 运算定律\r\n    * 幂等律:![图片](https://uploader.shimo.im/f/Cuex7CYF4wyZRkOw.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 同一律:![图片](https://uploader.shimo.im/f/PQMBJ4x6TTyMSmrQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 零律:![图片](https://uploader.shimo.im/f/N7ex4Xfw0mGl7EsI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 吸收律:![图片](https://uploader.shimo.im/f/uLVqgUQX7Q6Qv7QH.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 矛盾律和排中律:![图片](https://uploader.shimo.im/f/EWcNd2cYvJxgHOdy.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 双重否定律:![图片](https://uploader.shimo.im/f/EUurNDIWRxbG6vU4.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 德摩根律:![图片](https://uploader.shimo.im/f/Q4XYpyonccMkBI2I.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 分配律:![图片](https://uploader.shimo.im/f/Aa3pN6ftKy8MHlCp.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 交换律:![图片](https://uploader.shimo.im/f/mL8dGuqRu0HDOAV7.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 结合律:![图片](https://uploader.shimo.im/f/iGKL4J2VomYM9ry4.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n# 逻辑命题\r\n\r\n## 定义\r\n\r\n* 概念\r\n    * 命题: 前提和结论, 是推理的基本单位![图片](https://uploader.shimo.im/f/5mHtijKKWcteugZs.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 原子命题:![图片](https://uploader.shimo.im/f/CSH1u8U0WQGhv5sx.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/rbSakMTro58InD89.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/wFwRnuFyCxL2rbSP.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 个体词\r\n                * 取值范围\r\n                    * 个体域(论域): 常用D表示\r\n                    * 全总个体域: 宇宙间所有个体域聚集在一起\r\n                * 类别\r\n                    * 个体常量\r\n                    * 个体变量\r\n            * 谓词\r\n                * 取值范围:![图片](https://uploader.shimo.im/f/s9by5bqtGlwsQEXU.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 类别\r\n                    * 谓词常量\r\n                    * 谓词变量\r\n                        * 特性谓词![图片](https://uploader.shimo.im/f/3mneCaRb27F0nMRQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/c31lmgajHMBBCka5.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 特性![图片](https://uploader.shimo.im/f/ht6MiGqoISDaxrSr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 量词\r\n                * 类别\r\n                    * 全称量词![图片](https://uploader.shimo.im/f/S477oMYzRXFCB7r8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 存在量词![图片](https://uploader.shimo.im/f/Xys7Oeau26dwKfLQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 作用域\r\n                    * 辖域![图片](https://uploader.shimo.im/f/pqV4iSdN4NKoJXon.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 四类符号![图片](https://uploader.shimo.im/f/WW8HaFd1R4hL8pxh.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 项![图片](https://uploader.shimo.im/f/XGR4MfavINMxmc30.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 原子谓词公式![图片](https://uploader.shimo.im/f/3InekMNPPJJOq6oO.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 合式公式![图片](https://uploader.shimo.im/f/eamMzGVxI7EV3xyr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 自由变元与约束变元![图片](https://uploader.shimo.im/f/rOjf4vOuxKdUqlgs.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 闭式合式公式![图片](https://uploader.shimo.im/f/C8eDRwpbjSJDMAvM.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 公式的解释![图片](https://uploader.shimo.im/f/eUEA0ZG3SAKGGn7H.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 分类\r\n                    * 有效公式![图片](https://uploader.shimo.im/f/wyPkf6gBLAtb3ENa.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 矛盾公式![图片](https://uploader.shimo.im/f/5M48c3ZtbXvdA6Pk.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 可满足公式![图片](https://uploader.shimo.im/f/xcQdQXY2o2VaYpHR.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 可判定性![图片](https://uploader.shimo.im/f/1sfoLmUcCy94nN1P.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 等价![图片](https://uploader.shimo.im/f/IzW5QdKKAkFF1E5u.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 前束范式(略)\r\n        * 复合命题:![图片](https://uploader.shimo.im/f/H7U5mNsVpIGUwNke.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 命题公式:![图片](https://uploader.shimo.im/f/spo6TiK68Z4IoVqU.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/aNlC2FCDLFd7Y0tY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 组成\r\n            * 命题变元\r\n                * 解释:![图片](https://uploader.shimo.im/f/OyCDgS6i9mkOBdAP.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 常值命题\r\n        * 特殊\r\n            * 永真公式(重言式)\r\n            * 永假公式(矛盾式)\r\n            * 可满足公式(非矛盾)\r\n            * 等价公式:![图片](https://uploader.shimo.im/f/4rikASoFsYAIUd41.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 范式![图片](https://uploader.shimo.im/f/W2q6L5HCpSoPWOat.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 构成\r\n            * 文字: 命题变元或命题变元的否定![图片](https://uploader.shimo.im/f/fCrbGA1jJ4alVvHF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 子句: 有限文字的析取![图片](https://uploader.shimo.im/f/wC5BkEoLMUtQWsj1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 短语: 有限文字的合取![图片](https://uploader.shimo.im/f/aMmVarbbN0ZcgtfF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 类别\r\n            * 析取范式: 有限短语的合取式![图片](https://uploader.shimo.im/f/uhHATR3IU4oBrG47.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 合取范式: 有限子句的合取式![图片](https://uploader.shimo.im/f/mXJ0hnZwpKu2sX9p.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 规范化\r\n            * 主范式\r\n                * 构成\r\n                    * 极小项(短语)与极大项(子句):![图片](https://uploader.shimo.im/f/otHtHuwx4E849NiA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 极小项(短语)与极大项(子句)编码:![图片](https://uploader.shimo.im/f/uYK4kcFSXKzxS5rw.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                * 类别\r\n                    * 主析取范式:![图片](https://uploader.shimo.im/f/hOR8aajchsmJWnUa.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 主合取范式:![图片](https://uploader.shimo.im/f/BXseRBCbJJHePSMw.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n                    * 空:![图片](https://uploader.shimo.im/f/tftfZWQw7M7wExSb.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 推理形式\r\n        * 一组前提=>结论(逻辑结果):![图片](https://uploader.shimo.im/f/bAmVgT70SiHe7dAj.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 自然演绎法:![图片](https://uploader.shimo.im/f/pyR4dCgKr6VA03oC.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 直接证明法\r\n            * 规则CP证明法\r\n            * 间接证明法(反证法, 归谬法)\r\n* 运算\r\n    * 非:![图片](https://uploader.shimo.im/f/6LFpSmkp2dDA6Dir.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 并:![图片](https://uploader.shimo.im/f/COAdURs6voKYW5HI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 或(异或):![图片](https://uploader.shimo.im/f/tzJjRzDrG2sUNaA8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 蕴涵:![图片](https://uploader.shimo.im/f/t8U5woPE9lmmW2Hy.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 等价:![图片](https://uploader.shimo.im/f/FEESafZRIyIyACtE.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n## 定理\r\n\r\n* 运算定律\r\n    * 幂等律:![图片](https://uploader.shimo.im/f/B9KV8surCE8XVeq3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 同一律:![图片](https://uploader.shimo.im/f/x7KEdKzNOm5DXE57.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 零律:![图片](https://uploader.shimo.im/f/D3v8JVOGCdW9CXJU.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 吸收律:![图片](https://uploader.shimo.im/f/SobQZwTJv0KhoHgS.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 矛盾律:![图片](https://uploader.shimo.im/f/zuD4LSP2Evv0FyeK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 排中律:![图片](https://uploader.shimo.im/f/XDADIbGzK5cLodld.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 双重否定律:![图片](https://uploader.shimo.im/f/1s21rDTE5aCXEMny.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 德摩根律:![图片](https://uploader.shimo.im/f/SDuNLl7uGisuP0JF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 蕴涵式:![图片](https://uploader.shimo.im/f/LaQwffl4CeuTSr4x.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 假言易位:![图片](https://uploader.shimo.im/f/bpNhT2FSZmVmipCL.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 等价式:![图片](https://uploader.shimo.im/f/P7wM4H3p2oFaoYRa.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 等价否定等式:![图片](https://uploader.shimo.im/f/ilHzegCKqAs9oOFK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 归谬论:![图片](https://uploader.shimo.im/f/42QEAk4hd6nukDj3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 交换律:![图片](https://uploader.shimo.im/f/CdWc5j3EaZn3pZal.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 结合律:![图片](https://uploader.shimo.im/f/mnstfDxUqiHBD49Z.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 分配律:![图片](https://uploader.shimo.im/f/hMyHtwpTRFnfscJF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 范式存在定理:![图片](https://uploader.shimo.im/f/YqkjcRiiNkRhav7g.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 范式求解定理:![图片](https://uploader.shimo.im/f/4dP2v8F1gEoCW1tP.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/K9l7bb1lsOKVFtjU.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 主范式存在定理:![图片](https://uploader.shimo.im/f/obAVNUKVLUtFj0Un.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 主范式求解定理:![图片](https://uploader.shimo.im/f/12p6uUV6lVcnnd2m.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)主范式是唯一的\r\n    * 解法一: 公式转换法\r\n    * 解法二: 真值表法\r\n* 主范式与真值表等价推论\r\n    * 主范式互补:![图片](https://uploader.shimo.im/f/iq858PjbRncijljr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 主范式永真永假等价公式:![图片](https://uploader.shimo.im/f/PJ55nUAB6AXi0ckk.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 极小与极大项\r\n    * 之间\r\n        * 任何两个极小项或任何两个极大项合取结果为0![图片](https://uploader.shimo.im/f/xe6yvOm0voW0lUxP.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 相对应的极大项的否定与极小项结果相同![图片](https://uploader.shimo.im/f/gDtMCLzF9ynLXJrX.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 所有极小项析取为1, 所有极大项析取0![图片](https://uploader.shimo.im/f/xjidSxSXs8hcnH5S.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 分别\r\n        * 极小项性质![图片](https://uploader.shimo.im/f/ab5HaBKk6kSAB3Ym.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 没有两个不同的极小项是等价的\r\n            * 每个极小项只有一组成真解释, 且这组解释的为0的命题变元在极小项中是否定形态, 为1的变元在极小项中是非否形态\r\n        * 极大项性质![图片](https://uploader.shimo.im/f/Ei2Fs7IhoZvJXhQp.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 没有两个不同的极大项是等价的\r\n            * 每个极大项只有一组成假解释, 且这组解释的为1的命题变元在极大项中是否定形态, 为0的变元在极大项中是非否形态\r\n* 推理的判定定理:![图片](https://uploader.shimo.im/f/JEP3dfky5ncMKJOc.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 推理定律\r\n    * 简化规则:![图片](https://uploader.shimo.im/f/VFUTdjKejPO75F1K.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 添加规则:![图片](https://uploader.shimo.im/f/0c8P5WaAWOk6mTyk.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 合取引入规则:![图片](https://uploader.shimo.im/f/GCmAcjo00YqZJxk4.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 选言三段论:![图片](https://uploader.shimo.im/f/d6gHLvNiQsHx1w3V.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 假言推理规则:![图片](https://uploader.shimo.im/f/MhT3GX2nIeRzBE7C.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 否定后件式:![图片](https://uploader.shimo.im/f/Mx0TT9uzACswdL5d.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 假言三段论:![图片](https://uploader.shimo.im/f/VXm71T02I6cDGQ4f.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 二难推论:![图片](https://uploader.shimo.im/f/zOC2jjRJm7pjGhJM.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 推理规则\r\n    * 规则P(前提引用规则):![图片](https://uploader.shimo.im/f/G0E6zLCV2f4enPar.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 规则T(逻辑结果引用规则)![图片](https://uploader.shimo.im/f/ldklbxPHt4ayJWjs.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 规则CP(附加前提规则)![图片](https://uploader.shimo.im/f/DIhiON0K5undV19F.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 谓词演算定律\r\n    * 改名规则![图片](https://uploader.shimo.im/f/IUoApzHyslLvQ5ob.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 量词转化律![图片](https://uploader.shimo.im/f/JARKhJvB2LVWDpeJ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 量词辖域的扩张与收缩律![图片](https://uploader.shimo.im/f/BTbUeVgZQ4cgdklm.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 量词分配律![图片](https://uploader.shimo.im/f/PbaB5egokCAarqIm.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n# 二元关系\r\n\r\n## 定义\r\n\r\n* 序偶:![图片](https://uploader.shimo.im/f/u9qEp0koeebb0AR6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 笛卡尔积:![图片](https://uploader.shimo.im/f/yHP75qrafZGCtPCF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/L6IN4lt7cuAfzSKI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* n重有序组:![图片](https://uploader.shimo.im/f/tjzvd0uokSObJRqi.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 二元关系![图片](https://uploader.shimo.im/f/m6ntaIeL4tv9wZ6t.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 空关系![图片](https://uploader.shimo.im/f/aVFKCT3sqVWCr5og.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 全关系![图片](https://uploader.shimo.im/f/u7XOEU2Cz5C3LTAt.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 恒等关系![图片](https://uploader.shimo.im/f/wCgyMh6o5ZIg4NXI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有限集合的二元关系数量![图片](https://uploader.shimo.im/f/TliDpBp8Gk5G6kw5.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 定义域与值域![图片](https://uploader.shimo.im/f/6gTPauelIqFTrMHj.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* n元关系![图片](https://uploader.shimo.im/f/WZpY2lzbZiDda87G.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 表示法\r\n    * 集合表示法\r\n    * 图形表示法\r\n    * 关系矩阵表示法![图片](https://uploader.shimo.im/f/SKITn0YYIyGqR3Uz.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 关系矩阵的布尔并和布尔交运算![图片](https://uploader.shimo.im/f/RDuJH2vtqcIQjYkq.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 关系矩阵的布尔积运算![图片](https://uploader.shimo.im/f/pVDFCYiWxJ2GPvN8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 关系运算\r\n    * 布尔并和布尔交运算(关系矩阵的布尔并和布尔交运算)\r\n    * 并交差补![图片](https://uploader.shimo.im/f/nZmR0PH7XE7pnGPI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 复合运算(关系矩阵的布尔积运算):![图片](https://uploader.shimo.im/f/3hFjI0MOlgHgr4BA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 逆运算(关系矩阵的转置)![图片](https://uploader.shimo.im/f/OlGUNoObVZvXwRiL.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 幂运算![图片](https://uploader.shimo.im/f/6YVWGdZ39V8MCXij.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 关系的性质\r\n    * 自反性![图片](https://uploader.shimo.im/f/sG3SR9nKPt2LopOW.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 反自反性![图片](https://uploader.shimo.im/f/TxOEcWURKbqrddJ8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 对称性![图片](https://uploader.shimo.im/f/gVbom1pkUFIndJNA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 反对称性![图片](https://uploader.shimo.im/f/mn0NaWhz86IiAKlE.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 传递性![图片](https://uploader.shimo.im/f/8REt7L0va1VgwsGE.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 保守性![图片](https://uploader.shimo.im/f/kW1GKwaVpUfSpCJe.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/bBWhVpbqsULIlLi4.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 关系的闭包![图片](https://uploader.shimo.im/f/AjULRIBHlPZHcRf8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/rNR3oUeq6sOgLrJd.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 等价关系![图片](https://uploader.shimo.im/f/uyeZeVMaHKNhs1N3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 等价类![图片](https://uploader.shimo.im/f/nf8yA3p3JLy6cEfK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 商集![图片](https://uploader.shimo.im/f/xT4OzQxNxjrrv9XY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 集合划分![图片](https://uploader.shimo.im/f/6NVnf5pzqVp6ML95.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 特殊关系\r\n    * 偏序关系![图片](https://uploader.shimo.im/f/ApCPz4FqAMiFKepN.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 可比与覆盖![图片](https://uploader.shimo.im/f/KnMSoLV4G5mFDIT0.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 哈斯图![图片](https://uploader.shimo.im/f/5uvxfTkD5uYi4Vt1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 最大元和最小元![图片](https://uploader.shimo.im/f/hImH9NoqlPFGpBgp.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 极大元与极小元![图片](https://uploader.shimo.im/f/ei3lfW3yPripWRxK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 上界与上确界![图片](https://uploader.shimo.im/f/ueRGnCrETHPg9lgz.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 下界与下确界![图片](https://uploader.shimo.im/f/M63WmnL8HS0nPFlT.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 拟序关系![图片](https://uploader.shimo.im/f/C56jBSJDGDA66fqK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 全序关系![图片](https://uploader.shimo.im/f/NKR3a6NIG9qVc4gF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 良序关系![图片](https://uploader.shimo.im/f/aP91236ivkrDbvYh.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 总结![图片](https://uploader.shimo.im/f/L7loeVJArejJntAE.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n## 定理\r\n\r\n* 关系运算定律\r\n    * 结合律![图片](https://uploader.shimo.im/f/Du4ROaxu38iVVFlA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 同一律![图片](https://uploader.shimo.im/f/5SYoR2bc83EdWbEK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 分配律![图片](https://uploader.shimo.im/f/Ge0jfR5K8uE4A6co.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 逆运算性质![图片](https://uploader.shimo.im/f/hsjw0xxED3kUC6pH.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/IMCYhixFVSqwR8vr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 幂运算收敛定理![图片](https://uploader.shimo.im/f/BuGyjdZ2A9dCA9jj.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 关系性质的判定定理![图片](https://uploader.shimo.im/f/VJESpgoKlNLnWp8j.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 闭包求解定理![图片](https://uploader.shimo.im/f/2JXe4OnrpJExKvTq.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 等价类性质![图片](https://uploader.shimo.im/f/gXfcKYC0KYVVwoWS.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 等价关系导出定理![图片](https://uploader.shimo.im/f/XhzPjjsXhp4u2taX.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n# 函数\r\n\r\n## 定义\r\n\r\n* 函数![图片](https://uploader.shimo.im/f/YQ0ANIGnawK56HF1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/NO78tPDtDokGnV8p.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 所有A到B的函数![图片](https://uploader.shimo.im/f/gUbfbnKFomfaPh7a.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 单射函数![图片](https://uploader.shimo.im/f/L8HTvGo446vyIzjY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 满射函数![图片](https://uploader.shimo.im/f/3TlYhdn82muTtyyP.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 双射函数![图片](https://uploader.shimo.im/f/c5oMEdZFGSEKyxf9.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 复合函数![图片](https://uploader.shimo.im/f/wLkM0fPCOyBPqZ9W.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/P1f3s7oM4uW515dK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 满足结合律\r\n    * 不满足交换律\r\n    * 具有保守性\r\n* 逆函数![图片](https://uploader.shimo.im/f/rhJqRJs6kFMe5wtd.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/7WvxURVlKx4EIHfY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n## 定理\r\n\r\n# 图\r\n\r\n## 定义\r\n\r\n* 定义\r\n    * 无序积和无序对![图片](https://uploader.shimo.im/f/bm1RtWoogO5euWoA.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 图![图片](https://uploader.shimo.im/f/uP16H5KJwpPYcYVh.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 基本概念\r\n    * 邻接矩阵: 表示图的一种方法\r\n    * 邻接点、邻接边、环或自回路、孤立结点![图片](https://uploader.shimo.im/f/y16Ra6r6kUQjCGyI.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 零图、平凡图、(n, m)图![图片](https://uploader.shimo.im/f/NWwDq3hmyjSCQ7UQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 分类\r\n    * 边有无方向: 无向图、有向图、混合图![图片](https://uploader.shimo.im/f/g6nX5GxkHCCnzPbF.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有无平行边: 多重图、线图、简单图![图片](https://uploader.shimo.im/f/uHIogBVFuEXKSUxa.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 边或点有无权值: 赋权图、无权图\r\n* 子图\r\n    * 子图、真子图、生成子图、导出子图![图片](https://uploader.shimo.im/f/xaOBiMZiz8INjWYH.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 完全图![图片](https://uploader.shimo.im/f/0NjRBP1oqq0kgaQO.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 补图![图片](https://uploader.shimo.im/f/UXYiX9BsCffLxDGk.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 结点的度数![图片](https://uploader.shimo.im/f/zI4bjIhGF1PfpxFO.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/7qjUgtXWR7IKzaHY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 度数\r\n    * 出度、入度\r\n    * 悬挂结点、悬挂边\r\n    * 最大度、最小度\r\n    * 最大出度、最大入度、最小出度、最小入度\r\n    * 度数序列![图片](https://uploader.shimo.im/f/eF2FJ7uJAuVtk1YH.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 同构![图片](https://uploader.shimo.im/f/KLDZd9IemNKnkQEB.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 通路与回路![图片](https://uploader.shimo.im/f/2IQGmr0ZvL77oXW6.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 简单回路和简单通路![图片](https://uploader.shimo.im/f/a3HOtWsZlgiQFXvz.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 基本回路和基本通路![图片](https://uploader.shimo.im/f/THUifyO7EeK69tXv.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 可达性![图片](https://uploader.shimo.im/f/V0RaT10pmfOl5oKh.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 可达性矩阵![图片](https://uploader.shimo.im/f/Bpd6kR8pLozJKXbW.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/8vIYxIWjz0O8SIER.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 短程线![图片](https://uploader.shimo.im/f/6DQPBkcytKvFgV86.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 无向图的连通性![图片](https://uploader.shimo.im/f/w7bfGzp28vN74II7.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 连通分支![图片](https://uploader.shimo.im/f/TNE0d7lnot4sy6oJ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 点割集与割点![图片](https://uploader.shimo.im/f/lVz7QY9Tg23AfXi3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 边割集与割边![图片](https://uploader.shimo.im/f/JnCl340nFLyxwmxY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 点连通度与边连通度![图片](https://uploader.shimo.im/f/rlZo8t5cCQFkWrA9.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/MPWBwcOXXjmZP1Yd.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有向图的连通性\r\n        * 弱连通图、单向连通图、强连通图![图片](https://uploader.shimo.im/f/yDXB6yJSdkfCi9P8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 连通分支![图片](https://uploader.shimo.im/f/0qKnFGsaecwt7sBK.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n            * 强连通分支\r\n            * 单向连通分支\r\n            * 弱连通分支\r\n* 特殊图\r\n    * 欧拉图![图片](https://uploader.shimo.im/f/sfCa0EHskEZNqgXy.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        \r\n        * 应用: 哥尼斯堡七桥问题\r\n    * 哈密顿图![图片](https://uploader.shimo.im/f/t5LiDntgk3TOS9wg.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        \r\n        * 应用: 周游世界问题\r\n    * 偶图\r\n        * 完全偶图![图片](https://uploader.shimo.im/f/qhanPhp42ZOdfZ4F.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 匹配![图片](https://uploader.shimo.im/f/B7Su9W248e40jZse.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 平面图![图片](https://uploader.shimo.im/f/fnPbxKcfeREqTsd4.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 面和边界![图片](https://uploader.shimo.im/f/g5OnuLxssDPPbYHW.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 同胚![图片](https://uploader.shimo.im/f/2dNwozXJwo3niHxm.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 收缩![图片](https://uploader.shimo.im/f/VxvfM6xKERfYqhb1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * ## 定理\r\n    \r\n* 握手定理: 结点度数总和等于边数两倍![图片](https://uploader.shimo.im/f/KstKlgQel7veG05d.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 推论: 度数为奇数的结点个数为偶数![图片](https://uploader.shimo.im/f/ZbGE6n92Ay8dMOyX.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 推论: 有向图中各结点的出度之和等于各节点的入度之和，等于边数![图片](https://uploader.shimo.im/f/Sx4G7plHLYVWQckf.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 同构必要条件: 结点数目、边数、度数相同的结点数相同\r\n* 通路数量计算![图片](https://uploader.shimo.im/f/pLUIKborr4kCRzC8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 可达关系判定-引理\r\n    * 通路可达判定![图片](https://uploader.shimo.im/f/QIO4roTaBIA50Nko.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/YxuynrAlwfcgIWLC.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 回路可达判定![图片](https://uploader.shimo.im/f/IVLZSi8nwu6PjcWG.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 可达关系判定定理![图片](https://uploader.shimo.im/f/GMSStoMgHvwuLxZQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 结点间距离的判定定理![图片](https://uploader.shimo.im/f/Iy9ZbtKDJn5W14z0.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 无向图结点间的可达关系![图片](https://uploader.shimo.im/f/s0Dy7wxL7nXrMLOt.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 强连通图的充分必要条件![图片](https://uploader.shimo.im/f/wkCZCKKhspYFf7q1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 单向连通图的充分必要条件![图片](https://uploader.shimo.im/f/YWMU6hjls4mc1n2W.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 邻接矩阵判定有向图连通性![图片](https://uploader.shimo.im/f/VlUFtaBkeSRYblQw.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 连通分支的判定![图片](https://uploader.shimo.im/f/tFJbLV7cE4aijyo1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 欧拉图定理\r\n    * 无向图欧拉通路判定定理![图片](https://uploader.shimo.im/f/csw1d2s0QttcQFrh.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 无向图欧拉回路判定定理![图片](https://uploader.shimo.im/f/i36L1kMtqvq8QICV.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有向图欧拉通路判定定理![图片](https://uploader.shimo.im/f/ikFK18LzdUpK8i6B.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有向图欧拉回路判定定理![图片](https://uploader.shimo.im/f/mgmEUJxltzBE9DHL.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 求无向图的欧拉回路算法\r\n        * Fleury算法![图片](https://uploader.shimo.im/f/J1wKNSkfNLaj8P16.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 哈密顿图\r\n    * 哈密顿图的必要条件![图片](https://uploader.shimo.im/f/8WqZJIGRotu2l3ha.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/P1T9aNfFkUcGU1QY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 哈密顿图的充分条件![图片](https://uploader.shimo.im/f/8nfDuBXc0Nu3ZW4r.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/bLS3wOxBYNjme8rR.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 哈密顿通路的充分条件![图片](https://uploader.shimo.im/f/aITkwpvR6eAIsE9I.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 哈密顿通路的必要条件![图片](https://uploader.shimo.im/f/A3XuS2Z2O6nOiiV3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 偶图\r\n    * 偶图的充分必要条件![图片](https://uploader.shimo.im/f/1C9pzsgg5MD73kli.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 霍尔定理![图片](https://uploader.shimo.im/f/IB0p8vv0NADMQjmJ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * t条件![图片](https://uploader.shimo.im/f/3mI4nAF8H9EVBfX3.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 平面图\r\n    * 平面图中所有面的次数之和等于边数的两倍\r\n    * 欧拉公式![图片](https://uploader.shimo.im/f/tUmjKkqg19GLZMZS.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 推论一![图片](https://uploader.shimo.im/f/FrESTNiHdvzN0Jqv.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n        * 推论二![图片](https://uploader.shimo.im/f/qGOZOMwGekWi17as.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 库拉托夫斯基定理![图片](https://uploader.shimo.im/f/KWKUxymjoiCUFH5m.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n# 树\r\n\r\n## 定义\r\n\r\n* 无向树![图片](https://uploader.shimo.im/f/UKvu4QO5EWsWIGqW.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 生成树![图片](https://uploader.shimo.im/f/HVNiP2PkFh1VbuIp.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 最小生成树\r\n* 有向树和根树![图片](https://uploader.shimo.im/f/3PHNhKwSqhAIbiP5.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 树的家族关系![图片](https://uploader.shimo.im/f/L6fK1zZJo5HMT3j1.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 有序和k元树![图片](https://uploader.shimo.im/f/soM7Dzh5svMe8zhi.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 二元有序树![图片](https://uploader.shimo.im/f/aKIJN4BGYT5wMF5h.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 最优树![图片](https://uploader.shimo.im/f/slnV2vb9Hf5Wyy5D.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 应用\r\n    * 表达式的二叉树\r\n        * 中缀形式: 需要加括号\r\n        * 前缀形式: 无二义性不需要加括号\r\n        * 后缀形式: 又名逆波兰符号法, 无二义性不需要加括号\r\n    * 前缀码![图片](https://uploader.shimo.im/f/vIwFAxH6TmammNAn.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n## 定理\r\n\r\n* 树的性质![图片](https://uploader.shimo.im/f/dpOgLiMuXpm6kQt8.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)![图片](https://uploader.shimo.im/f/reRxMdvybSyuyUud.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 生成树存在条件![图片](https://uploader.shimo.im/f/nN8DDvMoNunov5JZ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 连通图生成生成树的算法\r\n    * 破圈法![图片](https://uploader.shimo.im/f/V6CY0gF7FXywRDvr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 避圈法![图片](https://uploader.shimo.im/f/wEbQoU0IigATyp8e.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 广度优先搜索算法![图片](https://uploader.shimo.im/f/s0HLmHiXGnF2mMPr.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 连通图生成最小生成树的算法\r\n    * Kruskal算法![图片](https://uploader.shimo.im/f/41Fl6CSVCFA3dLFa.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * Prim算法![图片](https://uploader.shimo.im/f/KstvnyNcfObSljy5.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 满k元树的性质![图片](https://uploader.shimo.im/f/6HTuuzb4UOshcufX.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 二元有序树的遍历算法\r\n    * 先根次序遍历![图片](https://uploader.shimo.im/f/gYYu4yomIUAVKypQ.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 中根次序遍历![图片](https://uploader.shimo.im/f/egO5CcOPIQxkNdzW.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 后根次序遍历![图片](https://uploader.shimo.im/f/j1k3CEMu5y2p30IY.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 根数的遍历算法\r\n    * 先根次序遍历算法![图片](https://uploader.shimo.im/f/BQqYp3abQvaWu5FV.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n    * 后根次序遍历算法![图片](https://uploader.shimo.im/f/zgal1ZeqXbgyulZn.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n* 求最优树的算法\r\n    * 哈夫曼算法![图片](https://uploader.shimo.im/f/R3oopc31X7x8YmIL.png!thumbnail?fileGuid=CjP9xRkwXj3gGgr6)\r\n', 6, '2021-04-29 12:24:13', '2021-04-29 12:24:17');
INSERT INTO `article` VALUES (6, '可视化', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/6.png', NULL, '关于可视化', '# 设计原则\r\n\r\n* 准确: 准确反映数据特征\r\n* 清晰\r\n    * 布局\r\n        * 筛选区\r\n        * 画布区\r\n        * 概览/明细区\r\n* 有效: 高数据-油墨比\r\n* 美\r\n# 设计语言\r\n\r\n## 视觉\r\n\r\n* 元素\r\n    * 色相、饱和度、明度\r\n    * 组件位置\r\n* 命题\r\n    * 观察方式从左到右, 从上到下\r\n    * 色相用于分类, 明度和饱和度用于连续性区分\r\n* 推论\r\n    * 布局\r\n        * 组件构成: 标题、轴、图形、标签、注解、提示信息、图例![图片](https://uploader.shimo.im/f/L396MnPRW0jJLqdU.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n        * 布局方式\r\n            * 平面空间布局![图片](https://uploader.shimo.im/f/lLPQqG9BvuDCHPQr.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 纵向空间层级![图片](https://uploader.shimo.im/f/UcViscnlAtRGdPW1.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n    * 色板\r\n        * 颜色映射\r\n            * 色调: 分类\r\n            * 饱和度: 顺序\r\n            * 明度: 数值\r\n            * 基础10色:![图片](https://uploader.shimo.im/f/pBf23h4qkZGWTs43.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 扩展20色:![图片](https://uploader.shimo.im/f/E6L18W2FOXxFDQ2t.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)![图片](https://uploader.shimo.im/f/8c82OyaOYhbicGhy.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n        * 6大色板![图片](https://uploader.shimo.im/f/XZ04y3PNy2bDd03S.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 分类色板: 分类型![图片](https://uploader.shimo.im/f/MOXiNADH4PWPDr14.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n                * 色相: 多色\r\n                * 变化: 色相\r\n            * 顺序色板: 有序型&数值型![图片](https://uploader.shimo.im/f/U6Brl9R0k37GuJyr.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)![图片](https://uploader.shimo.im/f/sdmgrjLQZRdlSa6a.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n                * 色相: 单色或邻近色\r\n                * 变化: 明度、饱和度、[色相]\r\n            * 发散色板: 有序型&数值型![图片](https://uploader.shimo.im/f/7FswwfHVPOZYzyOb.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n                * 色相: 互补色\r\n                * 变化: 明度、饱和度、色相\r\n            * 叠加色板(俩顺序色板组成): 有序型&数值型![图片](https://uploader.shimo.im/f/kg4GPdRGrRpt2xqp.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 强调色板: 分类型![图片](https://uploader.shimo.im/f/PZqQDUw6shGe1fXT.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)![图片](https://uploader.shimo.im/f/KZ6cXkl8CdQ0JTDb.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 语义色板: 有序型&数值型&分类型![图片](https://uploader.shimo.im/f/qOAbFfSlqtN8I7AL.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n        * 3大色彩主题\r\n            * 秋日橙主题![图片](https://uploader.shimo.im/f/WgWeSZ5ajBNVmhAK.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 马卡龙主题![图片](https://uploader.shimo.im/f/WBwy9Hi6ZeJVoGE3.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n            * 强对比主题![图片](https://uploader.shimo.im/f/cllBo4vROWxLeSre.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n        * 8个建议\r\n            * 避免使用过多颜色: 不超过8个\r\n            * 颜色从简\r\n            * 选择准确色板\r\n            * 颜色需要解释\r\n            * 保持颜色一致性\r\n            * 彩虹色环不连续\r\n            * 顺序色板需均衡\r\n            * 为视障群体设计\r\n    * 字体\r\n## 交互\r\n\r\n* 元素\r\n    * PC: 悬停、点击、框选、平移\r\n    * 移动端: 轻点、轻扫\r\n    * 其他: 肢体、NLP语言、虚拟化(AR/VR/MR)\r\n* 命题\r\n    * 概览第一, 聚焦过滤, 再按需查看详情\r\n* 推论\r\n    * 设计原则:[细节](https://antv.vision/zh/docs/specification/language/interact?fileGuid=yxTVyHW6DxVJqydV)\r\n        * 数据获取(是什么): 概览 + 细节\r\n        * 信息加工(为什么): 聚焦 + 关联\r\n        * 知识流转(怎么办): 标记 + 指引\r\n    * 设计建议\r\n        * 操控感\r\n        * 渐进呈现\r\n        * 构建系统, 而不是单个图标\r\n## 响应式\r\n\r\n* 元素\r\n    * 显示->省略->换行->旋转->抽样->缩放->换位->转化->隐藏\r\n* 解决方案\r\n    * 响应式\r\n    * 自适应\r\n* 设计流程\r\n    * 构成拆解\r\n    * 信息优先级\r\n    * 约束条件\r\n        * 外部约束: 屏幕尺寸、设备属性\r\n        * 内部约束: 组件所在大小，组件内元素个数和间距\r\n    * 响应策略\r\n        * 显示->省略->换行->旋转->抽样->缩放->换位->转化->隐藏\r\n    * 布局适应规则\r\n        * 显示->省略->换行->旋转->抽象->转化->隐藏\r\n# 设计策略\r\n\r\n![图片](https://uploader.shimo.im/f/tRor5T1i9mYIL6aw.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n\r\n![图片](https://uploader.shimo.im/f/RCjfudLYCXJ2H6Kv.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n\r\n![图片](https://uploader.shimo.im/f/3XGYPdmIbRM0VdQb.png!thumbnail?fileGuid=yxTVyHW6DxVJqydV)\r\n\r\n\r\n', 1, '2021-04-29 12:25:29', '2021-04-29 12:25:31');
INSERT INTO `article` VALUES (7, 'web色彩', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/7.png', NULL, 'web色彩', '', 1, '2021-04-29 12:26:13', '2021-04-29 12:26:15');
INSERT INTO `article` VALUES (8, '动画', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/8.png', NULL, '关于动画', '* 事件\r\n    * 时间\r\n    * 键盘\r\n    * 鼠标\r\n* 三角函数\r\n    * Math.sin\r\n    * Math.cos\r\n    * Math.tan\r\n    * Math.asin Math.asin2\r\n    * Math.acos Math.acos2\r\n    * Math.atan Math.atan2\r\n* 运动\r\n    * 三角函数\r\n        * 脉冲型变化\r\n        * 正弦型运动\r\n        * 圆周型运动\r\n* 速度向量\r\n    * 速度\r\n    * 加速度\r\n    * 重力加速度\r\n* 边界\r\n    * 越界处理\r\n        * 将物体移除\r\n        * 将物体设置回边界内, 就像产生了一个新的物体一样\r\n        * 让同一个物体出现在边界的另一个位置\r\n        * 将物体反弹回到边界内\r\n* 摩擦力\r\n* 拖拽\r\n* 投掷\r\n* 高级\r\n    * 比例运动\r\n        * 缓动 easing\r\n        * 弹动 spring\r\n        * 多物体弹动\r\n    * 碰撞检测\r\n        * 矩形的碰撞检测\r\n        * 圆形的碰撞检测\r\n        * 多物体碰撞检测\r\n        * 光线投影法碰撞检测\r\n    * 坐标旋转(假设中心坐标为0)\r\n        * ![图片](https://uploader.shimo.im/f/0gj6WqMTFPEcgd7h.png!thumbnail?fileGuid=33j66JQpJWwVRjH9)顺时针\r\n        * ![图片](https://uploader.shimo.im/f/PhBBgNSWWvwrzE0A.png!thumbnail?fileGuid=33j66JQpJWwVRjH9)逆时针\r\n    * 斜面反弹\r\n    * 动量和动能守恒\r\n        * ![图片](https://uploader.shimo.im/f/Skor7EK4BIiIrzq5.png!thumbnail?fileGuid=33j66JQpJWwVRjH9)\r\n    * 万有引力\r\n        * ![图片](https://uploader.shimo.im/f/ugLFm4CtDKznknLz.png!thumbnail?fileGuid=33j66JQpJWwVRjH9)\r\n', 1, '2021-04-29 12:27:33', '2021-04-29 12:27:35');
INSERT INTO `article` VALUES (9, '色彩', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/9.png', NULL, '色彩与光影', '# 光\r\n- 分类\r\n   - 性质分类\r\n      - 平行光\r\n         - 光强与距离无关\r\n         - 硬阴影\r\n      - 点光源\r\n         - 距离越远，光强越低\r\n         - 阴影软硬程度与点光源范围有关，范围越大阴影越软\r\n      - 聚光\r\n         - 距离越远，光强越低\r\n         - 阴影软硬程度与点光源范围有关，范围越大阴影越软\r\n   - 结构分类\r\n      - 主光：一般在物体左上方\r\n      - 辅光：一般与主光呈90度角\r\n      - 轮廓光：一般在物体后方偏30度左右\r\n      - 环境光\r\n- 颜色\r\n   - 白光\r\n   - 单色光\r\n- 反射\r\n   - 漫反射\r\n      - 本光强影响因素：源光强，入射角\r\n      - 被照射物体呈现点光源性质\r\n   - 镜面反射\r\n      - 本光强影响因素：源光强，入射角，视角\r\n      - 被照射物体呈现平行光性质\r\n   - 折射\r\n      - 次表面散射\r\n      - 面料比率\r\n      - 菲涅尔效应\r\n      - 体积光\r\n   - 吸收\r\n# 阴影\r\n\r\n- 软阴影\r\n   - 一般由大范围光源形成\r\n- 硬阴影\r\n   - 一般由小范围光源形成\r\n# 光影素描 \r\n\r\n- 三面\r\n   - 白\r\n      - 高光白\r\n      - 白\r\n   - 灰\r\n      - 亮灰\r\n      - 次灰\r\n      - 灰\r\n   - 黑\r\n      - 次重黑\r\n      - 重黑\r\n- 五大调\r\n   - 暗部\r\n   - 亮部\r\n   - 明暗交界线\r\n   - 反光\r\n   - 投影\r\n# 色彩\r\n\r\n- 色相\r\n   - 冷暖\r\n      - 暖色：红->黄\r\n      - 冷色：蓝->青\r\n      - 中性色：绿、紫\r\n   - 搭配\r\n      - 同类色\r\n      - 邻近色\r\n      - 相对色\r\n      - 补色\r\n- 明度\r\n   - 明度越高越亮\r\n- 饱和度\r\n   - 饱和度越低越亮\r\n- 色调\r\n   - 高调\r\n      - 白色调\r\n      - 粉色调\r\n      - 明色调\r\n      - 鲜色调\r\n   - 中调\r\n      - 灰色调\r\n      - 深色调\r\n   - 低调\r\n      - 黑色调\r\n- 实用色彩\r\n   - 色温\r\n      - 不同色相亮度不一样，最亮的紫青黄，最暗的红绿蓝\r\n      - 明度越高越亮\r\n      - 饱和度越低越亮\r\n   - 明暗变化\r\n      - 变亮：色相逐渐变为最亮的那一个，再逐渐减饱和度加明度\r\n      - 变暗：加饱和度减明度\r\n# 构图\r\n\r\n- 焦点元素\r\n   - 自然焦点元素\r\n      - 高对比度\r\n      - 饱和度\r\n      - 聚焦\r\n      - 动作\r\n      - 脸部或身形\r\n   - 焦点元素诱导\r\n      - 诱导线\r\n      - 框架\r\n      - 几何形状\r\n- 构图结构\r\n   - 三分法\r\n   - 黄金法则\r\n   - 三角构图\r\n- 构图平衡\r\n   - 视觉重量\r\n      - 大小\r\n      - 高对比度\r\n      - 饱和度\r\n      - 脸部或身形\r\n', 1, '2021-04-29 12:28:49', '2021-04-29 12:28:51');
INSERT INTO `article` VALUES (10, '图形学', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/10.png', NULL, '图形学入门', '# 图形学概览\r\n\r\n* 光栅化\r\n* 曲线与曲面\r\n* 光线追踪\r\n* 动画/模拟\r\n* 依赖\r\n    * 数学: 线性代数, 微积分, 统计学\r\n    * 物理: 光学, 动力学\r\n    * 杂项: 信号系统, 数字信号处理, 数字图像处理, 数值分析\r\n    * 美术\r\n# 光栅化\r\n\r\n## 线性代数\r\n\r\n* 向量: 大小, 方向\r\n    * 向量的模:![图片](https://uploader.shimo.im/f/JWB5rjJl3i9X7ffW.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 单位向量:![图片](https://uploader.shimo.im/f/0rJtBfq4d5Tz6Z5o.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 加法\r\n    * 点乘:\r\n        * 满足交换律、结合律、分配律\r\n        * 作用: 求夹角(方向判断, 判断是否垂直)、求投影(分解向量)\r\n        * 几何表示:![图片](https://uploader.shimo.im/f/AMhMG6tSjMvXCxy2.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 代数表示:![图片](https://uploader.shimo.im/f/5ZsrKLudoi4XBH8c.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 叉乘:\r\n        * 满足结合律、分配律, 不满足交换律\r\n        * 作用: 求坐标系, 判定左右, 判定内外\r\n        * 几何表示:![图片](https://uploader.shimo.im/f/n930FOX2vzncFqGC.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 代数表示:![图片](https://uploader.shimo.im/f/GFK7eizKiuyDZTXK.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 矩阵\r\n    * 乘积:![图片](https://uploader.shimo.im/f/RoiqCYRBF0oY087k.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 满足结合律、分配律, 不满足交换律\r\n    * 转置:![图片](https://uploader.shimo.im/f/7koeZJGtx9P0ZqjA.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 单位矩阵:![图片](https://uploader.shimo.im/f/MtzP8diKATxv6FRn.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 作用: 推导逆矩阵\r\n    * 向量在矩阵中的表示\r\n        * 点乘:![图片](https://uploader.shimo.im/f/0HeXsPr0muw8fGlR.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 叉乘:![图片](https://uploader.shimo.im/f/SSVd43cAOmgINrUY.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n## 变换\r\n\r\n* MVP变换: 做完MVP变换后所有模型坐标停留在[-1, 1]³范围内\r\n    * 模型变换\r\n        * 线性变换\r\n            * 缩放矩阵:![图片](https://uploader.shimo.im/f/Bykl75GXMgcykIJu.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 切变矩阵:![图片](https://uploader.shimo.im/f/yje35GJ83j0BkEsG.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 旋转矩阵(正交矩阵):![图片](https://uploader.shimo.im/f/ThltlyyJgHiZyKrO.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 翻转矩阵: 略\r\n        * 仿射变换\r\n            * 齐次坐标\r\n                * 二维的点表示:![图片](https://uploader.shimo.im/f/73vEV4ZkuwWs2etS.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * 二维向量表示:![图片](https://uploader.shimo.im/f/AqBDUUHfskObBror.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * 几何意义\r\n                    * 点 - 点 = 向量\r\n                    * 点 + 点 =中点\r\n                    * 向量 + 向量 =向量\r\n                    * 向量 - 向量 = 向量\r\n                    * 点 + 向量 = 点\r\n            * 缩放矩阵:![图片](https://uploader.shimo.im/f/7qtGsA9EvrIgB9Tb.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 旋转矩阵:![图片](https://uploader.shimo.im/f/Mg4WK0q9qcmyWzvi.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 平移矩阵:![图片](https://uploader.shimo.im/f/0jiHACsTQBnCUNNM.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 逆变换\r\n            * 坐标左乘变换矩阵的逆\r\n        * 组合变换\r\n        * 3D变换\r\n                * 旋转矩阵\r\n                    * 绕xyz轴旋转:![图片](https://uploader.shimo.im/f/ne40v2iiTXWp6fOg.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                    * 通用旋转:![图片](https://uploader.shimo.im/f/yxzMJy979xcBvksg.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                    * 罗德里格斯旋转公式:![图片](https://uploader.shimo.im/f/NEyQ6jDRgwh0nWMG.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * 四元数: 做插值用\r\n    * 视图变换\r\n        * 相机永远在原点\r\n        * 永远往-z方向看\r\n        * 永远以y为上方向\r\n        * ![图片](https://uploader.shimo.im/f/pGAdkiKMhtiZDr1V.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 投影变换\r\n        * 正交投影\r\n            * 视锥的位置平移变换到原点, 大小缩放成标准立方体\r\n        * 透视投影\r\n            * 视锥压缩成长方体, 再进行正交投影:![图片](https://uploader.shimo.im/f/wGOiUvUbyCJaHNiV.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 视角大小FOV(定义视野范围), 近平面距离N, 远平面距离F(定义压缩程度)\r\n* 视口变换:![图片](https://uploader.shimo.im/f/bw5ZUwqj3njog6Zl.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n## 采样\r\n\r\n* 像素\r\n    * 屏幕有width x height个像素, 坐标空间为(0, 0)到(width, height)\r\n    * 像素中心为(x+0.5, y+0,5)\r\n    * 显示设备: CRT(隔行扫描), DAC LCD(液晶), LED(发光二极管), 电子墨水屏\r\n    * 面元: 三角形\r\n* 采样\r\n    * 定义inside(tri, x, y)函数判断点是否在三角形内, 叉乘可实现, 对此函数进行采样\r\n    * 原理\r\n        * 冲激函数与信号相乘得到采样后的信号, 等同于重复该信号的频域![图片](https://uploader.shimo.im/f/bYLrTUTTI7cFYkCI.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 采样频率越大, 对应频域重复间隔越小, 若产生重叠则走样![图片](https://uploader.shimo.im/f/77q3rkFiuHzcTYUU.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 走样例子:锯齿, 摩尔纹, 车轮效应\r\n    * 反走样anti-aliasing\r\n        * 处理方法1: 提升分辨率来增大采样率\r\n        * 处理方法2: 低通滤波过滤掉高频信息，后采样\r\n            * 滤波\r\n                * 傅里叶级数展开: 任何一个周期函数都能写成正弦余弦的线性组合\r\n                * 傅里叶变换:![图片](https://uploader.shimo.im/f/xPITrSNKxvzdnJ61.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)非周期函数\r\n                * 滤波\r\n                    * 高通滤波: 图像只剩轮廓\r\n                    * 低通滤波: 图像变模糊没有轮廓\r\n                * 卷积定理: 时域上对俩信号卷积等于频域上俩信号乘积![图片](https://uploader.shimo.im/f/LSFKdlAryvJ3djkb.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 实际处理\r\n            * MSAA: 先按4倍分辨率超采样, 再对这个结果进行2*2的卷积, 再采样\r\n            * FXAA: 先得到有锯齿的采样, 再换掉有锯齿的边界, 与采样无关, 图像层面的抗锯齿\r\n            * TAA: 上一帧的图会被复用到下一帧的判断中\r\n            * DLSS: 深度学习\r\n## 深度缓存\r\n\r\n* 画家算法\r\n    * 为每一个像素记录深度值\r\n    * 若要渲染的像素深度值比已渲染的近, 则替换之, 否则不动\r\n## 纹理映射\r\n\r\n* 作用: 定义着色的时候逐像素的属性, 纹理坐标为(u, v), 约定u, v都在[0, 1]内, 模型上的每一个三角形顶点映射到(u, v), 每一个像素的属性根据顶点从uv图上获取的属性进行插值\r\n    * 插值\r\n        * 法线插值, 颜色插值, uv坐标插值\r\n        * 三角形内的坐标:![图片](https://uploader.shimo.im/f/n2ygwOTasqHpc9lG.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 重心坐标:![图片](https://uploader.shimo.im/f/bIwbk5nBDwnTRC5q.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 获取顶点属性\r\n    * 纹理精度过小\r\n        * 双线性插值![图片](https://uploader.shimo.im/f/lh4BnAS71hiXiFeK.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 纹理精度过大\r\n        * Mipmap: 提前卷积![图片](https://uploader.shimo.im/f/9LqZBe7dqcxMKe7i.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)对抗反走样, 提供范围查询, 范围用临近点映射到(u, v)图来判断![图片](https://uploader.shimo.im/f/kPn2EmOlY79LWHrV.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP), 得到对应的范围后进行三线性插值\r\n        * 各向异性过滤\r\n            * Ripmaps: 消耗更多的显存存储垂直竖直方向上异性的范围查询图![图片](https://uploader.shimo.im/f/iBTxCXmnPZGhgKys.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * EWA过滤![图片](https://uploader.shimo.im/f/1FmVLkvzZ0MPTOPj.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 纹理贴图\r\n* 环境光贴图\r\n    * 球面映射\r\n    * 立方体映射\r\n* 法线贴图\r\n    * 定义逐像素的法线方向\r\n* 位移贴图\r\n* 三维贴图(体积渲染)\r\n* 噪声贴图\r\n* 阴影贴图\r\n## 着色\r\n\r\n* 明暗\r\n* 颜色\r\n* 不同的材质和光线作用有不同的效果\r\n* 着色具有局部性, 不考虑其他物体的存在\r\n* Blinn-Phong反射模型:![图片](https://uploader.shimo.im/f/MiuxyRKtf6ONVepu.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/udBnikQSG0Kmcex6.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 参数\r\n        * 光线向量\r\n        * 视角向量\r\n        * 法线向量\r\n        * 光源距离\r\n        * 光强\r\n        * 表面参数: 颜色, shininess\r\n    * 漫反射:![图片](https://uploader.shimo.im/f/nHo72jh4wnPaeW3M.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 漫反射系数\r\n    * 镜面反射:![图片](https://uploader.shimo.im/f/BYR12JBdpxLtD8iV.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 镜面反射系数\r\n        * 衰减指数\r\n        * 半程向量\r\n    * 环境光照:![图片](https://uploader.shimo.im/f/GFEspuIFGMe8myvl.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 着色频率\r\n    * 片元着色(平面着色): 对片元进行着色, 片元里的像素与片元着色同色![图片](https://uploader.shimo.im/f/h2DMkaovz70xyBCt.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 法线为任意两边向量叉乘, 片元越细致效果越好\r\n    * 顶点着色(Gouraud着色): 对顶点进行着色, 片元里的像素根据顶点的着色进行插值![图片](https://uploader.shimo.im/f/JlPGgRWcG5bBrLsy.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 法线为顶点所属三角形的法线求平均或面积加权平均\r\n    * 像素着色(Phone着色): 对像素进行着色![图片](https://uploader.shimo.im/f/dpGBuBtWkXnxscrV.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 法线为顶点法线的插值, 片元越粗糙性价比越高\r\n* 实时渲染管线:![图片](https://uploader.shimo.im/f/ryX4IwEGcPOyg1z5.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 可编程部分(OpenGL为GLSL语言)\r\n        * shader\r\n            * 顶点着色器\r\n            * 片元着色器\r\n            * 几何着色器(新技术)\r\n            * 通用计算着色器(新技术)\r\n* 阴影\r\n    * 光源看不到, 但相机能看到的物体\r\n    * 阴影图\r\n        * 以光源为基准进行光栅化生成阴影图, 记录每个像素深度值,\r\n        * 若相机光栅化后的像素与光源距离不等于阴影图的深度值, 则在阴影中\r\n        * 只能做硬阴影\r\n        * 软阴影: 本影 半影 影外\r\n# 几何\r\n\r\n## 隐式几何\r\n\r\n* 函数映射: 不耗显存, 易判断内外\r\n    * CSG: 由简单几何体布尔运算出复杂几何体\r\n    * 距离函数(SDF): 做blend\r\n    * 水平集\r\n    * 分形\r\n## 显式几何\r\n\r\n* 存储面元顶点\r\n    * 曲线\r\n        * 贝塞尔曲线![图片](https://uploader.shimo.im/f/SFF4aU6A6bNSBAhf.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/3UiscRD0rgJfS3us.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * Bernstein多项式:![图片](https://uploader.shimo.im/f/U4gLxq9yoAsWqNJ0.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 曲线包含控制点的起始点与终点, 且斜率相同\r\n            * 对控制点放射变换曲线不变, 投影变换不行\r\n            * 曲线所有点必须在控制点形成的凸包内\r\n            * 习惯上每四个点定义一段贝塞尔曲线\r\n            * C0连续, C1连续\r\n        * 样条\r\n            * B样条\r\n            * NURBS\r\n    * 曲面\r\n        * 贝塞尔曲面\r\n        * 网格\r\n            * 网格细分: 形成新顶点, 调整顶点位置\r\n                * loop细分: 取三角形边中点, 连接起来![图片](https://uploader.shimo.im/f/aXxwQeFCJ7kcIn6J.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                    * 新的顶点:![图片](https://uploader.shimo.im/f/Dd0elSmKUkZ3v9h4.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                    * 老的顶点:![图片](https://uploader.shimo.im/f/xK4ZcWarhTzNqmpA.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * Catmull-Clark细分: 每条边找中点, 面上找中点但, 连接起来, 在第一次细分后增加非四边形数的奇异点, 之后全是四边形面, 不增加奇异点\r\n                    * 面上新顶点![图片](https://uploader.shimo.im/f/eu7mOaCXOIMBQ9jZ.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                    * 边上新顶点\r\n                    * 老的顶点![图片](https://uploader.shimo.im/f/0TEfQpNoQSWjbZo1.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 网格简化\r\n                * 二次误差度量\r\n                * 边坍缩\r\n            * 网格正则化\r\n* 参数映射\r\n* .obj 顶点坐标 顶点法线 顶点uv坐标 面元连接\r\n# 光线追踪\r\n\r\n## Whitted-Style光线追踪\r\n\r\n* 光线求交\r\n    * 方程\r\n        * 光线方程:![图片](https://uploader.shimo.im/f/Rbuc0QRzSc4zV90B.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 曲面隐式方程\r\n        * 面元\r\n    * 加速\r\n        * 轴对齐包围盒\r\n        * 加速结构\r\n            * 统一网格划分\r\n            * 空间划分\r\n                * Oct-Tree![图片](https://uploader.shimo.im/f/xhJqlL3YAEdzHo4L.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * KD-Tree![图片](https://uploader.shimo.im/f/rTV0CHOgv6XDiI7q.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * BSP-Tree![图片](https://uploader.shimo.im/f/ocBnaOxoJX8QxkyR.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n                * 物体划分(BVH)![图片](https://uploader.shimo.im/f/UV2T7DyYitkW9d5G.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 辐射度量学\r\n    * energy![图片](https://uploader.shimo.im/f/eOlOctAXb9Nc7x0H.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * flux![图片](https://uploader.shimo.im/f/cxkOQTdgwNukYV3O.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * intensity![图片](https://uploader.shimo.im/f/7IpcIhl3xwxZamHL.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * irradiance![图片](https://uploader.shimo.im/f/BCvir4aQhvnrQYCk.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * radiance![图片](https://uploader.shimo.im/f/DntKS2mxQOA73G2P.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 双向反射分布函数BRDF![图片](https://uploader.shimo.im/f/Yw22LYdpG3zhOs4E.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 反射方程![图片](https://uploader.shimo.im/f/PkgW8qb1QF0rHeKo.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 渲染方程![图片](https://uploader.shimo.im/f/XmJZpjfcLPeON4f8.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/dUuG1diZO1PoFRMl.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/0ejNVlsNnVbJx2Zx.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/yNeMeQW81s6dcut5.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n## 路径追踪\r\n\r\n* 反射方程蒙特卡洛积分结果:![图片](https://uploader.shimo.im/f/oZIz8PgGkUseMNfD.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 防止指数爆炸: 一次采样只有一条路径追踪\r\n* 防止递归: 俄罗斯轮盘赌, 用概率解决\r\n* 防止采样不到光源: 重要性采样\r\n* SPP(每像素采样率): 每像素多少根路径追踪\r\n## 双向路径追踪BDPT\r\n\r\n## 光子映射: 光线聚焦效果很好\r\n\r\n## Metropolis光线传输MLT\r\n\r\n## VCM/UPBP\r\n\r\n## IR\r\n\r\n# 材质与外观\r\n\r\n* 散射\r\n* 次表面散射\r\n* 折射\r\n* BSDF = BRDF + BTDF\r\n* 菲涅尔项: 入射角与物体表面越平行, 反射的能量越多, 折射的能量越小(导体除外)\r\n* 各项异性材质\r\n* 反射模型\r\n    * 非表面模型\r\n        * 散射介质\r\n            * 相位函数: 定义散射介质如何散射\r\n        * 毛发模型BCSDF\r\n            * Marschner模型:![图片](https://uploader.shimo.im/f/xxYO1KU4iuSLqocO.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 双层圆柱模型:![图片](https://uploader.shimo.im/f/OJlcNcjR8gt9vDtI.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 颗粒材质\r\n    * 表面模型\r\n        * 表面模型BRDF\r\n        * 微表面模型Microfacet BRDF: 从远处看, 看到的是材质外观, 从近处看是几何![图片](https://uploader.shimo.im/f/ubuGp0N2evIKN7yS.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 次表面散射BSSRDF\r\n            * Dipole近似:![图片](https://uploader.shimo.im/f/bgylJAYhGsbNme71.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 布料材质\r\n            * 当成散射介质来做\r\n            * 当成实际纤维来做\r\n            * 当作表面\r\n* 程序化纹理\r\n    * 噪声函数\r\n# 相机\r\n\r\n* 视场![图片](https://uploader.shimo.im/f/3K9mwDivitjsCvCP.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 焦距![图片](https://uploader.shimo.im/f/Jkvl4t9jPDqpZ9wz.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 传感器大小\r\n* 成像\r\n    * 曝光时间(快门时间)![图片](https://uploader.shimo.im/f/sh6XKJJvRbxhlPVS.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 光圈大小\r\n    * 感光度ISO(一般不改, 改了噪声会增加)\r\n    * 低曝光大光圈: 高速摄影\r\n    * 高曝光小光圈: 延时摄影\r\n* 景深![图片](https://uploader.shimo.im/f/kfKFjT7x4Vvj0San.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 透镜组![图片](https://uploader.shimo.im/f/hCyLrwXIzvHeQM4P.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 焦距\r\n        * 物距\r\n        * 像距\r\n        * CoC弥散圆![图片](https://uploader.shimo.im/f/ih66zOCH114DiKO4.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 光场\r\n    * 全光函数![图片](https://uploader.shimo.im/f/J4evyZzHppiSvfPB.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 光场: 一个物体任何一个位置往任何一个方向的光的强度![图片](https://uploader.shimo.im/f/fyIdQJmQkykVXc2r.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/5pcg83zmH0zXB9Jw.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)![图片](https://uploader.shimo.im/f/T4G5L5dqFyBb26q0.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n# 颜色\r\n\r\n* 光谱: 400nm~700nm可见光![图片](https://uploader.shimo.im/f/cVu5WKX11qeJAGgJ.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n* 谱功率密度\r\n* SML: 人看到的是这三个数\r\n* 同色异谱\r\n* 加色系统\r\n    * CIE RGB:![图片](https://uploader.shimo.im/f/2eWeU7UX4SejrAPW.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * CIE XYZ:![图片](https://uploader.shimo.im/f/sYl577d39BdfL7vq.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 颜色空间\r\n    * 色域\r\n    * HSV:![图片](https://uploader.shimo.im/f/oWyqpC6LCLueR0SY.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * CIE LAB:![图片](https://uploader.shimo.im/f/FfbsdFDJm5h5DAOc.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 互补色\r\n* 减色系统\r\n    * CMYK\r\n# 动画与模拟\r\n\r\n* 动画: 24fps流畅, 关键帧, 补间\r\n* 运动系统\r\n    * 质点弹簧系统\r\n        * 零距简单弹簧：![图片](https://uploader.shimo.im/f/yZxi6syAvmZRUXc6.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 非零距弹簧:![图片](https://uploader.shimo.im/f/VSYejFoT5vVdyJaT.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 外部耗能:![图片](https://uploader.shimo.im/f/EhLrPxmFvvv0spzZ.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 内部耗能:![图片](https://uploader.shimo.im/f/Jzs0YoyszZ1o6JsB.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 弹簧结构:![图片](https://uploader.shimo.im/f/cnRaRa9bVgyRjy5L.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 有限元系统\r\n    * 粒子系统\r\n        * 创建新粒子\r\n        * 计算粒子之间相互作用:![图片](https://uploader.shimo.im/f/IW5Dqt1HvgpYI6LO.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n        * 更新每个粒子的位置及速度\r\n        * 删除死亡的粒子\r\n        * 渲染粒子\r\n        * ODE:![图片](https://uploader.shimo.im/f/1oXSsoTAzBl0QDPi.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 前向欧拉法\r\n            * 中点法:![图片](https://uploader.shimo.im/f/uARymNvJsBSuvH27.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * Adaptive Step Size法:![图片](https://uploader.shimo.im/f/y6J9Clh605ao75iW.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 隐式欧拉法:![图片](https://uploader.shimo.im/f/HWxLZ3a7zAD6ohsv.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * Runge-Kutta法:\r\n* 运动学\r\n    * 正向运动学\r\n        * 连接类型:![图片](https://uploader.shimo.im/f/uyzQG87NEIB63Lpm.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n            * 固定\r\n            * 球型关节\r\n            * 可伸缩连接\r\n        * 位置计算:![图片](https://uploader.shimo.im/f/goMjBINIS9meRFSv.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)\r\n    * 逆向运动学\r\n        * 位置计算:![图片](https://uploader.shimo.im/f/YgpfIZz10euycjlz.png!thumbnail?fileGuid=RRW8VPyqjr3KxwDP)一般用梯度下降解\r\n* 绑定\r\n* Blend Shapes\r\n* 动作捕捉\r\n    * 光学\r\n    * 磁力\r\n    * 机械\r\n', 1, '2021-04-29 12:29:43', '2021-04-29 12:29:45');
INSERT INTO `article` VALUES (11, '操作系统', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/11.png', NULL, '操作系统', '- 启动: 读入操作系统代码 --> 获取设备参数与初始化数据结构\r\n   - 第一阶段指令\r\n      - 寻址0xFFFF0: ROM BIOS映射区\r\n      - 指令作用: 检查RAM, 键盘, 显示器, 软硬磁盘), 启动设备信息设置在CMOS, 在CMOS处寻得启动设备, 若为磁盘, 则磁盘0磁道0扇区引导扇区(512B), 将其读入0x7c00处, 指令地址跳转到0x7c00\r\n   - 第二阶段指令\r\n      - boot扇区代码: bootsect.s\r\n      - 指令作用: 挪动0x7c00的前512B到0x9000并继续执行, BIOS中断读取setup的4个扇区到0x9020, BIOS中断读取光标位置, BIOS中断在光标位置处显示字符, 调用read_it函数将之后的操作系统代码读入, 指令地址跳转到0x9020\r\n   - 第三阶段指令\r\n      - setup模块: setup.s\r\n      - 指令作用:  获取参数(光标位置，内存大小，显卡参数，根设备号), 将有关操作系统的代码(始于0x9000)移动到0x0000, 从实模式切换到保护模式, 初始化gdt表(地址翻译表), idt表(中断函数入口表), 指令地址跳转到0x0000\r\n   - 第四阶段指令\r\n      - system模块: head.s main.c\r\n      - head.s作用: 继续初始化idt表, gdt表, 调用main函数\r\n      - main.c作用: 初始化内存(4k作为单位初始化)\r\n- 接口\r\n   - 用户接口: 命令行, 图形界面, 应用程序\r\n   - 程序接口: 系统调用\r\n      - 任务管理\r\n         - fork: 创建进程\r\n         - execl: 运行可执行程序\r\n         - pthread_create: 创建线程\r\n         - yield(): 用户级线程切换\r\n         - schedule(): 切换进程或内核级线程\r\n      - 文件系统\r\n         - open: 打开一个文件或目录\r\n         - EACCES: 返回值, 表示没有权限\r\n         - mode_t st_mode: 文件属性\r\n- 封装\r\n   - 内核态0\r\n   - 用户态3\r\n   - 用户态里中断切换成内核态并调用该中断处理函数(系统调用)\r\n- 多进程(CPU管理, 内存管理)\r\n- 文件(磁盘管理, 终端设备管理)\r\n- CPU管理\r\n   - 单道程序\r\n   - 多道程序\r\n   - 分时并发\r\n      - 每个程序存放信息的结构: PCB\r\n         - PID\r\n         - TCB\r\n         - LDT段表\r\n            - CR3页表\r\n      - 正在执行的进程\r\n      - 进程就绪队列\r\n      - 磁盘等待队列\r\n      - 新建态 就绪态 阻塞态 运行态 终止态\r\n      - 交替的三部分: 队列操作+调度+切换\r\n         - 调度: FIFO Priority\r\n      - 进程同步\r\n- 内存管理\r\n   - 地址映射表\r\n- 线程\r\n   - 线程切换: 只切换栈(pc指针、寄存器状态), 不切换地址映射表(MMU)\r\n   - 存储线程信息的结构: TCB\r\n   - 用户级线程\r\n      - 每个线程一个栈(用户空间栈)\r\n      - 无法被系统感知, 属于用户空间的操作, 通过yield()切换\r\n   - 内核级线程\r\n      - 每个线程一套栈(TCB保存的内核栈, 内核栈指向的用户空间栈)\r\n      - 能被系统感知, 通过schedule()切换\r\n   - 中断处理函数\r\n      - int0x80系统调用\r\n      - 保存用户态寄存器状态与返回地址\r\n      - 调用指定的内核接口\r\n      - 判断线程状态是否为阻塞, 判断时间片是否用完, 如有则调用shedule切换\r\n      - 中断处理函数返回\r\n   - fork()\r\n      - 创建PCB\r\n      - 初始化PCB信息\r\n      - 将PCB的用户栈设置为父进程用户栈, 创建一个新的内核栈\r\n   - execl()\r\n      - 读入指定文件代码, 并将内核栈返回地址设为该代码入口, 创建新的用户栈\r\n- CPU调度\r\n   - FIFO\r\n   - Priority\r\n   - 周转时间短、响应时间短、吞吐量大\r\n   - IO密集型、CPU密集型\r\n   - FCFS\r\n   - SJF(平均周转时间短)\r\n   - RR(平均响应时间短)\r\n   - 优先级调度\r\n   - 动态优先级调度\r\n- 前台任务: RR\r\n- 后台任务: SJF\r\n- 实际的schedule函数\r\n   - 使用RR, 根据counter大小为优先级执行下一个任务\r\n   - 每次时间片用完执行 counter(收敛于2p) = counter >> 1(时间片除2) + p(初值)\r\n   - 每次轮转周期, IO密集型任务优先级不断升高, 满足IO密集型任务对响应时间短的要求\r\n   - 短任务会先执行完, 满足CPU密集型对周转时间短的要求\r\n   - 优先级是不断学习获得的, 不会出现饥饿现象\r\n- 进程同步与信号量\r\n   - PV操作: P消耗资源 V释放资源\r\n   - 临界区的实现(使PV操作原子化)\r\n      - 皮特森算法(两个PV操作间互斥) 面包店算法(多个PV操作间互斥)\r\n      - 关中断cli() sti()(多CPU有多个中断寄存器INTR不好使)\r\n      - 硬件实现原子指令\r\n   - 死锁\r\n      - 成因: 信号量的不恰当使用造成环路等待\r\n      - 四个必要条件\r\n         - 资源的互斥使用\r\n         - 资源的不可抢占\r\n         - 请求和保持\r\n         - 循环等待\r\n      - 解决\r\n         - 死锁预防\r\n         - 死锁避免: 银行家算法\r\n         - 死锁检测+恢复\r\n         - 死锁忽略: 推荐，重启就行了\r\n- 内存管理\r\n   - 重定位(基地址+ 相对地址)\r\n      - 编译时: 效率高但固定\r\n      - 载入时: 灵活\r\n      - 运行时: 更灵活, 也是正式使用的\r\n   - 磁盘swap交换区: 内存紧张时与内存交换阻塞进程\r\n   - 分区\r\n      - 可变分区管理: 首先适配 最佳适配 最差适配\r\n   - 分页\r\n      - 页表\r\n      - MMU内存管理单元\r\n   - 多级页表\r\n      - 页目录指针CR3\r\n   - TLB快表(寄存器)\r\n      - 利用时间和空间局部性\r\n   - 段页表\r\n      - 虚拟地址\r\n      - 建立从 段号+偏移 到 物理页号 + 偏移 的映射\r\n   - 换入换出\r\n      - FIFO\r\n      - MIN\r\n      - LRU\r\n      - Clock\r\n- IO设备与驱动\r\n   - 操作系统给程序提供的统一接口\r\n      - open, read, write, close\r\n      - open找到要写入的设备端口地址\r\n   - 缓冲区\r\n   - 字符设备 块设备\r\n   - 硬盘\r\n      - 柱面(多个盘面的磁道合集)、磁头、扇区、缓存位置\r\n      - 磁盘访问时间 = 写入控制时间 + 寻道时间 + 旋转时间 + 传输时间\r\n      - 读写基本单位: 由扇区变为盘块(连续扇区), 加快读写速度\r\n      - 多进程访问磁盘调度\r\n         - FCFS\r\n         - SSTF\r\n         - SCAN\r\n         - C-SCAN\r\n      - 文件到盘块号的的映射，再由驱动将盘块好转为柱面、磁头、扇区\r\n         - FCB\r\n', 2, '2021-04-29 12:33:05', '2021-04-29 12:33:07');
INSERT INTO `article` VALUES (12, '数据结构', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/12.png', NULL, '数据结构', '# 问题\r\n- 从输入到输出的一种映射函数\r\n- 优化问题\r\n# 抽象数据类型\r\n\r\n- 数据元素集\r\n- 关系集\r\n   - 操作\r\n   - 指定\r\n- 操作集\r\n# 数据结构\r\n## 物理结构\r\n\r\n- 顺序存储\r\n- 链式存储\r\n## 逻辑结构\r\n### 集合\r\n### 线性\r\n\r\n- 定义\r\n   - 概念\r\n      - 数据对象: [D = {\\{ a_{i} | a_{i} \\in ElemSet, i = 1, 2, ..., n, n \\geq 0 \\}}](#)\r\n      - 数据关系: [R1 = {\\{ <a_{i- 1}, a_{i}> | a_{i - 1}, a_{i} \\in D, i = 2, ..., n }\\}](#)\r\n   - 操作\r\n      - 构造\r\n      - 查\r\n         - 长度\r\n         - 按索引查值, 单, 多 \r\n         - 按值查索引, 单, 多\r\n      - 增删\r\n         - 按索引插入, 单, 多\r\n         - 按索引删除, 单, 多\r\n      - 判定\r\n      - 映射\r\n      - 过滤\r\n      - 归并\r\n      - 遍历\r\n      - 排序\r\n         - 插入排序: \r\n            - 直接插入排序: [O(n^{2})](#), [O(1)](#), 稳定\r\n            - shell排序: [O(n^{2})](#), [O(1)](#), 不稳定\r\n         - 选择排序: \r\n            - 直接选择排序: [O(n^{2})](#), [O(1)](#), 稳定\r\n            - 堆排序: [O(nlogn)](#), [O(1)](#), 稳定\r\n         - 交换排序\r\n            - 冒泡排序: [O(n^{2})](#), [O(1)](#), 稳定\r\n            - 快速排序: [O(nlogn)](#), [O(logn)](#), 不稳定\r\n         - 归并排序\r\n         - 分配排序\r\n            - 桶排序\r\n            - 基数排序\r\n- 分类\r\n   - 队列\r\n      - 排队\r\n      - 树图的层序遍历\r\n   - 栈\r\n      - 括号匹配检测\r\n      - 行编辑程序\r\n      - 迷宫求解\r\n      - 中缀表达式->后缀表达式, 以及后缀表达式求值\r\n      - 八皇后\r\n      - 汉诺塔\r\n   - 串\r\n      - 模式匹配算法\r\n   - 跳表\r\n- 存储\r\n   - 顺序\r\n   - 链式\r\n### 树\r\n\r\n- 树\r\n   - 定义\r\n      - 概念\r\n         - 结点: 子节点, 父节点, 最左子节点, 兄弟节点, 前兄弟, 后兄弟, 分支节点, 叶节点, 根节点\r\n         - 边: 两个节点的有序对\r\n         - 路径, 路径长度: \r\n         - 祖先, 后代: 若有一条由k到达[k_{s}](#)的路径, 则称k是[k_{s}](#)的祖先, [k_{s}](#)是k的子孙\r\n         - 度数: 一个结点的子树的个数\r\n         - 层数: 根为第0层, 其他结点的层数等于其父结点层数+1\r\n         - 深度: 层数最大的叶结点的层数\r\n         - 高度: 层数最大的叶结点的层数+1\r\n         - 森林: 零棵或多棵不相交的树的集合(通常是有序)\r\n         - 森林转二叉树的形式定义: 森林中的第一个兄弟结点为父结点, 其子树为左子树, 其兄弟结点为右子树, 递归定义\r\n      - 操作\r\n         - 增删改查\r\n            - 返回当前结点的值\r\n            - 设置当前结点的值\r\n            - 返回第一个左孩子结点\r\n            - 返回右兄弟\r\n         - 遍历\r\n            - 先根深度优先遍历树\r\n            - 后根深度优先遍历树\r\n            - 广度优先遍历树\r\n   - 性质\r\n      - 度为2的树不是二叉树\r\n      - 转换二叉树的先序遍历等同于原树的先序遍历\r\n      - 转换二叉树的中序遍历等同于原树的后序遍历\r\n   - 存储\r\n      - 邻接表\r\n      - 左孩子/右兄弟, 即二叉树表示法\r\n         - 链表\r\n         - 数组\r\n      - 孩子数组表示法\r\n      - 父指针表示法, 孩子结点失去有序性\r\n      - 顺序存储\r\n         - 带左右标记位的先序二叉树数组表示法\r\n         - 层次\r\n         - 带度数的后序表示\r\n- 二叉树\r\n   - 定义\r\n      - 概念\r\n         - 满二叉树\r\n         - 完全二叉树\r\n         - 扩充二叉树\r\n      - 操作\r\n         - 增删改查\r\n            - 父节点\r\n            - 左孩子节点\r\n            - 右孩子节点\r\n         - 遍历\r\n            - 深度优先遍历\r\n               - 前序\r\n               - 后序\r\n               - 中序\r\n            - 广度优先遍历\r\n   - 性质\r\n      - 普通二叉树\r\n         - 第i层最多有[2^{i}](#)个节点(完全满二叉为等于)\r\n         - 深度为k的二叉树至多有[2^{k+1}-1](#)个节点(完全满二叉为等于)\r\n         - 若终端节点数为[n_{0}](#), 度为2的节点数为[n_{2}](#), 则[n_{0}=n_{2}+1](#)\r\n         - 有n个结点的二叉树的高度至少为[log_{2}(n+1)](#)(完全二叉树为等于)\r\n      - 完全二叉树\r\n         - 从上至下, 从左往右序号为i的节点左孩子节点为2i+1(2i+1<n时), 右孩子节点为2i+2(2i+2<n时)\r\n         - 0<i<n时, 节点i的父亲时节点(i-1)/2取下整\r\n         - 奇数节点为左节点, 偶数节点为右节点\r\n      - 扩充二叉树\r\n            - 外部路径总长度 = 内部路径总长度 + 2 * 节点个数\r\n- 分类\r\n   - 线索二叉树\r\n   - 二叉搜索树\r\n      - 特征: 父节点, 左孩子节点, 右孩子节点, 呈有序\r\n      - 操作\r\n         - 增: 检索到没有孩子节点的位置插入新叶\r\n         - 删: 被删节点没有左或右节点则直接把存在的左或右节点替换上来, 若两者皆有则找到左子树最大节点或右子树最大节点替换被删节点, 然后递归删除操作, 尽量不退化到线性结构\r\n         - 查: 树高越小查找性能越好\r\n      - 分类\r\n         - 维持平衡: 红黑树, 伸展树\r\n         - 外存: B/B+树\r\n   - 堆\r\n      - 特征: 父节点, 左右孩子节点, 呈有序, 为完全二叉树\r\n      - 操作\r\n         - 增: 将新节点增添到末尾, 然后向上调整, O(logn)\r\n         - 删: 将末尾节点替换到被删节点, 然后向上调整或向下调整, O(logn)\r\n            - 删根节点(最值)\r\n            - 按索引删\r\n         - 查\r\n            - 根节点\r\n            - 按索引查\r\n         - 建堆: 从末尾元素逐个向上调整, 调整下来的元素向下调整, O(n)\r\n         - 排序(私有)\r\n            - 向上调整\r\n            - 向下调整\r\n   - 优先队列\r\n   - Huffman树\r\n      - 特征: 父节点等于左右孩子节点之和, 最小外部路径权重和\r\n      - 操作\r\n         - 构造: 从子树数组中取出最小的两个权重作为叶子节点, 加和的权重作为根节点并放回原子树数组, 重复这个贪心过程, 直到子树数组只剩一棵树\r\n   - k叉树\r\n   - 并查集\r\n      - Find: 查询结点所在集合\r\n      - Union: 归并两个集合\r\n      - 权重\r\n      - 路径压缩\r\n### 图\r\n\r\n- 定义\r\n   - 概念\r\n      - 完全图: 两两顶点都有边相连\r\n      - 稀疏图: 边条数小于完全图的5%\r\n      - 密集图: 接近完全图的边条数\r\n      - 有向图: 有向图: 边涉及顶点的偶对是有序的\r\n         - 强连通分量\r\n      - 无向图: 边涉及的顶点的偶对无序\r\n         - 连通分量\r\n      - 顶点的度: 入度与出度\r\n      - 子图: 子图的所有边和顶点是原图的子集\r\n      - 路径: 一个顶点到另一个顶点的顶点序列\r\n      - 简单路径: 顶点序列中的顶点不能出现两次(起点终点除外)\r\n      - 路径长度\r\n      - 回路: 起始点与终结点是一个点\r\n      - 无环图: 没有回路的图\r\n      - 有向无环图: 树和森林是有向无环图的特例\r\n      - 有根图: \r\n      - 连通图\r\n      - 网络: 带权的连通图\r\n   - 操作\r\n      - 增删改查\r\n         - 图的顶点个数\r\n         - 图的边数\r\n         - 第一条关联边\r\n         - 下一条兄弟边\r\n         - 添一条边\r\n         - 删边\r\n         - 返回边的起始点\r\n         - 返回边的终止点\r\n         - 返回边的权\r\n      - 遍历\r\n         - 深度优先遍历\r\n         - 广度优先遍历\r\n      - 排序\r\n         - 有向无环图的拓扑排序\r\n         - 有向无环图的关键路径\r\n      - 最短路径\r\n         - Dijkstra算法\r\n         - Floyd算法\r\n      - 最小生成树\r\n         - prim算法\r\n         - kruskal算法\r\n- 存储\r\n   - 邻接矩阵\r\n   - 邻接表\r\n   - 十字链表\r\n### 二维数组\r\n### 多维数组\r\n### 广义表\r\n# 算法\r\n\r\n- 概念\r\n   - 对特定问题求解过程的描述方法\r\n   - 算法特性\r\n      - 输入\r\n      - 输出\r\n      - 有穷性\r\n      - 确定性\r\n      - 可行性\r\n   - 算法设计要求\r\n      - 正确性\r\n      - 可读性\r\n      - 健壮性\r\n      - 时间效率高、存储量低\r\n   - 分类\r\n      - 穷举\r\n         - 顺序找K值\r\n      - 回溯、搜索\r\n         - 八皇后、树和图遍历\r\n      - 递归分治: 最优子结构, 子结构不重复\r\n         - 二分找K值、快速排序、归并排序\r\n      - 贪心: 最优子结构, 贪心性质\r\n         - Huffman编码树、最短路Dijkstra算法、最小生成树Prim\r\n      - 动态规划: 最优子结构, 子结构重复, 无后效性\r\n         - 最短路Floyd算法\r\n- 复杂度\r\n   - 时间复杂度\r\n      - T(n) = O(f(n))\r\n      - 常见复杂度\r\n         - 多项式量级\r\n            - 常量阶: O(1)\r\n            - 对数阶: O(logn)\r\n            - 线性阶: O(n)\r\n            - 线性对数阶: O(nlogn)\r\n            - 幂数阶: O(n²), O(n³)...\r\n         - 非多项式量级(NP问题)\r\n            - 指数阶： O(2^n)\r\n            - 阶乘阶:O(n!)\r\n   - 空间复杂度\r\n      - 常见复杂度\r\n         - O(1)\r\n         - O(n)\r\n         - O(n²)\r\n   - 最好时间复杂度\r\n   - 最坏时间复杂度\r\n   - 平均时间复杂度: 一般最好时间复杂度和最坏时间复杂度有量级差距时才会用这仨来区分\r\n   - 均摊时间复杂度\r\n- 思想\r\n   - 分治\r\n      - 分类\r\n         - 从左往右的尝试模型\r\n         - 范围上的尝试模型\r\n         - 多样本位置全对应的尝试模型\r\n         - 寻找业务限制的尝试模型\r\n   - 贪心\r\n      - 前面的选择不影响后面的选择，在限制条件下尽可能获得更大的期望值\r\n      - 案例\r\n         - 分糖果\r\n         - 钱币找零\r\n         - 区间覆盖\r\n         - 霍夫曼编码\r\n   - 回溯\r\n      - 应用\r\n         - 背包\r\n         - 走迷宫\r\n      - 递归\r\n         - 三定律: 递归边界, 算法需向递归边界演进, 算法必须调用自身\r\n         - 应用\r\n            - 整数转换任意进制\r\n            - 全排列\r\n            - 分形: 分形树, 螺旋, 谢尔宾斯基三角形\r\n            - 汉诺塔\r\n            - 走迷宫\r\n   - 线性规划\r\n   - 动态规划\r\n      - 概念\r\n         - 转移方程: 暴力递归的分析过程抽象出来就是动态规划的转移方程\r\n      - 分类\r\n         - 记忆化搜索\r\n   - 贪心：一条路走到黑，就一次机会，只能哪边看着顺眼走哪边\r\n   - 回溯：一条路走到黑，无数次重来的机会，还怕我走不出来 (Snapshot View)\r\n      - 动态规划：拥有上帝视角，手握无数平行宇宙的历史存档， 同时发展出无数个未来 (Versioned Archive View)\r\n- 随机生成算法\r\n   - 迷宫算法(随机生成算法)\r\n      - 砸墙第一原则: 只能砸没去过的房间\r\n      - 砸墙第二原则: 无墙可砸的时候, 传送到一个去过的并且周围有没砸房间的房间\r\n      - 砸墙第三原则: 每一个房间都要到达\r\n   - noise噪波函数\r\n- 原地哈希\r\n- 分治结果缓存\r\n- DFS\r\n- BFS\r\n- 剪枝\r\n- 双指针\r\n- 快速幂\r\n- 二分法\r\n- 常数级优化: 位运算优化\r\n# 线性表\r\n\r\n- 定义: \r\n- 操作\r\n   - elem& InitList(elem& L): 初始化线性表\r\n   - elem& ListEmpty(const elem& L): 判断线性表是否为空\r\n   - elem& ClearList(elem& L): 清空线性表\r\n   - elem& GetEl(const elem&L, int i): 返回表中第i个位置元素\r\n   - int LocateElem(const elem& L, elem e): 返回值为e的元素序号\r\n   - boolean ListInsert(elem& L, int i, elem e): 第i个位置插入新元素e\r\n   - elem ListDelete(elem& L, int i): 删除第i个元素并返回其值\r\n   - int ListLength(const elem& L): 返回表中元素个数\r\n- 物理结构\r\n   - 顺序存储: 不适合插删O(n), 适合存取O(1)\r\n   - 链式存储: 不适合存取O(n), 适合插删O(n)\r\n   - 静态链表\r\n- 排序算法\r\n   - 插排 O(n2) 稳定 原地\r\n   - 冒泡 O(n2) 稳定 原地\r\n   - 选排 O(n2) 非稳 原地\r\n   - 快排 O(nlogn) 非稳 原地\r\n   - 归并 O(nlogn) 稳定 非原地\r\n   - 桶排 O(n) 稳定 非原地\r\n   - 计数 O(n+k)k是数据范围 稳定 非原地  \r\n   - 基数 O(dn)d是维度 稳定 非原地\r\n- 查找算法\r\n   - 二分 O(logn)\r\n- 分治\r\n   - 快排\r\n   - 归并\r\n- 哈希算法\r\n   - 安全加密 MD5 SHA DES AES\r\n   - 唯一标识\r\n   - 数据校验\r\n   - 散列\r\n   - 负载均衡(一致性哈希)\r\n   - 数据分片\r\n# 树\r\n\r\n- 遍历\r\n   - 先序\r\n   - 中序\r\n   - 后序\r\n   - 层序\r\n- 满二叉树\r\n- 完全二叉树(数组 链表均可完美实现)\r\n- 堆\r\n   - 优先级队列\r\n- 二叉查找树\r\n   - 查找\r\n   - 增加\r\n   - 删除\r\n- 平衡二叉查找树\r\n   - AVL树\r\n   - 伸展树\r\n   - 树堆\r\n   - 红黑树\r\n# 图\r\n\r\n- 邻接矩阵\r\n- 邻接表\r\n- 遍历\r\n   - 深度优先\r\n   - 广度优先\r\n- 字符串匹配\r\n- BF\r\n- RK\r\n- BM\r\n- KMP\r\n- Trie树\r\n- AC自动机\r\n- 优化问题\r\n   - 贪心策略\r\n- 图\r\n   - 深度优先遍历(DFS)\r\n   - 广度优先遍历\r\n- 问题\r\n   - 范畴\r\n      - 是什么(面向判断与分类的问题)\r\n      - 为什么(面向求因与证明的问题)\r\n      - 怎么办(面向过程与构建的问题)\r\n   - 解决与否\r\n      - 已解决(表述为数学命题与模型与算法)\r\n      - 未解决\r\n      - 无法完全解决\r\n- 解决问题的终极工具\r\n   - 数学\r\n      - 清晰明确的符号表述体系\r\n      - 严密确定的推理系统\r\n      - 但正如科学不是万能的, 数学也不是万能的, 无法解决无明确表述和一部分明确表述的问题\r\n   - 计算\r\n      - 为解决数学本身的可检验性问题, 大数学家希尔伯特提出“能否找到一种基于有穷观点的能行方法，来判定一个数学命题的真假”\r\n      - 基于有穷观点的能行方法\r\n         - 由有限数量的明确有限指令构成\r\n         - 指令执行在有限步骤后终止\r\n         - 指令每次执行都总能得到唯一结果\r\n         - 原则上可以由人单独采用纸笔完成，而不依靠其他辅助\r\n         - 每条指令可以机械地被精确执行，而不需要智慧和灵感\r\n      - 20世纪30年代, 几位逻辑学家各自独立提出了几个关于“计算”的数学模型\r\n         - 哥德尔和克莱尼的递归函数模型\r\n         - 丘奇的Lambda演算模型\r\n         - 波斯特的Post机模型\r\n         - 图灵的图灵机模型\r\n      - 研究证明，这几个“基于有穷观点的能行方法”的计算模型，全都是等价的\r\n      - 虽然希尔伯特的计划最终被证明无法实现\r\n         - 不存在“能行方法”可判定所有数学命题的真假，总有数学命题，其真假是无法证明的\r\n      - 但“能行可计算”概念成为计算机理论的基础\r\n         - 其中一些数学模型（如图灵机）也成为现代计算机的理论基础\r\n      - 图灵机\r\n      - 用任何一个“有限能行”下的计算模型可以解决的问题，都算是“可计算”的\r\n      - 定义不清晰或某些无穷的问题是“不可计算”的\r\n- 计算复杂性\r\n   - ”基于有穷观点的能行方法“的“可计算”概念\r\n      - 仅仅涉及到问题的解决是否能在有限资源内（时间/空间）完成\r\n      - 并不关心具体要花费多少计算步骤或多少存储空间\r\n   - 由于资源相当有限，对于问题的解决需要考虑其可行性如何\r\n   - 人们发现各种不同的可计算问题，其难易程度不一\r\n      - 有些问题非常容易解决，如基本数值计算\r\n      - 有些问题的解决程度尚能令人满意，如表达式求值、排序等\r\n      - 有些问题的解决会爆炸性地吞噬资源，虽有解法，但没什么可行性，如哈密顿回路、货郎担问题等\r\n   - 同一个问题，也会有不同的解决方案，其解决效率上也是千差万别\r\n   - 计算复杂性理论研究问题的本质，将各种问题按照其难易程度分类，研究各类问题的难度级别，并不关系解决问题的具体方案\r\n   - 而算法则研究问题在不同现实资源约束情况下的不同解决方案，致力于找到效率最高的方案\r\n- 总结\r\n   - 问题的分类\r\n      - 是什么\r\n      - 为什么\r\n      - 怎么办\r\n   - 基于有穷观点的能行方法: 问题是否“可计算”\r\n   - 计算复杂性: “可计算”的问题复杂性\r\n      - 多项式量级(p问题)\r\n      - 非多项式量级(np问题)\r\n   - 算法: 每个“可计算”问题的效率最高方案\r\n- 逻辑-物理\r\n- 接口-实现\r\n', 1, '2021-04-29 12:33:39', '2021-04-29 12:33:40');
INSERT INTO `article` VALUES (13, '网络', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/13.png', NULL, '网络', '# Web\r\n\r\n## HTTP\r\n\r\n[https://developer.mozilla.org/zh-CN/docs/Web/HTTP](https://developer.mozilla.org/zh-CN/docs/Web/HTTP?fileGuid=9yTgWvccrk3xjHKp)\r\n\r\n### 特性\r\n\r\n* URI: 协议://IP地址:端口/路径\r\n* 持久连接与管线化\r\n* 无状态\r\n### 实体: 实体首部字段+实体主体\r\n\r\n* 内容编码: 压缩实体主体\r\n    * gzip(GNU zip)\r\n    * compress(UNIX系统的标准压缩)\r\n    * deflate(zlib)\r\n    * identity(不进行编码)\r\n* 分块传输编码: 实体主体分块传输\r\n### 虚拟主机\r\n\r\n* 相关头部\r\n    * Host\r\n* Host头部与消息的路由\r\n    1. 建立TCP连接\r\n        * 确定服务器的IP地址\r\n    1. 接收请求\r\n    2. 寻找虚拟主机\r\n        * 匹配Host头部与域名\r\n    1. 寻找URI的处理代码\r\n        * 匹配URI\r\n    1. 执行处理请求的代码\r\n        * 访问资源\r\n    1. 生成HTTP响应\r\n        * 各中间件基于PF架构串行修改响应\r\n    1. 发送HTTP响应\r\n    2. 记录访问日志\r\n### 通信数据转发程序: 代理、网关、隧道\r\n\r\n* 相关头部\r\n    * Cache-Control: no-transform: 禁止代理服务器修改响应体\r\n    * X-Forwarded-For: 用于传递IP\r\n    * Via: 代理服务器相关信息\r\n* 代理:\r\n    * 逻辑: 每通过一级代理都会在首部字段Via增加信息\r\n    * 优势: 利用缓存技术减少网络带宽的流量, 组织内部针对特定网站的访问控制\r\n    * 分类\r\n        * 缓存代理: 预先将资源的副本缓存在代理服务器上\r\n        * 透明代理: 不对报文做任何加工\r\n* 网关: 和代理很像, 但和服务器之间可以使用非HTTP协议通信\r\n* 隧道: 确保客户端和服务器进行安全的通信\r\n### 请求上下文\r\n\r\n* 相关头部\r\n    * User-Agent: 兼容的浏览器版本 渲染引擎 浏览器发布版本号\r\n    * Referer: 浏览器对来自某一页面的请求自动添加的头部, 来源页面为表示本地文件的\"file\"或者\"data\"URI或当前请求页面采用http协议, 而来源页面采用https协议时不会添加referer\r\n    * From: 主要用于网络爬虫, 告诉服务器如何通过邮件联系到爬虫的负责人\r\n    * Server: 指明服务器上所用软件的信息, 用于帮助客户端定位问题或者\r\n    * Allow: 告诉客户端服务器上该URI对应的资源允许哪些方法的执行\r\n    * Accept-Ranges: 告诉客户端服务器上该资源是否允许range请求\r\n### 内容协商\r\n\r\n* 服务器驱动协商\r\n* 客户端驱动协商\r\n* 透明协商\r\n* 相关头部\r\n    * Accept: 支持的mime格式\r\n    * Accept-Language: 支持的语言\r\n    * Accept-Encoding: 内容编码, 主要指压缩算法\r\n    * Content-Type: text/html; charset=utf-8\r\n    * Conte-Language: de-DE, en-CA\r\n    * Content-Encoding: gzip\r\n* 相关状态码\r\n    * 300 Multiple Choices\r\n### 报文主体传输方式\r\n\r\n* 定长传输\r\n    * Content-Length: 内容长度\r\n* 不定长传输\r\n    * Transfer-Encoding: \"chunked\" / \"compress\" / \"deflate\" / \"gzip\" / transfer-extension\r\n    * Chunked transfer encoding 分块传输编码: Transfer-Encoding: chunked\r\n        * chunked-body = *chuk last-chunk trailer-part CRLF\r\n        * chunk = chunk-size [chunk-ext] CRLF chunk-data CRLF\r\n            * chunk-size = 1*HEXDIG: 注意这里是16进制而不是10进制\r\n            * chunk-data = 1*OCTET\r\n        * last-chunk = 1*(\"0\")[chunk-ext] CRLF\r\n        * trailer-part = *(header-field CRLF)\r\n    * TE头部: 客户端在请求在声明是否接受Trailer头部\r\n        * TE: trailers\r\n    * Trailer头部: 服务器告知接下来chunk包体后会传输哪些Trailer头部\r\n        * Trailer: Date\r\n    * Content-Disposition头部\r\n        * disposition-type = \"inline\" / \"attachment\" / disp-ext-type\r\n            * inline: 指定包体是以inline内联的方式, 作为页面的一部分展示\r\n            * attachment: 指定浏览器将包体以附件的方式下载\r\n            * 在multipart/form-data类型应答中, 可以用于子消息体部分\r\n* HTML FORM表单\r\n    * FORM表单:HTML中的元素, 提供了交互控制元件来向服务器通过HTTP协议提交信息, 常见的控件有:\r\n        * Text Input Controls: 文本输入控件\r\n        * Checkboxes Controls: 复选框控件\r\n        * Radio Box Controls: 单选按钮控件\r\n        * Select Box Controls: 下拉列表控件\r\n        * File Select Boxes: 选取文件控件\r\n        * Clickable Buttons: 可点击的按钮控件\r\n        * Submit and Reset Button: 提交或者重置按钮控件\r\n    * action: 提交时发起HTTP请求的URI\r\n    * method:提交时发起HTTP请求的http方法\r\n        * GET: 通过URI, 将表单数据以URI参数的方式提交\r\n        * POST: 将表单数据放在请求包体中提交\r\n    * enctype: 在POST方法下, 对表单内容在请求包体中的编码方式\r\n        * application/x-www-form-urlencoded: 数据被编码成以\"&\"分隔的键-值对, 同时以\"=\"分隔键和值, 字符以URL编码方式编码\r\n        * multipart/form-data\r\n            * boundary分隔符\r\n            * 每部分表述皆有HTTP头部描述子包体, 例如Content-Type, Content-Disposition: form-data; name=\"xxx\"\r\n            * last boundary结尾\r\n* 多线程、断点续传、随机点播\r\n    * 步骤\r\n        1. 客户端明确任务: 从哪里开始下载\r\n            * 本地是否已有部分文件\r\n                * 文件已下载部分在服务端发生改变?\r\n            * 使用几个线程并发下载\r\n        2. 下载文件的指定部分内容\r\n        3. 下载完毕后拼装成统一的文件\r\n    * 相关头部\r\n        * Accept-Ranges: \"bytes\" / \"none\" 是否支持Range请求\r\n        * Range: \"bytes=\"DIG\"-\"DIG\r\n        * Content: 显示当前片段包体在完整包体中的位置\r\n### 持久化\r\n\r\n* Cookie: 通信状态保存在客户端的Cookie里\r\n* 相关头部\r\n        * Set-Coookie(S): SP set-cookie-string\r\n            * set-cookie-string = cookie-pair *(\";\"SP cookie-av)\r\n                * cookie-pair = cookie-name \"=\" cookie-value\r\n                * cookie-av = expires-av / max-age-av / domain-av / path-av / secure-av / httponly-av / extension-av\r\n                    * expires-av = \"Expires=\" sane-cookie-date\r\n                    * max-age-av = \"Max-Age=\" non-zero-digit *DIGIT\r\n                    * domian-av = \"Domain=\" domain-value\r\n                    * path-av = \"Path=\" path-value\r\n                    * secure-av = \"Secure\"\r\n                    * httponly-av = \"HttpOnly\"\r\n    * Cookie(C): OWS cookie-string OWS\r\n        * cookie-string = cookie-pair *(\";\"SP cookie-pair)\r\n            * cookie-pair = cookie-name \"=\" cookie-value\r\n* 无状态的REST架构VS状态管理\r\n    * 应用状态与资源状态\r\n        * 应用状态:应由客户端管理, 不应由服务器管理\r\n            * 如浏览器目前在哪一页\r\n            * REST架构要求服务器不应保存应用状态\r\n        * 资源状态: 应由服务器管理, 不应由客户端管理\r\n            * 如数据库中存放的数据状态\r\n    * HTTP请求的状态\r\n        * 有状态的请求: 服务器端保存请求的相关信息, 每个请求可以使用以前保留的请求相关信息\r\n            * 服务器session机制使服务器保存请求的相关信息\r\n            * cookie使请求可以携带查询信息, 与session配合完成有状态的请求\r\n        * 无状态的请求: 服务器能够处理的所有信息都来自当前请求所携带的信息\r\n            * 服务器不会保存session信息\r\n            * 请求可以通过cookie携带\r\n### 同源策略\r\n\r\n* 安全性与可用性的平衡点\r\n    * 可用性: HTML的创作者决定跨域请求是否对本站点安全\r\n        * <script><img><iframe><link><video><audio>带有src属性可以跨域访问\r\n        * 允许跨域写操作: 例如表单提交或者重定向请求\r\n            \r\n            * CSRF安全性问题\r\n    * 安全性: 浏览器需要放置沾点A的脚本向沾点B发起危险动作\r\n        * Cookie, LocalStorage和IndexDB无法读取\r\n        * DOM无法获得(防止跨域脚本篡改DOM结构)\r\n        * AJAX请求不能发送\r\n* CORS跨域\r\n    * 简单请求\r\n        * GET / HEAD / POST方法之一\r\n        * 仅能使用CORS安全的头部: Accept、Accept-Language、Content-Language、Content-Type\r\n        * Content-Type值只能是: text/plain、multipart/form-data、application/x-www-urlencoded三者其中之一\r\n    * 简单请求的跨域\r\n        * 请求中携带Origin头部告知来自哪个域\r\n        * 响应中携带Access-Control-Allow-Origin头部表示允许哪些域\r\n        * 浏览器放行(同源策略是浏览器行为, 能否跨域由浏览器决定)\r\n    * 复杂请求的跨域\r\n        * 预检请求头部\r\n            * Access-Control-Request-Method\r\n            * Access-Control-Request-Headers\r\n        * 预检请求响应\r\n            * Access-Control-Allow-Methods: 允许使用的方法\r\n            * Access-Control-Allow-Headers: 允许携带的头部\r\n            * Access-Control-Max-Age: 该响应的信息允许缓存多久\r\n            * Access-Control-Expose-Headers: 告知浏览器哪些响应头部可供客户端使用\r\n            * Access-Control-Allow-Origin: 告知浏览器允许哪些域访问当前资源, *表示所有域\r\n            * Access-Control-Allow-Credentials: 告知浏览器是否可以将Credentials暴露给客户端使用\r\n### 条件请求\r\n\r\n* 资源URI与资源表述\r\n    * 资源R可被定义为随时间变化的函数\r\n        * 静态资源: 创建后任何时刻都不变, 例如指定版本号的库文件\\\r\n        * 动态资源: 其值随时间而频繁地变化, 例如某新闻站点首页\r\n* 验证器: 根据客户端请求中携带的相关头部, 以及服务器资源的信息, 执行两端的资源验证\r\n    * 强验证器: 服务器上的资源表述只要有变动, 验证一定不过\r\n    * 弱验证器:服务器上资源变动时, 允许一定程度上可验证通过\r\n* 相关头部\r\n    * Etag(S)\r\n    * Last-Modified(S)\r\n    * If-Match(C)\r\n    * If-None-Match(C)\r\n    * If-Modified-Since(C)\r\n    * If-Unmodified-Since(C)\r\n    * If-Range(C)\r\n### 缓存\r\n\r\n* 私有缓存: 仅供一个用户使用的缓存, 通常只存在于如浏览器这样的客户端上\r\n* 共享缓存: 可以供多个用户的缓存, 存在于网络中负责转发消息的代理服务器(对二店资源常使用共享缓存, 以减轻源服务器的压力, 并提升网络效率)\r\n    * Authentication 响应不可被代理服务器缓存\r\n    * 正向代理\r\n    * 反向代理\r\n* 怎样的HTTP响应会缓存\r\n    * 请求方法可以被缓存理解(不只于GET方法)\r\n    * 响应码可以被缓存理解(404, 206也可以被缓存)\r\n    * 响应与请求的头部没有指明no-store\r\n    * 响应中至少含有以下头部中的1个或者多个\r\n        * Expires, max-age, s-maxge, public\r\n        * 当响应中没有明确指示过期时间的头部时, 如果响应码非常明确, 也可以缓存\r\n    * 如果缓存在代理服务器上\r\n        * 不含有private\r\n        * 不含有Authorization\r\n* 相关头部\r\n    * Cache-Control = 1#cache-directive\r\n        * cache-directive = token [\"=\" (token / quoted-string)]\r\n            * delta-seconds = 1*DIGIT\r\n        * 请求中的头部: max-age, max-stale, min-fresh, no-cache, no-store, no-transform, only-if-cached\r\n        * 响应中的头部: max-age, s-maxage, must-revalidate, proxy-revalidate, no-cache, no-stroe, no-transform, public, private\r\n    * Age(S): 表示自亚UN服务器发出响应, 到使用缓存的响应发出时经过的秒数\r\n    * Vary(S): 缓存中的Vary头部指定的头部必须与请求中的头部相匹配\r\n* 重定向\r\n    * 永久重定向\r\n        * 301\r\n        * 308\r\n    * 临时重定向\r\n        * 302\r\n        * 303\r\n        * 307\r\n    * 特殊重定向\r\n        * 300\r\n        * 304\r\n### 认证\r\n\r\n* 相关头部\r\n    * WWW-Authenticate(S)\r\n    * Authorization(C) = credentials\r\n        * credentials = auth-scheme [1*SP(token68 / #auth-param)]\r\n            * auth-scheme = token\r\n            * token68 = 1*(ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\") *\"=\"\r\n            * auth-param = token BWS \"=\" BWS (token / quoted-string)\r\n                * BWS = OWS\r\n                    * OWS = *(SP / HTAB)\r\n    * Proxy-Authorization(C) = credentials(代理服务器认证)\r\n    * Proxy-Authenticate(S): 代理服务器认证响应\r\n* 相关响应码\r\n    * 401 Unauthorized\r\n    * 407 Proxy Authentication Required\r\n    * 403 Forbidden\r\n### HTTP报文\r\n\r\n* ABNF定义\r\n    * HTTP-message = start-line *(header-field CRLF) CRLF [message-body]\r\n        * start-line = request-line / status-line\r\n            * request-line = method SP request-target SP HTTP-version CRLF\r\n                * request-target = origin-form / absolute-form / authority-form / asterisk-form\r\n                    * origin-form = absolute-path[\"?\"query]: 向origin server发起的请求, path为空时必须传递/\r\n                    * absolute-form = absolute-URI: 仅用于正向代理proxy发起请求时\r\n                    * authority-form = authority: 仅用于CONNECT方法, 例如CONNECT[www.example.com:80](http://www.example.com:80?fileGuid=9yTgWvccrk3xjHKp)HTTP/1.1\r\n                    * asterisk-form = \"*\": 仅用于OPTIONS方法\r\n            * status-line = HTTP-version SP status-code SP reason-phrase CRLF\r\n        * header-field = field-name \":\" OWS field-value OWS\r\n            * OWS = *(SP / HTAB)\r\n            * field-name = token\r\n            * field-value = *(field-content / obs-fold)\r\n        * message-body = *OCTET\r\n* 结构\r\n    * 请求\r\n        * 报文首部\r\n            * 请求行: 请求方式 路径 HTTP协议版本\r\n            * 请求首部字段\r\n            * 通用首部字段\r\n            * 实体首部字段\r\n            * 其它\r\n        * 报文主体\r\n    * 响应\r\n        * 报文首部\r\n            * 状态行: 协议版本 状态码 原因短语\r\n            * 响应首部字段\r\n            * 通用首部字段\r\n            * 实体首部字段\r\n            * 其他\r\n        * 报文主体\r\n* 状态行及请求行\r\n    * 请求方法\r\n        * 一般\r\n            * GET: 获取资源\r\n            * POST: 上传资源\r\n            * PUT: 更新资源\r\n            * DELETE： 删除资源\r\n            * HEAD: 获取资源的报文首部, 不发送响应体\r\n            * OPTIONS: 询问支持的请求方法\r\n            * CONNECT: 用隧道协议连接代理\r\n            * TRACE(过时): 追踪路径\r\n        * 用于文档管理的WEBDAV方法(RFC2518)\r\n            * PROPFIND: 从Web资源中检索以XML格式存储的属性. 它也被重载, 以允许一个检索远程系统的集合结构(也叫目录层次结构)\r\n            * PROPPATCH: 在单个原子性动作中更改和删除资源的多个属性\r\n            * MKCOL: 创建集合或目录\r\n            * COPY: 将资源从一个URI复制到另一个URI\r\n            * MOVE: 将资源从一个URI移动到另一个URI\r\n            * LOCK: 锁定一个资源. WebDAV支持共享锁和互斥锁\r\n            * UNLOCK: 解除资源的锁定\r\n    * 状态码\r\n        * 1xx: 信息状态码\r\n            * 100 Continue: 上传大文件使用\r\n            * 101 Switch Protocols: 协议升级使用\r\n            * 102 Processing: WebDAV请求可能包含许多涉及文件操作的子请求,需要长时间才能完成请求\r\n        * 2xx: 成功状态码\r\n            * 200 ok\r\n            * 201 Created: 有资源在服务器端被成功创建\r\n            * 202 Accepted: 请求未处理完成, 需要长时间处理\r\n            * 204 No Content: 不携带响应体\r\n            * 205 Reset Content: 不携带响应体, 且通知客户端更新页面视图\r\n            * 206 Partial Content: 使用range协议时返回部分响应内容时的响应码\r\n            * 207 Multi-Status: WebDAV协议中以XML返回多个资源的状态\r\n            * 208 Already Reported: 避免相同集合下的资源在207下重复上报\r\n        * 3xx: 重定向状态码\r\n            * 300 Multiple Choices: 资源有多重表述, 客户端自行选择访问哪一种表述\r\n            * 301 Moved Permanently: 永久重定向, 浏览器对永久性重定向直接缓存\r\n            * 302 Found: 临时重定向\r\n            * 303 See Other\r\n            * 304 Not Modified\r\n            * 307 Temporary Redirect： 类似302, 但明确请求方法与原请求方法相同\r\n            * 308 Permanent Redirect: 类似301, 但明确请求方法与原请求方法相同\r\n        * 4xx: 客户端错误状态码\r\n            * 400 Bad Request\r\n            * 401 Unauthorized\r\n            * 407 Proxy Authentication Required\r\n            * 403 Forbidden\r\n            * 404 Not Found\r\n            * 410 Gone\r\n            * 405 Method Not Allowed\r\n            * 406 Not Acceptable\r\n            * 408 Request Timeout\r\n            * 409 Conflict\r\n            * 411 Length Required\r\n            * 412 Precondition Failed\r\n            * 413 Payload Too Large\r\n            * 414 URI Too Long\r\n            * 415 Unsupported Media Type\r\n            * 416 Range Not Satisfiable\r\n            * 417 Expectation Failed\r\n            * 421 Misdirected Request\r\n            * 426 Upgrade Required\r\n            * 428 Precondition Required\r\n            * 429 Too Many Requests\r\n            * 431 Request Header Fields Too Large\r\n            * 451 Unavailable For Legal Reasons\r\n        * 5xx: 服务器错误状态码\r\n            * 500 Internal Server Error\r\n            * 501 Not Implemented\r\n            * 502 Bad Gateway\r\n            * 503 Service Unavailable\r\n            * 504 Gateway Timeout\r\n            * 505 HTTP Version Not Supported\r\n            * 507 Insufficient Storage\r\n            * 508 Loop Detected\r\n            * 511 Network Authentication Required\r\n* 首部\r\n    * 端到端首部\r\n    * 逐跳首部\r\n        * Connection\r\n        * Keep-Alive\r\n        * Proxy-Authenticate\r\n        * Proxy-Authorization\r\n        * Trailer\r\n        * TE\r\n        * Transfer-Encoding\r\n        * Upgrade\r\n    * 通用首部字段\r\n        * Cache-Controle: 控制缓存行为\r\n        * Connnection: 逐跳首部、连接的管理\r\n        * Proxy-Connection: 防止陈旧的代理服务器不识别Connection头部, 退化为短连接\r\n        * Date: 创建报文的日期时间\r\n        * Pragma: 报文指令\r\n        * Trailer: 报文末端的首部一览\r\n        * Transfer-Encoding: 报文主体的传输编码方式\r\n        * Upgrade: 升级为其他协议\r\n        * X-Forwarded-For: 用于传递IP\r\n        * Via: 代理服务器相关信息\r\n        * Warning: 错误通知\r\n    * 实体首部字段\r\n        * Allow: 资源可支持的HTTP方法\r\n        * Content-Encoding: 实体主体适用的编码方式\r\n        * Content-Language: 实体主体的自然语言\r\n        * Content-Length: 实体主体的大小(单位: 字节)\r\n        * Content-Location: 替代对应资源的URI\r\n        * Content-MD5: 实体主体的报文摘要\r\n        * Content-Range: 实体主体的位置范围\r\n        * Content-Type: 实体主体的媒体类型\r\n        * Content-Disposition: \"inline\" / \"attachment\" | disp-ext-type\r\n        * Expires: 实体主体过期的日期时间\r\n        * Last-Modified: 资源的最后修改日期时间\r\n    * 请求首部字段\r\n        * Accept： 用户代理可处理的媒体类型\r\n        * Accept-Charset: 优先的字符集\r\n        * Accept-Encoding: 优先的内容编码\r\n        * Accept-Language: 优先的语言(自然语言)\r\n        * Authorization: Web认证信息\r\n        * Expect: 期待服务器的特定行为\r\n        * From: 用户的电子邮箱地址\r\n        * Host: 请求资源所在服务器\r\n        * if-Match: 比较实体标记(Etag)\r\n        * if-None-Match: 比较实体标记(与if-Match相反)\r\n        * if-Modified-Since: 比较资源的更新时间\r\n        * if-Unmodified-Since:比较资源更新时间(与if-Modified-Since相反)\r\n        * if-Range: 资源未更新时发送实体Byte的范围请求\r\n        * Max-Forwards: 最大传输逐跳数\r\n        * Proxy-Authorization: 代理服务器要求客户端的认证信息\r\n        * Range: 实体的字节范围请求\r\n        * Referer: 对请求中的URI的原始获取方\r\n        * TE: 传输编码的优先级\r\n        * User-Agent: HTTP客户端程序的信息\r\n        * Cookie: 通信状态信息\r\n    * 响应首部字段\r\n        * Accept-Ranges: 是否接受字节范围请求\r\n        * Age: 推算资源创建经过时间\r\n        * ETag: 资源的匹配信息\r\n        * Location: 令客户端重定向至指定URI\r\n        * Proxy-Authenticate: 代理服务器对客户端的认证信息\r\n        * Retry-After: 对再次发起请求的时机要求\r\n        * Server: HTTP服务器的安装信息\r\n        * Vary: 代理服务器缓存的管理信息\r\n        * Set-Cookie: 通知客户端保存状态到Cookie里\r\n        * WWW-Authenticate: 服务器对客户端的认证信息\r\n        * Set-Cookie: 客户端需要保存的Cookie\r\n        * Cache-Control: no-transform: 禁止代理服务器修改响应体\r\n## HTTPS\r\n\r\n![图片](https://uploader.shimo.im/f/0UgXvsG6d4AqTWKh.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n\r\n## Websocket\r\n\r\n![图片](https://uploader.shimo.im/f/aGI3TBSHsBLcMyYw.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n\r\n* WebSocket的成本\r\n    * ![图片](https://uploader.shimo.im/f/BgnAnJwG0bnAFNFH.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 长连接的心跳保持\r\n    * ![图片](https://uploader.shimo.im/f/R11gvMinarNyp02r.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 兼容HTTP协议\r\n    * ![图片](https://uploader.shimo.im/f/4L1ejz1SoTfdnna7.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 设计哲学: 在Web约束下, 暴露TCP给上层\r\n    * ![图片](https://uploader.shimo.im/f/BReVyZh5ekJYCfvG.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 帧示意图\r\n    * ![图片](https://uploader.shimo.im/f/DtxRVZkLVcIqxQTd.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 数据帧格式: RSV保留值\r\n    * ![图片](https://uploader.shimo.im/f/7MYjyw5Vdtx3MLPx.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 数据帧格式: 帧类型\r\n    * ![图片](https://uploader.shimo.im/f/nuXcWXOrNTGQSA50.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* URI格式\r\n    * ![图片](https://uploader.shimo.im/f/RVynIrLefS1rnaWm.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 建立握手\r\n    * ![图片](https://uploader.shimo.im/f/LLqbWXXEIzGawUhn.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 如何证明握手被服务器接受\r\n    * ![图片](https://uploader.shimo.im/f/1qHwIqDC1JKukOM3.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 消息与数据帧\r\n    * ![图片](https://uploader.shimo.im/f/3lq26wD4lmYANiop.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 非控制帧的消息分片\r\n    * ![图片](https://uploader.shimo.im/f/yHoCyPhgsNtV2zL6.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 数据帧格式: 消息长度\r\n    * ![图片](https://uploader.shimo.im/f/EYtVmBkEA70iBVTZ.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 发送消息\r\n    * ![图片](https://uploader.shimo.im/f/cquCMgZmCUNwiwsv.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* 针对代理服务器的缓存污染攻击\r\n    * ![图片](https://uploader.shimo.im/f/mgMzPONSGeHNQbqq.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n* frame-masking-key掩码\r\n    * ![图片](https://uploader.shimo.im/f/z9z9yhODi89bre6C.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n## TCP/IP\r\n\r\n* 应用层: HTTP, DNS\r\n    * 若地址是域名则需要借助DNS协议从DNS服务器获得对应IP地址\r\n* 传输层\r\n    * 协议: TCP, UDP\r\n    * 逻辑: 将源数据拆成多个数据报, 并加上TCP首部. 通信之前, 先进行三次握手建立TCP连接(SYN, SYN/ACK, ACK), 通信完成后, 通过四次挥手断开TCP连接(FIN, ACK, FIN, ACK)\r\n* 网络层\r\n    * 协议: IP, ARP\r\n    * 逻辑: 给每份数据报加上IP首部(IP地址, MAC地址), 由路由表计算出对应的下一跳IP，根据此IP借助ARP协议广播并获得下一跳MAC地址\r\n* 链路层\r\n* 保存资源的缓存\r\n    * 缓存的有效期: 过期后会向服务器确认资源的有效性, 若缓存失效则请求信资源统计数据\r\n    * 分类\r\n        * 缓存代理\r\n        * 客户端缓存: 临时网络文件\r\n* Web攻击技术\r\n    * 主动攻击\r\n        * SQL注入\r\n        * OS命令注入\r\n    * 被动攻击\r\n        * 跨站脚本攻击(XSS)\r\n        * 跨站点请求伪造(CSRF)\r\n## Web架构\r\n\r\n### 关键属性\r\n\r\n* 性能\r\n* 可伸缩性\r\n* 简单性\r\n* 可见性\r\n* 可移植性\r\n* 可靠性\r\n* 可修改性\r\n### 架构风格\r\n\r\n* 数据流风格 Data-flow Styles\r\n    * 管道与过滤器 Pipe And Filter, PF\r\n    * 统一接口的管道与过滤器 Uniform Pipe And Filter, UPF\r\n* 复制风格 Replication Styles\r\n    * 复制仓库 Replicated Repository, RR\r\n    * 缓存 $\r\n* 分层风格 Hierarchical Styles\r\n    * 客户端服务器 Client-Server, CS\r\n    * 分层系统 Layered System, LS\r\n    * 分层客户端服务器 Layered Client-Server, LCS\r\n    * 无状态、客户端服务器 Client-Stateless-Server CSS\r\n    * 缓存、无状态、客户端服务器 Client-Cache-Stateless-Server C$SS\r\n    * 分层、缓存、无状态、客户端服务器 Layered-Client-Cache-Stateless-Server, LC$SS\r\n    * 远程会话 Remote Session, RS\r\n    * 远程数据访问 Remote Data Access, RDA\r\n* 移动代码风格 Mobile Code Styles\r\n    * 虚拟机 Virtual Machine, VM\r\n    * 远程求值 Remote Evaluation, REV\r\n    * 按需代码Code on Demand, COD\r\n    * 分层、按需代码、缓存、无状态、客户端服务器 LCODC$SS\r\n    * 移动代理 Mobile Agent, MA\r\n* 点对点风格 Peer-toPeer Styles\r\n    * Event-based Integration, EBI\r\n    * Chiron-2, C2\r\n    * Distributed Objects, DO\r\n    * Brokered Distributed Objects, BDO\r\n* 其他风格\r\n    * 面向服务架构 Service Oriented Architecture, SOA\r\n### REST架构风格演化\r\n\r\n![图片](https://uploader.shimo.im/f/Qc9l7Qu2MTfqMMJd.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n\r\n## 浏览器\r\n\r\n用户界面\r\n\r\n浏览器引擎(查询和操作渲染引擎)\r\n\r\n渲染引擎(负责解析、渲染请求的内容)\r\n\r\n轻量级存储库\r\n\r\n网络\r\n\r\nJS解释器\r\n\r\nUI后端\r\n\r\n* 浏览器加载时间\r\n    * 解析HTML结构\r\n    * 加载外部脚本和样式表文件\r\n    * 解析并执行脚本代码 // 部分脚本会阻塞页面的加载\r\n    * DOM树构建完成 // DOMContentLoaded事件\r\n    * 加载图片等外部文件\r\n    * 页面加载完毕 // load事件\r\n* 浏览器的功能模块\r\n    * 浏览器主进程\r\n        * 下载资源\r\n        * 管理IPC\r\n        * 显示渲染进程生成的图片\r\n        * 用户交互\r\n        * 提供存储功能\r\n    * 渲染进程: 沙箱机制\r\n        * 解析\r\n        * 渲染(排版引擎Blink)\r\n        * Js执行(Js引擎V8)\r\n        * 合成网页图片\r\n    * 插件进程: 部分系统支持\r\n        * 插件运行\r\n    * Chrome基础服务\r\n        * 网络进程: 沙箱机制\r\n            * 网络资源加载\r\n        * GPU进程: 部分系统支持\r\n            * 初衷实现3D CSS效\r\n        * Profile进程: 沙箱机制\r\n        * UI进程: 沙箱机制\r\n        * 文件进程\r\n        * 设备进程: 沙箱机制\r\n        * Audio进程: 沙箱机制\r\n        * Video进程: 沙箱机制\r\n* 导航流程\r\n    1. 用户输入并回车, 浏览器进程检查URI, 组装协议构成完整URI\r\n    2. 浏览器进程通过进程间通信(IPC)把URI发送给网络进程\r\n    3. 网络进程接收到URI后检查本地缓存是否缓存了与该URI映射的资源, 若有返回资源给浏览器进程, 若没有则发起HTTP请求\r\n    4. 根据URI进行DNS解析获取IP地址\r\n    5. 根据IP地址和服务器建立TCP连接\r\n    6. 构建请求头信息并发送HTTP请求\r\n    7. 服务器响应后, 网络进程接收HTTP响应并解析\r\n    8. 若状态码是300重定向, 则从Location获取新的URI重复上述过程, 若是200则继续处理\r\n    9. 将解析后的响应头交付给浏览器进程\r\n    10. 浏览器进程检查Content-Type是否是字节流类型, 若是则直接下载, 若不是则准备新的渲染进程\r\n    11. 渲染进程准备完毕后浏览器进程向渲染进程发送\"提交文档消息\"\r\n    12. 渲染进程接收到\"提交文档消息\"后与网络进程建立传输数据的管道\r\n    13. 渲染进程接收完响应体后向浏览器进程发送\"确认提交消息\"\r\n    14. 浏览器收到\"确认提交消息\"后更新浏览器界面状态: 安全、地址栏URI、前进后退的历史状态、更新web页面\r\n    15. 渲染进程根据响应体进行页面解析和资源加载\r\n* 渲染管线\r\n    * 构建DOM树\r\n        * HTML解析器解析\r\n    * 样式计算\r\n        * 转化成styleSheet\r\n        * 标准化属性值\r\n        * 计算出DOM树每个节点具体样式(CSS继承规则和层叠规则)保存到ComputedStyle中\r\n    * 布局阶段\r\n        * 遍历DOM树中的所有可见节点与ComputedStyle, 并加入到布局树中\r\n    * 分层\r\n        * 根据布局树以及其层叠上下文属性进行分层, 生成分层树\r\n    * 绘制\r\n        * 由分层树确立绘制表并交由合成分线程\r\n    * 分块\r\n        * 根据视口及图层大小进行分块\r\n    * 光栅化\r\n        * 生成位图\r\n    * 合成\r\n* V8垃圾回收机制\r\n    * 栈: 移动esp指针回收\r\n    * 堆: 标记->清除->整理or增量标记算法\r\n        * 新生代\r\n            * 对象区\r\n            * 空闲区\r\n        * 老生代\r\n# 抓包\r\n\r\n## Chrome的network\r\n\r\n* 过滤器: 属性过滤\r\n    * domain: 仅显示指定域的资源\r\n    * has-response-header: 显示包含指定HTTP响应头的资源\r\n    * is: 使用is:running可以查找WebSocket资源, is:from-cache可查找缓存读出的资源\r\n    * larger-than: 显示大于指定大小的资源(以字节为单位)\r\n    * method: 显示通过指定HTTP方法类型检索的资源\r\n    * mime-type: 显示指定MIME类型的资源\r\n    * mixed-content: 显示所有混合内容资源\r\n    * scheme: 显示通过为保护HTTP或受保护HTTPS检索的资源\r\n    * set-cookie-domain: 显示具有Set-Cookie响应头且Domain属性与指定资源匹配的资源\r\n    * set-cookie-name: 显示具有Set-Cookie响应头且名称与指定值匹配的资源\r\n    * set-cookie-value: 显示具有Set-Cookie响应头且值与指定值匹配的资源\r\n    * status-code: 仅显示HTTP状态代码与指定代码匹配的资源\r\n* 请求时间详细分布\r\n    * Queueing: 浏览器在以下情况下对请求排队\r\n        * 存在更高优先级的请求\r\n        * 此源已打开六个TCP连接, 达到限值, 仅适用于HTTP1.0/HTTP1.1\r\n        * 浏览器正在短暂分配磁盘缓存中的空间\r\n    * Stalled: 请求可能会因Queueing中描述的任何原因而停止\r\n    * DNS Lookup: 浏览器正在解析请求的IP地址\r\n    * Proxy Negotiation: 浏览器正在与代理服务器协商请求\r\n    * Request sent: 正在发送请求\r\n    * ServiceWorker Preparation: 浏览器正在启动Service Worker\r\n    * Request to ServiceWorker:正在将请求发送到Service Worker\r\n    * Waiting(TTFB): 浏览器正在等待响应的第一个字节。包括1次往返延迟时间及服务器准备响应所用的时间\r\n    * Content Download: 浏览器正在接收响应\r\n    * Receiving Push: 浏览器正在通过HTTP/2 服务器推送接收此响应的数据\r\n    * Reading Push: 浏览器正在读取之前收到的本地数据\r\n## Wireshark\r\n\r\n* 捕获过滤器(BPF过滤器)\r\n    * Primitives原语: 由名称或数字, 以及描述它的多个限定词组成\r\n        * qualifiers限定词\r\n            * Type: 设置数字或者名称所指示类型 host[www.baidu.com](http://www.baidu.com?fileGuid=9yTgWvccrk3xjHKp)\r\n            * Dir: 设置网络出入方向 dst port 80\r\n            * Proto: 指定协议类型 udp\r\n            * 其他\r\n        * 原语运算符\r\n            * 与: &&或者and\r\n            * 或: ||或者or\r\n            * 非: !或者not\r\n* 显示过滤器\r\n## Tcpdump\r\n\r\n## Xshell\r\n\r\n* telnet\r\n* curl\r\n\r\n# 网络模型\r\n\r\n## OSI模型\r\n\r\n* 应用层\r\n    * DNS, WWW/HTTP, P2P, EMAIL/POP, SMTP, Telnet, FTP\r\n* 表示层\r\n    * Recongnizing: HTML, DOC, JPEG, MP3, AVI, Sockets\r\n* 会话层\r\n    * Session establishment in TCP, SIP, RTP, RPC-Named pipes\r\n* 传输层\r\n    * TCP, UDP, SCTP, SSL, TLS\r\n* 网络层\r\n    * IP, ARP, IPsec, ICMP, IGMP, OSPF\r\n* 数据链路层\r\n    * Ethernet, 802.11, MAC/LLC, VALN, ATM, HDP, Fibre Channel, Frame Relay, HDLC, PPP, Q.921, Toekn Ring\r\n* 物理层\r\n    * RS-232, RJ45, V.34, 100BASE-TX, SDH, DSL, 802.11\r\n## TCP/IP模型\r\n\r\n* 应用层\r\n    * 协议: HTTP, SMTP, Telnet, FTP, DNS, RIP, SNMP\r\n    * 报文: 应用层协议 | Data\r\n* 传输层\r\n    * 协议: TCP, UDP\r\n    * 报文段: TCP | Data\r\n* 网络层\r\n    * 协议: IP, ARP, IGMP, ICMP\r\n    * 数据包: IP | TCP+Data\r\n* 数据链路层\r\n    * 协议: Ethernet, Token Ring, ATM, Frame Relay\r\n    * 数据帧: MAC | TCP+IP+Data | FCS*\r\n* 物理层\r\n    * 协议: RS-232, RJ45, V.34, 100BASE-TX, SDH, DSL, 802.11\r\n    * Bit流\r\n# URI\r\n\r\n* ABNF定义\r\n    * URI = scheme \":\" hier-part [\"?\" query] [\"#\" fragment]\r\n        * sheme = ALPHA *(ALPHA / DIGIT / \"+\" / \"-\" / \".\")\r\n        * query = *(pchar / \"/\" / \"?\")\r\n        * fragment = *(pchar / \"/\" / \"?\")\r\n        * hier-part = \"//\" authority path-abempty / path-absolute / path-rootless / path-empty\r\n            * authority =  [userinfo \"@\"] host [\":\" port]\r\n                * userinfo = *(unreserved / pct-encoded / sub-delims / \":\")\r\n                * host = IP-literal / IPv4address / reg-name\r\n                * port = *DIGT\r\n            * path = path-abempty / path-absolute / path-noscheme / path-rootless / path-empty\r\n                * path-abempty = *(\"/\" segment)\r\n                * path-absolute = \"/\"[segment-nz *(\"/\" segment)]\r\n                * path-noscheme = segment-nz-nc *(\"/\" segment)\r\n                * path-rootless = segment-nz *(\"/\" segment)\r\n                * path-empty = 0<pchar>\r\n* URI编码\r\n    * 对可能产生歧义性的数据编码\r\n        * 不在ASCII码范围内的字符\r\n        * ASCII码中不可显示的字符\r\n        * URI中规定的保留字符\r\n        * 不安全字符(传输环节中可能会被不正确处理), 如空格、引号、尖括号等\r\n    * 保留字符\r\n        * reserved = gen-delims / sub-delims\r\n            * gen-delims = \":\" / \"/\" / \"?\" / \"#\" / \"[\" / \"]\" / \"@\"\r\n            * sub-delims = \"!\" / \"$\" / \"&\" / \"\'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" \"=\"\r\n        * unreserved = ALPHA / DIGT / \"-\" / \".\" / \"_\" / \"~\"\r\n            * ALPHA: %41-%5A and %61-%7A\r\n            * DIGIT: %30-%39\r\n            * -: %2D\r\n            * .: %2E\r\n            * _: %5F\r\n            * ~: %7E\r\n# ABNF(扩充巴科斯-瑙尔范式)操作符\r\n\r\n## 语法\r\n\r\n* 空白字符: 用来分隔定义中的各个元素\r\n* 选择/: 表示多个规则都是可供选择的规则\r\n* 值范围%c##-##: 表取值范围\r\n* 序列组合(): 将规则组合起来, 视为单个元素\r\n* 不定量重复m*n\r\n    * *元素表示零个或更多元素\r\n    * n*表示n个或更多元素\r\n    * m*n表示m个至n个元素\r\n* 可选序列[]: 可有可无的元素\r\n## 映射规则\r\n\r\n![图片](https://uploader.shimo.im/f/nJkNXz9ttjd61d4v.png!thumbnail?fileGuid=9yTgWvccrk3xjHKp)\r\n\r\n', 1, '2021-04-29 12:33:59', '2021-04-29 12:34:01');
INSERT INTO `article` VALUES (14, 'GASP', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/14.png', NULL, '状态过渡的库', '- gsap\r\n   - timeline(options)\r\n      - options\r\n         - repeat\r\n         - yoyo\r\n   - set(target, options)\r\n   - from(target, options)\r\n   - to(target, options)\r\n      - obj\r\n         - querySelectorString\r\n         - obj\r\n         - array\r\n      - options\r\n         - duration\r\n         - delay\r\n         - ease: back, elastic, bounce, rough, slow, steps, circ, expo, sine, 自定义\r\n         - stagger\r\n         - onUpadate\r\n         - attributes: value || func\r\n- tween\r\n   - play()\r\n   - pause()\r\n   - seek()\r\n   - progress()\r\n   - reverse()\r\n   - timeScale()\r\n', 1, '2021-04-29 12:35:01', '2021-04-29 12:35:03');
INSERT INTO `article` VALUES (15, 'React', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/15.png', NULL, 'React索引', '# React\r\n\r\n## 概念\r\n\r\n* 组件化\r\n* 声明式\r\n* 虚拟DOM+Diffing算法\r\n## 脚手架\r\n\r\n* 核心库\r\n    * react.development.js: 核心库\r\n    * react-dom.development.js: 操作DOM的扩展库\r\n    * [prop-types.min.js](https://unpkg.com/prop-types@15.6/prop-types.min.js?fileGuid=gtdTjCkTgwYDxkqT): 用于props类型限制的扩展库\r\n    * react-router-dom: web路由库\r\n    * babel.min.js: 用于编译JSX的Babel\r\n* 搭建\r\n    * npm i create-react-app -g\r\n    * create-react-app my-app\r\n    * npm start, npm build, npm test, npm eject\r\n    * index.html\r\n        * %PUBLIC_URL%: 表示public文件夹路径\r\n    * 脚手架代理配置\r\n        * 方法一: package.json中设置proxy字段\r\n        * 方法二: 创建setupProxy.js文件\r\n```javascript\r\nconst proxy = require(\"http-proxy-middleware\");\r\nmodule.exports = function (app) {\r\n  app.use(\r\n    proxy(\"/api1\", {\r\n      target: \"http://localhost:5000\",\r\n      changeOrigin: true,\r\n      pathRewrite: { \"^/api1\": \"\" },\r\n    }),\r\n    proxy(\"/api2\", {\r\n      target: \"http://localhost:5001\",\r\n      changeOrigin: true,\r\n      pathRewrite: { \"^/api2\": \"\" },\r\n    })\r\n  );\r\n};\r\n```\r\n## 组件实例三大属性\r\n\r\n* state\r\n    * 用setState()更新后重新渲染虚拟DOM, 分对象式和函数式\r\n* props\r\n    * propTypes: 类型, 必要性限制\r\n    * defaultProps: 默认值设置\r\n    * 标签体的内容是children属性值接收\r\n    * 传输标签体内容可用renderProps(携带数据)或childrenProps\r\n* refs\r\n    * 字符串形式(过时)\r\n    * 回调函数\r\n    * createRef\r\n## 受控组件与非受控组件\r\n\r\n* 受控组件: 状态由祖先维护\r\n* 非受控组件: 状态由自己维护\r\n## 高阶函数与函数柯里化\r\n\r\n* 高阶函数\r\n    * 1.若A函数接收参数是一个函数, 那么A就可以称之为高阶函数\r\n    * 2.若A函数, 调用的返回值依然是一个函数, 那么A就可以称之为高阶函数\r\n* 函数柯里化: 函数调用继续返回函数, 实现多次接收参数最后统一处理的函数编码方式\r\n## 高阶组件\r\n\r\n* 本质就是一个函数\r\n* 接收一个组件(被包装组件), 返回一个新的组件(包装组件), 包装组件会向被包装组件传入特定属性\r\n* 作用: 扩展组件功能\r\n## 纯函数\r\n\r\n* 一类特别的函数: 只要是同样的输入(实参), 必定得到同样的输出\r\n* 必须遵守以下一些约束\r\n    * 不得改写参数数据\r\n    * 不会产生任何副作用, 例如网络请求, 输入和输出设备\r\n    * 不能调用Date.now()或者Math.random()等不纯的方法\r\n## 生命周期![图片](https://uploader.shimo.im/f/E7h19DFSVwqt9hO8.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)![图片](https://uploader.shimo.im/f/ScbViKvm3kALdKgg.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n\r\n* 阶段\r\n    * 初始化阶段: 由ReactDOM.render()触发---初次渲染\r\n        * constructor()\r\n        * static getDerivedStateFromProps()\r\n        * render()\r\n        * componentDidMount()\r\n    * 更新阶段: 由组件内部this.setState()或父组件重新render触发\r\n        * static getDerivedStateFromProps()\r\n        * shouldComponentUpdate()\r\n        * render()\r\n        * getSnapshotBeforeUpdate()\r\n        * componentDidUpdate()\r\n    * 卸载组件: 由ReactDOM.unmountComponentAtNode()触发\r\n        * componentWillUnmount()\r\n    * 组件出错\r\n        * static getDerivedStateFromError()\r\n        * componentDidCatch()\r\n* 涉及函数\r\n    * forceUpdate(): 强制更新\r\n    * componentDidMount()\r\n    * componentDidUpdate()\r\n    * componentWillUnmount()\r\n    * shouldComponentUpdate()\r\n    * getDerivedStateFromProps()\r\n    * getSnapshotBeforeUpdate()\r\n## Diffing算法\r\n\r\n* 本质: 两个不同的数据结构->做了哪些操作\r\n* 旧虚拟DOM找到了与新虚拟DOM相同的key\r\n    * 若虚拟DOM中内容不变, 直接使用之前的真实DOM\r\n    * 若虚拟DOM中内容变了, 则生成新的真实DOM, 随后替换掉页面中之前的真实DOM\r\n* 旧虚拟DOM中未找到与新虚拟DOM相同的key\r\n    * 根据数据创建新的真实DOM, 随后渲染到页面\r\n## 路由\r\n\r\n* 内置组件\r\n    * BrowserRouter组件![图片](https://uploader.shimo.im/f/MLY8jDTBFqYZ3fcM.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)![图片](https://uploader.shimo.im/f/7NgINePqSKuhMb3L.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n    * HashRouter组件\r\n    * Link组件: 路由跳转组件\r\n    * NavLink组件: 路由跳转组件升级版\r\n    * Switch组件: 路由唯一匹配组件\r\n    * Route组件: 路由注册组件![图片](https://uploader.shimo.im/f/vq1977ufTEOexXf3.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n    * Redirect组件: 重定向组件![图片](https://uploader.shimo.im/f/5HuL9xV8RnZyzokd.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n* 传参\r\n    * params传参![图片](https://uploader.shimo.im/f/dEovx7wF2UvuZ0hl.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n    * search传参![图片](https://uploader.shimo.im/f/0WQt71Of1a7DGYyl.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n    * state传参![图片](https://uploader.shimo.im/f/dsDLAxftOQtthzxR.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n* 编程式路由导航\r\n    * Route组件中的this.props.history\r\n        * replace()\r\n        * push()\r\n    * 非Route组件用withRouter()改造成Route组件\r\n## 状态管理\r\n\r\n* 原理图![图片](https://uploader.shimo.im/f/BGxUfNG9OLiNAKNc.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)![图片](https://uploader.shimo.im/f/lfX3G2aZN9gvTSmd.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n* 三个核心概念\r\n    * action\r\n        * type\r\n        * data\r\n    * reducer\r\n        * 用于初始化状态, 加工状态\r\n        * 加工时, 根据旧的state和action, 产生新的state的纯函数\r\n    * store\r\n        * 将state, action, reducer联系在一起的对象\r\n* 容器组件与UI组件\r\n    * react-redux模块下的connect()(UI组件)可创造出容器组件\r\n* Provider组件\r\n    * 能给后代组件中的所有容器组件传递store状态\r\n## Hooks\r\n\r\n* 服用\r\n* 目录结构\r\n    * public\r\n        * favicon.ico: 网页图标\r\n        * index.html\r\n    * src\r\n        * tool: 存放工具js文件的文件夹\r\n        * remoteApi: 存放服务端api的文件夹\r\n        * localApi: 存放本地api的文件夹\r\n        * component: 存放通用组件\r\n        * page: 存放各种组件文件夹, 组件文件夹由index.jsx, index.scss, asset文件夹构成, asset文件夹存放视频, 图片, 文本等\r\n        * index.js: 项目启动后运行的入口函数, 用ReactDOM.render()函数进行根React元素的DOM挂载, 根组件通常用BrowserRouter组件包裹用以提供路由相关的全局状态和副作用函数![图片](https://uploader.shimo.im/f/iyGZi6qEJcXT8Yta.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n        * index.scss: 全局css![图片](https://uploader.shimo.im/f/54d0RZ0kCTsEqCpj.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n        * App.jsx: 根组件\r\n        * App.scss: 根组件的css\r\n* 模块\r\n    * react\r\n        * 类\r\n            * *React\r\n                * 静态\r\n                    * createElement(类型[, 属性[, 子组件...]]): 创建React元素, 可用jsx语法简写![图片](https://uploader.shimo.im/f/wgke2do4yH6LyclA.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n                        * jsx语法\r\n                            * 标签中混入JS表达式要用{}\r\n                            * 样式的类名指定不要用class, 要用className\r\n                            * 内联样式style接收对象\r\n                            * 属性用驼峰命名法\r\n                            * 虚拟DOM只能有一个根标签\r\n                            * 标签必须闭合\r\n                            * 首字母大写的标签<=>React组件\r\n                            * 标签的属性可以用展开对象语法...\r\n                    * createContext(初始值): 返回一个Context对象\r\n                    * Fragment组件: 减少不必要的嵌套\r\n            * Context\r\n                * 构造\r\n                    * React.createContext(初始值)![图片](https://uploader.shimo.im/f/cQ9MLy0yZmRknwWc.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n                * 原型\r\n                    * Provider组件: 为后代组件提供全局状态和副作用函数, 参数value提供全局状态和副作用函数, 参数children为子组件![图片](https://uploader.shimo.im/f/n2DG94hNLgwrtxD6.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n        * 函数\r\n            * -useState(初始化参数): 返回一个数组, 数组第一个元素为状态值, 第二元素为改变状态值的方法![图片](https://uploader.shimo.im/f/YILe6Av0TfEwLOqL.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT), 改变状态的方法接收参数为值或一个回调函数, 这个回调函数的参数为现在的状态值, 返回值为要赋的值![图片](https://uploader.shimo.im/f/4W6BtvRqW8DUgYPX.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n            * -useReducer(reducer, 默认值): 返回一个数组, 数组第一个元素为状态值, 第二个元素为改变状态值的dispatch, 可替代useState\r\n            * -useContext(Context对象): 返回Context对象的先代Provider组件提供的全局状态和副作用函数\r\n            * useRef(初始值): 返回ref\r\n            * -useEffect(回调函数[, 监听状态数组]): 每次组件渲染后触发, 返回值为组件卸载时触发的函数![图片](https://uploader.shimo.im/f/AJ0eXMafwMdtgk5C.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT), 监听状态数组把触发时机改为指定状态改变后触发, 若为空数组[]则只在第一次渲染和卸载时触发\r\n            * -useLayoutEffect(回调函数[, 监听状态数组]): 同useEffect, 但调用时机不同, useEffect在浏览器渲染完成后调用, useLayoutEffect在浏览器渲染完成前调用\r\n    * react-dom\r\n        * 类\r\n            * *ReactDOM\r\n                * 静态\r\n                    * render(React元素, DOM元素): 渲染React元素到DOM元素上\r\n                    * unmountComponentAtNode(DOM元素)\r\n    * react-router-dom(需额外安装)\r\n        * 函数\r\n            * -BrowserRouter组件: 包裹在根组件外提供路由相关的全局状态与副作用函数![图片](https://uploader.shimo.im/f/6Y9tc0yr6f1eCkJj.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n            * -HashRouter组件: 与BrowserRouter组件不同在于HashRouter组件利用的时锚点\r\n            * -Switch组件: 唯一路由匹配组件, 包裹在Route组件和Redirect组件外\r\n            * -Route组件: 参数path为匹配路径, 参数component为匹配组件, 会给component指定组件传递三个路由参数\r\n                * history\r\n                    * go(数值):\r\n                    * goBack(): 路由后退一步\r\n                    * goForward(): 路由前进一步\r\n                    * push(路由[, 传参]): 跳转到指定路由, 可进行传参\r\n                    * replace()\r\n                * location\r\n                    * pathname\r\n                    * search\r\n                    * state\r\n                * match\r\n                    * params\r\n                    * path\r\n                    * url\r\n            * -Redirect组件:参数to为重定向路径\r\n            * -withRouter(组件): 将指定组件赋予三个路由参数\r\n## 懒加载\r\n\r\n## Context\r\n\r\n* 编译插件时用的多, React.createContex()返回一个Context对象, Context对象中有Provider组件和Consumer组件, Provider组件有value属性, Consumer的children是一个回调函数(value) => {}![图片](https://uploader.shimo.im/f/MrZzXJAhXtvrKIxW.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n## Fragment\r\n\r\n* 替代组件最外层div的组件, 编译时自动去除\r\n## PureComponent\r\n\r\n* 组件不再继承Component而继承PureComponent使得组件只有在state和props发生改变时才会调用render()\r\n## ErrorBoundary\r\n\r\n* 处理错误的生命周期函数\r\n    * static getDerivedStateFromError(error) { return {} }\r\n        * 出错时调用, 传入错误信息, 返回一个对象更新state, 一般更新hasError这个状态\r\n    * componentDidCatch()\r\n        * 出错时调用, 一般用于出错次数\r\n## 组件通信\r\n\r\n* 父子组件props通信\r\n* 兄弟组件redux, pub-sub通信\r\n* 祖孙组件redux, pub-sub, Context通信\r\n## SPA\r\n\r\n* 单页面Web应用(single page web application, SPA)\r\n* 整个应用只有一个完整的页面\r\n* 点击页面中的链接不会刷新页面, 只会做页面的局部更新\r\n* 数据都需要通过ajax请求获取, 并在前端异步展现\r\n# API\r\n\r\n## react模块\r\n\r\n* export default\r\n    * React类\r\n        * 静态成员\r\n            * Component类\r\n                * 属性\r\n                    * protect obj state: 组件状态\r\n                    * protect obj props: 父组件传递的属性\r\n                    * static obj contextTypes: 声明上下文的类型, 而后此组件可接收到this.context\r\n                    * static obj propTypes: 声明接收props的类型约束\r\n                    * static obj defaultProps: 对props设定默认值\r\n                * 方法\r\n                    * public abstract ReactElement render()\r\n                    * protect void setState(obj | obj (state, props), , void ()?)\r\n                    * protect void forceUpdate()\r\n                    * void componentDidMount()\r\n                    * void componentDidUpdate(obj/*之前的props*/, obj/*之前的state*/, obj/*snapshotValue*/)\r\n                    * void componentWillUnmount()\r\n                    * bool shouldComponentUpdate()\r\n                    * static getDerivedStateFromProps()\r\n                    * static getDerivedStateFromError()\r\n                    * componentDidCatch()\r\n                    * getSnapshotBeforeUpdate()\r\n            * ReactElement createElement(React.Component | string/*所渲染的父组件(组件对象或标签名)*/, obj/*属性节点*/, ReactElement | string?/*渲染成DOM元素的子组件(DOM元素或文本值)*/)\r\n            * createContext(string/*默认值*/): 创建Context对象, Context对象中含有Provider组件和Consumer组件, Provider组件可接收value作为参数, Consumer的children是一个回调函数(value) => {}![图片](https://uploader.shimo.im/f/MrZzXJAhXtvrKIxW.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n            * createRef(): 创建一个Ref对象, 可传递给标签中的ref属性\r\n            * lazy(): 懒加载函数\r\n            * useState(): 传入所要赋的值, 返回数组, 含状态与更新状态的方法, 更新状态的方法参数可以为值或回调函数![图片](https://uploader.shimo.im/f/h8u0GwA9GQDFrNKS.png!thumbnail?fileGuid=gtdTjCkTgwYDxkqT)\r\n            * useEffect(): 传入回调函数和数组, 若不传数组则所有状态都监测, 传入空数组则表示componentdidMount和componentWillUnmount周期函数, 数组里包含了要监测的状态\r\n            * useRef(): 返回ref\r\n* export\r\n    * Component类\r\n    * PureComponent类\r\n    * Suspense类 extends React.Component: 包裹在懒加载组件外面\r\n        * props: fallback\r\n    * Fragment类 extends React.Component: 替代每个组件最外层的div标签\r\n        * props: key\r\n## react-dom模块\r\n\r\n* export default\r\n    * ReactDOM类\r\n        * 静态成员\r\n            * void render(ReactElement/*被挂载元素*/, HTMLElement/*挂载元素*/)\r\n            * void unmountComponentAtNode(HTMLElement/*卸载元素*/)\r\n## react-router-dom模块\r\n\r\n* export\r\n    * BrowserRouter类 extends React.Component\r\n        * props: children\r\n    * HashRouter类 extends React.Component\r\n        * props: children\r\n    * Link类 extends React.Component\r\n        * props: children, to, replace, className\r\n    * NavLink类 extends React.Component\r\n        * props: children, to, replace, className, activeClassName\r\n    * Switch类 extends React.Component\r\n        * props: children\r\n    * Route类 extends React.Component\r\n        * props: path, component, exact\r\n        * 会给component组件传递三个固定属性\r\n            * history\r\n                * go()\r\n                * goBack()\r\n                * goForward()\r\n                * push()\r\n                * replace()\r\n            * location\r\n                * pathname\r\n                * search\r\n                * state\r\n            * match\r\n                * params\r\n                * path\r\n                * url\r\n    * Redirect类 extends React.Component\r\n        * props: to\r\n    * withRouter(): 改造非Route组件为Route组件\r\n## redux模块\r\n\r\n* export\r\n    * createStore((preState, { type, data }) => {}, Middleware对象) | reducers: 接收reducer函数或合并过的reducer函数, Middleware对象, 返回Store对象\r\n    * applyMiddleware(middleware): 接收中间件, 返回Middleware对象\r\n    * combineReducers({...reducers}): 返回一个合并过的reducer函数\r\n* Store类\r\n    * getState()\r\n    * dispatch()\r\n    * subscribe()\r\n## redux-thunk模块\r\n\r\n## redux-devtools-extension模块\r\n\r\n* export\r\n    * composeWithDevTools(): 接收Middleware对象, 返回Middleware对象\r\n## react-redux模块\r\n\r\n* export\r\n    * connect(mapStateToProps函数, mapDispatchToProps函数 | mapDispatchToProps对象)(UI组件): 容器组件\r\n    * Provider类 extends React.Component\r\n        * props: store\r\n## PropTypes类\r\n\r\n### 静态成员\r\n\r\n* string, number, func, isRequired\r\n## Context类\r\n\r\n### 静态成员\r\n\r\n* Provider\r\n# 库\r\n\r\n* dart-sass\r\n* react-markdown\r\n    * export default ReactMarkdown({ source: markdown文本, escapeHtml: 是否进行html转换 })\r\n* markdown-navbar\r\n    * import \"markdown-navbar/dist/navbar.css\"\r\n    * export default MarkNav({ className: 类名, source: markdown文本, ordered: 是否有编号 })\r\n', 8, '2021-04-29 12:35:29', '2021-04-29 12:35:31');
INSERT INTO `article` VALUES (16, 'Vue', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/16.png', NULL, 'Vue索引', '# 业务\r\n\r\n* 动画\r\n* 色彩\r\n    * 背景色\r\n        * 高平面: 255,255,255\r\n        * 低平面: 242,242,242\r\n        * 选取背景: 242,248,255\r\n    * 文本色\r\n        * scrollbar: 214,215,221\r\n        * placeholder: 141,158,167\r\n        * 未选取文本: 92,106,115\r\n        * 文本: 65,80,88\r\n        * 选取文本: 47,142,245\r\n* 组件\r\n    * 可扩展组件![图片](https://uploader.shimo.im/f/En7mgDWVQBTbINIk.png!thumbnail?fileGuid=pDqwjTKJxjCVr3wT)\r\n    * 弹出框组件![图片](https://uploader.shimo.im/f/2sLhbN2b4BY6wuBV.png!thumbnail?fileGuid=pDqwjTKJxjCVr3wT)\r\n    * 可选取组件![图片](https://uploader.shimo.im/f/AAs7LspLcieYyELJ.png!thumbnail?fileGuid=pDqwjTKJxjCVr3wT)\r\n    * 滚动条组件\r\n    * 图片组件\r\n* 响应式布局\r\n    * 媒体查询\r\n* 定位\r\n    * 定位居中、弹性居中\r\n* 事件\r\n    * 指针状态\r\n    * 不可选取, 取消默认事件绑定\r\n    * hover事件\r\n    * 双击事件\r\n    * 按住事件\r\n    * 滚动事件(滚动位置检测)\r\n* 输入\r\n    * input\r\n    * radio\r\n    * select\r\n    * checkBox\r\n    * datePicker\r\n* 上传下载\r\n* web请求\r\n    * axios\r\n        * axios.get|post|put|delete(<web地址>, <参数>)\r\n* 路由导航\r\n* 权限验证\r\n    * 路由权限\r\n    * 接口权限\r\n        * Session或Cookie\r\n        * 对请求接口的参数进行签名的签名验证\r\n        * JWT\r\n            * npm i jsonwebtoken\r\n            * 验证方式\r\n                * base auth\r\n                    * auth: {\r\n                        * username: token,\r\n                        * password: \'xxxxxxx\'\r\n                    * }\r\n                * auth2\r\n                    * headers: {\r\n                        * Authorization: \'Bearer \' + token\r\n                    * }\r\n            * 问题\r\n                * 默认不加密, 不加密的情况不能将秘密数据写入JWT\r\n                * 不仅用于验证也可用于信息交换\r\n                * 服务器不保存状态, 一旦签发无法在中途改动token权限\r\n                * 一旦泄露, 任何人都可获得该令牌权限, 可采用双重验证, 每个接口验证token(范围时间内有效)+password(根据每个接口+私钥信息摘要算法生成)都不一样\r\n                * 建议配合https传输\r\n            * 组成\r\n                * 签名(内容为载荷和头部的信息摘要, 采用私钥对其签名)\r\n                * 载荷(base64编码)\r\n                * 头部(base64编码)\r\n                    * algorithm\r\n                    * keyid\r\n                    * expressIn\r\n                    * notBefore\r\n                    * audience\r\n                    * subject\r\n                    * issuer\r\n                    * jwtid\r\n                    * mutatePayload\r\n                    * noTimestamp\r\n                    * header\r\n                    * encoding\r\n# 构建\r\n\r\n* 构建方式\r\n    * script直接引用\r\n    * npm安装\r\n    * cli构建工程文件\r\n        * npm i @vue/cli @vue/cli-service-global\r\n    * vite构建工程文件\r\n        * npm init vite-app <project-name>\r\n* 配置\r\n    * 项目配置\r\n        * package.json\r\n            * browserslist\r\n    * 代码规范\r\n        * [eslint-plugin-compat](https://github.com/amilajack/eslint-plugin-compat?fileGuid=pDqwjTKJxjCVr3wT): 代码规范检测\r\n    * Js处理\r\n        * [Babel](https://github.com/babel/babel/tree/master/packages/babel-preset-env?fileGuid=pDqwjTKJxjCVr3wT): js版本转换\r\n    * css处理\r\n        * [Autoprefixer](https://github.com/postcss/autoprefixer?fileGuid=pDqwjTKJxjCVr3wT): css前缀添加\r\n        * [postcss-preset-env](https://github.com/jonathantneal/postcss-preset-env?fileGuid=pDqwjTKJxjCVr3wT)\r\n        * [stylelint-no-unsupported-browser-features](https://github.com/ismay/stylelint-no-unsupported-browser-features?fileGuid=pDqwjTKJxjCVr3wT)\r\n        * [postcss-normalize](https://github.com/jonathantneal/postcss-normalize?fileGuid=pDqwjTKJxjCVr3wT)\r\n    * 打包工具\r\n        * [obsolete-webpack-plugin](https://github.com/ElemeFE/obsolete-webpack-plugin?fileGuid=pDqwjTKJxjCVr3wT)\r\n* 单元测试\r\n    * mocha chai\r\n    * jest\r\n* 图形界面配置: vue ui\r\n* 脚手架配置: vue create <projectname>\r\n* 插件添加: vue add <plugin>\r\n# 安装\r\n\r\n# 集成\r\n\r\n* typescript\r\n    * vue add typescript\r\n    * <script lang=\"ts\">\r\n    * export default defineComponent({})\r\n* sass/scss\r\n    * npm install -D sass-loader node-sass\r\n    * <style lang=\"scss\" scoped>\r\n* normalize.css\r\n* axios\r\n* VueRouter\r\n    * Install: npm install vue-router@next\r\n    * 编写routes数组\r\n        * path: \'<路径>\'\r\n            * 普通路由: \'<路径>\'\r\n            * 动态路由: \'<路径>:<接收变量>\'\r\n        * component: <组件>\r\n        * redirect: \'<重定向路径>\'\r\n        * name: \'<路由命名>\'\r\n        * alias: \'<路由别名>\'\r\n        * children: [<子组件路由>]\r\n    * 创建路由router: VueRouter.createRouter()\r\n        * history\r\n            * 哈希模式: VueRouter.craeteWebHashHistory()\r\n            * 伪静态模式: VueRouter.craeteWebHistory()\r\n        * routes\r\n    * 注册插件: app.use(router)\r\n    * 使用插件\r\n        * 挂载:<router-view></router-view>\r\n        * 导航\r\n            * <router-link to=\"<路径>\"></router-link>\r\n            * <router-link :to=\"<命名路由>\"></router-link>\r\n        * 编程式导航: vue实例.$router.push({ path: \'<路径>\'[, query:{ key: value }] })\r\n        * 获取动态路由传值: vue实例.$route.params\r\n        * 获取query传值: vue实例.$route.query\r\n    * 路由守卫\r\n        * router.beforeEach((to, from, next) => {})\r\n            * to: 即将要进入的路由\r\n            * from: 正要离开的路由\r\n            * next(): 路由继续向下匹配\r\n            * next(false): 中断当前导航\r\n            * next(\'/\')或者next({ path: \'/\' }): 跳转路由到目标位置\r\n* Vuex\r\n    * install: npm install vuex@next\r\n    * 创建store: Vuex.createStore(<store对象>)\r\n        * state() { return {<状态>} }\r\n        * getters: { <方法> }\r\n        * mutations: { <方法> }\r\n        * actions: { <方法> }\r\n        * modules\r\n    * 注册插件: app.use(store)\r\n    * 获取\r\n        * state: vue实例.$store.state\r\n        * getters: vue实例.$store.getters\r\n        * mutations: vue实例.$store.commit(<方法名>)\r\n        * actions: vue实例.$store.dispatch(<方法名>)\r\n        * mapState({<state>})\r\n        * mapGetters({<getters>})\r\n        * useStore()\r\n# Vue\r\n\r\n#### Options\r\n\r\n* inheritAttrs: boolean\r\n* props\r\n    * Array<string>\r\n    * props校验对象\r\n        * type, default, required, validator\r\n* emits: Array<string>\r\n* data() { return { [index:string]:any } }\r\n* computed: { methods }\r\n* methods: { methods }\r\n* watch: { methods }\r\n* 声明周期函数\r\n    * beforeCreate(), created(), beforeMount(), mounted(), beforeUpdate(), updated(), activated(), deactivated(), beforeUnmount(), unmounted()\r\n* components: { [index:string]:组件 }\r\n* mixins: [Option]\r\n#### 指令\r\n\r\n* 绑定\r\n\r\n{{ }}, v-bind, v-on, v-html, v-modle, v-for, v-if, v-show\r\n\r\n#### 全局api\r\n\r\n* createApp(<Vue组件>)\r\n#### 应用api\r\n\r\n* config\r\n    * globalProperties\r\n* mixin(Option)\r\n* mount(<挂载锚点>)\r\n#### 实例api\r\n\r\n* $emit(<事件名>, <传参>), $parent, $refs, $attrs, $nextTick(<callback>)\r\n#### 内建组件\r\n\r\n* <slot>, <keep-alive>\r\n#### 绑定\r\n\r\n* 文本绑定: {{<data>}}\r\n* html绑定: v-html=\"<html>\"\r\n* 属性绑定\r\n    * 类别\r\n        * 普通: :<属性值>=\"<data>\"\r\n        * 动态: :[<属性值>]=\"<data>\"\r\n        * 对象语法: v-bind=\"{ [index:string]:any }\"\r\n    * 特殊\r\n        * class绑定\r\n            * 单值 string\r\n            * 对象 { [index:string]:boolean }\r\n            * 数组 Array<string>\r\n        * style绑定\r\n            * 对象 { [index:string]:string }\r\n            * 数组 Array<{ [index:string]:string }>\r\n* 方法绑定\r\n    * 单方法 @<事件>=\"<method>\"    多方法 @<事件>=\"<method>[, <method>, ...]\"\r\n    * $event 传入此参以捕获事件对象\r\n    * 事件通用修饰符\r\n        * .prevent, .stop, .capture, .self, .once, .passiv\r\n    * 键盘修饰符\r\n        * .enter, .tab, .delete, .esc, .space, .up, .down, .left, .right\r\n    * 鼠标修饰符\r\n        * .left, .right, .middle\r\n    * 系统修饰符\r\n        * .ctrl, .alt, .shift, .meta\r\n        * .exact修饰符\r\n* 双向绑定\r\n    * v-model=\"<data>\" 等同于 :value=\"<data>\" + @change=\"$event => { this.data = $event.target.value }\"\r\n    * v-model:<属性值>=\"<data>\" 等同于 :<属性值>=\"<data>\" + @update:<属性值>=\"$event => { this.data = $event.target.value }\"\r\n* 动态节点\r\n    * 循环: v-for=\"(<成员>[, <索引>]) in <数组>\" :key=\"<成员标识>\"\r\n    * 条件: v-if=\"boolean\" v-else-if=\"boolean\" v-else=\"boolean\"\r\n#### 通信\r\n\r\n* props属性, 非props属性继承, 插槽, vue实例.$emit()\r\n* vue实例.$refs, vue实例.$parent\r\n* provide, inject\r\n* Vuex, VueRouter\r\n#### 节点操作\r\n\r\n* 获取子组件节点\r\n    * 定义别名: ref=\"<节点别名>\"\r\n    * 捕获节点: vue实例.$refs.<节点别名>\r\n* 获取父组件节点\r\n    * vue实例.$parent\r\n#### 复用\r\n\r\n* 混入\r\n#### 数据持久化\r\n\r\n* localstoragem\r\n    * setItem()\r\n    * getItem()\r\n    * removeItem()\r\n* keep-alive\r\n* vuex\r\n#### 插件\r\n\r\n* app.use(<带install方法的对象 | 函数>)\r\n* install或函数含俩参数 1.app 2.options\r\n#### Composition API\r\n\r\n* setup([props]) { return <状态以及方法> }\r\n* ref(<简单值>)\r\n* reactive(<对象>)\r\n* watchEffect(<callback>)\r\n* watch(<监听数据>, <callback>)\r\n* computed(<callback>)\r\n* toRefs\r\n* provide(key, value)\r\n* inject(key)\r\n* readonly(<响应式数据>)\r\n* 生命周期的hooks\r\n* getCurrentInstance(): 获取当前实例\r\n', 35, '2021-04-29 12:36:02', '2021-04-29 12:36:04');
INSERT INTO `article` VALUES (17, 'Ts', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/17.png', NULL, 'Ts索引', '# Link\r\n- [https://www.tslang.cn/docs/handbook/basic-types.html](https://www.tslang.cn/docs/handbook/basic-types.html)\r\n# Install\r\n\r\n- tsc tsFile.ts 编译ts文件\r\n- tsc --init 创建tsconfig.json文件\r\n- 创建tsconfig.json文件后运行终端中的ts监视任务可自动编译ts文件\r\n# Detail\r\n\r\n- 类型\r\n   - boolean\r\n   - number\r\n   - string\r\n   - tuple\r\n      - [elemType, elemType, ...]\r\n   - unknown\r\n   - any\r\n   - void\r\n   - null and undefined\r\n   - never\r\n   - object\r\n      - { x: number, y: string }\r\n      - 类型接口\r\n   - array\r\n      - elemType[]\r\n      - Array<elemType>\r\n      - 数组接口\r\n   - function\r\n      - 形式\r\n         - (x: number, y: number) => number\r\n         - 函数接口\r\n      - 特性\r\n         - returnType很多时候能自动推断\r\n         - 最后的参数可以是可选参数或默认参数或剩余参数\r\n         - 可重载\r\n   - enum\r\n      - enum Role { Reporter, Developer, Owner }\r\n      - let c: Role = Role.Owner\r\n   - 高级类型\r\n   - 类型保护\r\n      - 类型断言: varName as typeName\r\n      - in\r\n      - typeof\r\n      - instanceof\r\n- 类型别名\r\n   - type 自定义类型名 = 类型\r\n- 接口\r\n   - 特性\r\n      - 鸭子类型(只在函数参数里成立): 实现大于等于接口规范及满足此接口\r\n      - 可继承接口以及类，继承的类若有私有成员则此接口只能被该类及该类的子类实现\r\n   - 接口类型\r\n      - 属性接口\r\n         - 索引签名\r\n            - interface typeName { [x: string]: number }\r\n            - 一个接口中只能有一个索引签名\r\n            - 索引只有string和number两种类型\r\n            - 同时有string和number类型的索引签名，则number的returnType是string的retrunType, 且其余符合索引签名的属性必须遵循索引签名规范\r\n         - 只读属性\r\n            - interface typeName { readonly id: number }\r\n            - 声明变量只读用const，其它无法用const的地方用readonly\r\n         - 可选属性\r\n            - interface typeName { age?: number }\r\n            - 有可选属性时，实现必须严格遵守接口规范\r\n         - 普通属性\r\n      - 数组接口\r\n         - interface typeName { [x: number]: number }\r\n      - 函数接口\r\n         - interface typeName { (p1: number, p2: string): string }\r\n         - 可选参数 与可选属性写法一致\r\n         - 默认参数 es6语法\r\n         - 剩余参数 es6语法\r\n      - 组合接口\r\n- 类\r\n   - 类的种类\r\n      - 普通类\r\n      - 抽象类:\r\n         - 只能被继承\r\n         - 含抽象方法 abstract methodName(v1:number):void\r\n   - 类的成员\r\n      - public 公有成员\r\n      - protected 保护成员 只能在类与子类中访问\r\n      - private 私有成员 只能在类中访问\r\n      - static 静态成员\r\n      - 只读属性\r\n- 接口与类的关系\r\n   - 接口只能约束类的公有成员\r\n   - 接口之间能互相继承\r\n   - 接口能继承类, 不过只能继承类的规范, 不能继承类的实现\r\n- 泛型\r\n   - 泛型的种类\r\n      - 扩展接口及类\r\n      - 扩展函数\r\n   - 泛型可指定默认值\r\n   - 泛型能继承接口及类\r\n- 命名空间\r\n   - namespace A {}\r\n   - 可嵌套子命名空间\r\n- 装饰器\r\n   - 执行顺序: 属性->方法->方法参数->类 有同类先执行后者\r\n   - 类装饰器\r\n      - 参数: 类的构造函数\r\n   - 属性装饰器\r\n      - 参数一\r\n         - 静态成员: 类的构造器\r\n         - 实例成员: 类的原型对象\r\n      - 参数二: 成员名\r\n   - 方法装饰器\r\n      - 参数一\r\n         - 静态成员: 类的构造器\r\n         - 实例成员: 类的原型对象\r\n      - 参数二: 成员名\r\n      - 参数三: 成员的属性描述符\r\n   - 方法参数装饰器\r\n      - 参数一\r\n         - 静态成员: 类的构造器\r\n         - 实例成员: 类的原型对象\r\n      - 参数二: 参数名 \r\n      - 参数三: 参数索引\r\n- tsc -init: 初始化tsconfig.json文件\r\n- tsc: 寻找tsconfig.json文件并依次编译ts文件\r\n- tsc 文件名: 直接编译指定文件\r\n', 10, '2021-04-29 12:36:25', '2021-04-29 12:36:27');
INSERT INTO `article` VALUES (18, '浏览器', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/18.png', NULL, '浏览器', '# 组成\r\n\r\n* 单进程浏览器\r\n    * 页面渲染\r\n    * 页面展现\r\n    * Javascipt环境\r\n    * 插件\r\n    * 其他线程\r\n* 多进程浏览器\r\n    * 渲染进程\r\n        * 特点\r\n            * 沙箱\r\n            * 每个页面配一个渲染进程, 父子页面同属一个站点除外\r\n            * Blink引擎解析排版生成顶点, Js引擎执行代码\r\n        * 线程\r\n            * 主线程\r\n            * 合成线程\r\n            * 栅格化线程池\r\n    * 插件进程(部分系统支持, 多个)\r\n    * 主进程: 界面显示, 用户交互, 子进程管理, 存储功能\r\n    * 服务进程(内存不足时, 服务进程并入主进程中)\r\n        * 网络进程: 网络资源的加载\r\n        * GPU进程: 页面的渲染与绘制\r\n        * Profile进程\r\n        * UI进程\r\n        * 文件进程\r\n        * 设备进程\r\n        * Audio进程\r\n# 流程![图片](https://uploader.shimo.im/f/VWCsl0PWQFMm65VC.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n\r\n* 导航流程\r\n    * 用户输入\r\n    * URL请求过程\r\n        * 构建请求\r\n        * 查缓存\r\n            * 若有直接返回资源副本\r\n            * 若无下一步\r\n        * 准备IP地址和端口\r\n            * 若有DNS缓存直接用\r\n            * 若无DNS缓存由DNS协议将域名转化为IP地址\r\n        * 等待TCP队列\r\n            * 若有队列则等待\r\n            * 若无队列直接建立TCP连接\r\n        * 建立TCP连接\r\n        * 发送HTTP请求\r\n        * 服务器处理HTTP请求\r\n            * 重定向\r\n            * 跨域\r\n        * 断开连接\r\n            * 若是长连接则不断开\r\n            * 若不是则断开\r\n    * 准备渲染进程\r\n    * 提交文档\r\n* 渲染流程\r\n    * 构建DOM树![图片](https://uploader.shimo.im/f/9tAavk08Tve38WY0.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * html文本转换为DOM树\r\n    * 样式计算![图片](https://uploader.shimo.im/f/GyC8kvLhe1lmwC69.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * css文本转换为styleSheets![图片](https://uploader.shimo.im/f/8NEQHrlwgr1MOG17.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * styleSheets属性值标准化![图片](https://uploader.shimo.im/f/PCkC3lGHlah7asj2.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * 根据样式继承规则与层叠样式规则计算出DOM树中每个节点的computedStyle![图片](https://uploader.shimo.im/f/13UnwFXRpWZGXrBG.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)![图片](https://uploader.shimo.im/f/z8QkfKh3AT59szoe.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)![图片](https://uploader.shimo.im/f/wEgajxaaRI7FNKOS.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n    * 布局阶段\r\n        * 创建布局树![图片](https://uploader.shimo.im/f/wliz0904S1q7h4vm.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * 布局计算除每个元素的几何坐标位置\r\n    * 分层\r\n        * 创建图层树(拥有层叠上下文属性的元素, 需要裁剪的元素)![图片](https://uploader.shimo.im/f/MrgLiQvWrUcXhCeD.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)![图片](https://uploader.shimo.im/f/PljrqTW8ayHaSmpP.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)![图片](https://uploader.shimo.im/f/BuiCnTNvXj093Jkc.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * [层叠上下文](https://blog.csdn.net/llll789789/article/details/97562099?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * [层叠上下文](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context#%E7%A4%BA%E4%BE%8B?fileGuid=6RXYc6wKkCpHG6Cy)\r\n    * 绘制\r\n        * 由图层树为每个图层生成绘制顺序与绘制指令![图片](https://uploader.shimo.im/f/8p4w9reM0gAQowmt.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)![图片](https://uploader.shimo.im/f/hJBVClMPFINO7t2s.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * 绘制列表交付给合成线程![图片](https://uploader.shimo.im/f/Z5VeWK6KdF3A1kwJ.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n    * 分块\r\n        * 合成线程将图层分为图块![图片](https://uploader.shimo.im/f/S3TDBKpUbNhUjNCu.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * 将视口附近的可见图块交付给栅格化线程池![图片](https://uploader.shimo.im/f/kjnAWjI3JU59lFiK.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n    * 光栅化\r\n        * 将图块通过GPU进程快速栅格化为位图![图片](https://uploader.shimo.im/f/Puov5cUqyvhVDzvX.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n    * 合成![图片](https://uploader.shimo.im/f/DAUjsIHHIltATJmt.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n        * 所有图块被光栅化后生成一个绘制图块的命令DrawQuad并提交给浏览器进程\r\n        * 浏览器进程根据DrawQuad命令从GPU进程提取位图到内存并显示到屏幕上\r\n# 概念\r\n\r\n* 浏览器\r\n    * TCP连接: 浏览器最多保持6个TCP连接\r\n    * 渲染\r\n        * 重流: 完整渲染流水线\r\n        * 重绘: 跳过布局, 分层阶段\r\n        * 合成: 跳过布局, 分层, 绘制阶段\r\n    * 存储\r\n        * localStorage\r\n        * sessionStorage\r\n        * indexDB\r\n        * webSQL\r\n        * cookie\r\n    * 缓存\r\n        * DNS数据缓存\r\n        * 页面资源缓存\r\n            * 缓存资源\r\n                * 响应头\r\n                    * Cache-Control: \"Max-age=2000\"\r\n                    * Etag: \"3e86-410-3596fbbc\"\r\n                    * Age: \"0\"\r\n            * 刷新缓存新鲜度响应码和响应头\r\n                * 请求头\r\n                    * if-None-Match: \"3e86-410-3596fbbc\"\r\n                * 响应行\r\n                    * 304 Not Modified\r\n* 网络\r\n    * IP协议: 网络层协议, 主机寻址\r\n    * TCP协议: 传输层协议, 保证数据的正确、完整、有序, 但速度较慢\r\n        * 三次握手->数据传输->四次挥手\r\n    * UDP协议: 传输层协议, 保证数据的正确, 速度快\r\n    * DNS协议: 应用层的域名转化成IP地址协议\r\n    * HTTP协议: 应用层协议\r\n        * 请求\r\n            * 请求行: 请求方法(GET、POST), 请求URI, HTTP协议版本\r\n            * 请求头\r\n            * 请求体: GET没有请求体只能在URI里传消息, POST有\r\n        * 响应\r\n            * 响应行: HTTP协议版本, 状态码\r\n            * 响应头\r\n            * 响应体\r\n    * HTTPS协议: 应用层协议, 还需要建立TLS连接\r\n    * 长连接: 请求头或响应头中有Connection: Keep-Alive\r\n    * 重定向: 状态码301 响应头Location: URI\r\n    * 响应数据类型\r\n        * Content-Type\r\n            * html格式: text/html\r\n            * 字节流类型: application/octet-stream\r\n    * 跨域\r\n\r\n![图片](https://uploader.shimo.im/f/uDCHD7m1AajifxFS.png!thumbnail?fileGuid=6RXYc6wKkCpHG6Cy)\r\n\r\n\r\n', 12, '2021-04-29 12:36:53', '2021-04-29 12:36:56');
INSERT INTO `article` VALUES (19, 'Python', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/19.png', NULL, 'Python索引', '# 命令行\r\n\r\n## python\r\n\r\n## pip\r\n\r\n* pip search moduleName: 搜索该模块\r\n* pip install moduleName: 安装该模块\r\n* pip uninstall moduleName: 卸载该模块\r\n* pip freeze\r\n* pip config set global.index-url[https://mirrors.aliyun.com/pypi/simple/](https://mirrors.aliyun.com/pypi/simple/?fileGuid=pChRCRHT93j6DYRY): 配置阿里云镜像\r\n# 语句\r\n\r\n* 赋值语句\r\n    * 赋值: var = value\r\n    * iterable对象解包赋值: arg1, arg2 = iterable对象\r\n        * 多重赋值: var1, var2 = value1, value2\r\n* 函数定义语句: def func(args...) ...\r\n* 解包语句\r\n    * iterable对象解包: *iterable\r\n    * dict对象解包: **dict对象\r\n    * 用处: 参数定义, 参数使用, []内, {}内\r\n* 流程控制语句\r\n    * if语句: if ... elif ... elif ... else ...,![图片](https://uploader.shimo.im/f/0a58s8el493pZW8C.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * for语句: for item in iterable ... else ...![图片](https://uploader.shimo.im/f/pjJyx471Tt6ePPdB.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * break语句, continue语句![图片](https://uploader.shimo.im/f/qNCmocVtB3keD0pT.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* pass语句: 语法上需要, 但程序不实际执行任何动作时可使用![图片](https://uploader.shimo.im/f/8hxlio6z0YjDgtLX.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* del语句![图片](https://uploader.shimo.im/f/oifCbedrcgnky0hm.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 删除变量: del var\r\n    * 删除sequence对象elem及dict对象键值对\r\n* 流语句: with stream as name ...\r\n# 表达式\r\n\r\n* 赋值表达式: :=\r\n* 布尔运算表达式\r\n    \r\n    * and, or ,not\r\n* 关系运算表达式\r\n    \r\n    * >, <, ==, <=, >=\r\n* 四则运算表达式\r\n    \r\n    * +, -, *, /, //, %, **\r\n* in, not in表达式: 判断sequen是否存在某个值\r\n* is, is not表达式: 判断两个对象是否同一个对象\r\n* 函数表达式: function(args...)\r\n# 自动类型转换\r\n\r\n* iterable对象长度非零为真, 长度为零为假\r\n# 错误\r\n\r\n* 捕获: try ... except error ... [else ... [finally ...]]\r\n* 触发: raise error\r\n* StopIteration\r\n# 作用域和命名空间\r\n\r\n* nonlocal\r\n* global\r\n# 复用\r\n\r\n## 函数\r\n\r\n* 构造\r\n    * 字面值: lambda ...args: expre![图片](https://uploader.shimo.im/f/z56ePUmofTVcXExG.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 定义: def funcName(arg...) ...![图片](https://uploader.shimo.im/f/xpCdoNhQmU5RsxrH.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* 参数\r\n    * 参数定义\r\n        * 特殊参数![图片](https://uploader.shimo.im/f/9EC1jvWYwm1x8BUx.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n            * /: 之前的参数仅为位置参数\r\n            * *: 之后的参数仅为关键字参数\r\n        * 默认值参数:![图片](https://uploader.shimo.im/f/KJ4smb85wmKKB7Qs.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)![图片](https://uploader.shimo.im/f/ttG1rE328ri0YQpH.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * 剩余参数![图片](https://uploader.shimo.im/f/RvnX50MpvUGmpWxf.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n            * iterable对象: *args\r\n            * dict对象: **args\r\n    * 参数使用\r\n        * 位置参数\r\n        * 关键字参数![图片](https://uploader.shimo.im/f/ZvsMSKffQOhjR53N.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)![图片](https://uploader.shimo.im/f/2SQ2WEMLReY5XqHl.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * 解包实参![图片](https://uploader.shimo.im/f/7DsUJ7oCoD6ciojo.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n            * iterable对象: *args\r\n            * dict对象: **args\r\n* 文档字符串:函数内的第一条语句是str时，该str就是文档str，也称为docstring![图片](https://uploader.shimo.im/f/2khNqkYXTK8TDTgf.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* 函数注解![图片](https://uploader.shimo.im/f/nsPgNJrsR6FW8YXi.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 形参注解: 形参后加冒号跟一个expre\r\n    * 返回值注解: 在冒号之前加上 -> 符号, 后面跟expre\r\n* 没有返回值的函数默认返回None\r\n* 变量\r\n    * __self__: 方法所属实例对象, 只有类方法才有\r\n    * __func__: 方法对象, 只有类方法才有\r\n    * __annotations__: 注解\r\n## 类\r\n\r\n* 构造\r\n    * 定义: class ClassName[(extendsClass)] ...![图片](https://uploader.shimo.im/f/OgrLYcaBk5xK8gLQ.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* 本指针\r\n    * self, 绑定在类的函数中\r\n* 父指针\r\n    * super\r\n* 构造函数\r\n    * def __init__(self[, args...])\r\n    * 构造函数中定义的变量为实例变量, 构造函数外为类变量\r\n* 变量\r\n    * 定义的类变量\r\n* 实例\r\n    * 特性\r\n        * mutable\r\n    * 构造\r\n        * 函数: ClassName()\r\n    * 变量\r\n        * __doc__: 文档字符串\r\n        * __class__: 类名\r\n        * __dict__: 字典\r\n        * 定义的实例变量\r\n    * 操作\r\n        * 查: instance.var\r\n        * 增改: instance.var = value\r\n        * 删: del instance.var, 其中var是新定义的, 定义在类里的var不能删\r\n        * 定义的类方法\r\n## 模块\r\n\r\n* 模块\r\n    * import module [as name]\r\n    * from module import var [as name[, var...]]\r\n    * from module import *\r\n* 包\r\n    * 含__init__.py的文件夹就是包\r\n    * import 包 等价于 import 包.__init__.py\r\n    * __init__.py\r\n        * __all__: 指定import *可导入的模块\r\n        * __path__\r\n# 内置\r\n\r\n## 变量\r\n\r\n* _: 上次输出的expre\r\n* __name__: 模块名, 模块作为顶层脚本时值为__main__\r\n## 函数\r\n\r\n* 基本\r\n    * num\r\n        * int(str|bytes): str或bytes转换成num\r\n    * str(var): 将var转换成str对象\r\n* 结构\r\n    * list(iterable): 将iterable对象转换成list对象\r\n    * dict(iterable): 将iterable对象转换成dict对象\r\n* 迭代\r\n    * next(iterator): 迭代iterator对象\r\n    * iter(iterable): 将iterable对象转换成iterator对象\r\n    * range(startNum, endNum, step): 生成数字elem的range对象\r\n    * enumerate(iterable): 生成索引, 将iterable对象转换成enumerate对象\r\n    * set(iterable): 去重, 将iterable对象转换成set对象\r\n    * zip(iterable): 转置, 将iterable对象转换成enumerate对象\r\n    * sorted(iterable): 排序, 生成一个排序后的list对象\r\n    * reversed(iterable): 倒序, 将iterable对象转换成reversed对象\r\n    * tuple(iterable): 将iterable对象转换成tuple对象\r\n    * map(func, iterable): 将一个iterable对象通过传入的func返回一个新的只能遍历一次的iterable对象\r\n    * len(lenable): 返回lenable对象长度\r\n    * sum(iterable): 对iterable对象进行求和\r\n* 输入输出\r\n    * repr(var): var转换成机器识别的字符\r\n    * input(str): 等待输入\r\n    * print(): 打印\r\n        * 可处理多参数, 以空格分割![图片](https://uploader.shimo.im/f/l81hpULfbzngtvYS.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * end取消换行或以另一个str结尾![图片](https://uploader.shimo.im/f/cY5J3vIuxA6OymuL.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * write()\r\n    * open(filename, mode): 返回一个file对象![图片](https://uploader.shimo.im/f/UmNpxVIIBhSHynzx.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * 两种模式: textFile和byteFile(不能混着用, 文本模式会转换数据中的\\n, \\r\\n)\r\n* 基本信息获取\r\n    * help(var): 返回帮助文档\r\n    * dir(var): 模块, 变量详细信息\r\n    * type(var): 获取变量类型\r\n    * isinstance(instance, class): 判断是否是某类实例\r\n    * issubclass(class, class): 判断是否是某类子类\r\n## 类\r\n\r\n### 基本\r\n\r\n#### 空\r\n\r\n* 构造\r\n    * 字面值: None\r\n#### num\r\n\r\n* 类型: int float Decemal Fraction 复数\r\n* 特性\r\n    * immutable\r\n* 构造\r\n    * 字面值: num\r\n    * 函数: int(str|bytes|num)\r\n* 操作: + - * / % //(整除) **(指数)\r\n#### str\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: char\r\n* 构造\r\n    * 字面值:\r\n        * 普通: \'... ...\' \"... ...\" , \\加特殊字符进行转义\r\n        * 跨行: \"\"\"... ...\"\"\" \'\'\'... ...\'\'\', 不需要回车换行则行尾加\\![图片](https://uploader.shimo.im/f/VxIoqDwefyC0FXpw.png!thumbnail?fileGuid=pChRCRHT93j6DYRY), \\加特殊字符进行转义\r\n        * 原始: 字面值前加上r![图片](https://uploader.shimo.im/f/UA36oUT0246OiB8j.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * 模板: 字面值前加f![图片](https://uploader.shimo.im/f/x1aKtnXS80wQ6s61.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n            * {expre[!transform[:format]]}\r\n                * transform: !a为ascii(), !s为str(), !r为repr()\r\n                * format: 10d, .3f\r\n    * 函数: str(var)\r\n* 操作\r\n    * immutable\r\n        * 查\r\n            * 查: str[index]\r\n            * 查值: char in str\r\n            * 多查: str[index:index]\r\n            * 并: +, 紧邻(只用于两个str字面值)\r\n            * 重: *\r\n            * join(iterable): 以该str作连接, 连接参数中strelem的iterable对象\r\n            * replace(str, str): 替换字符串![图片](https://uploader.shimo.im/f/vZu6ENGoXJdqsJEh.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n            * encode(str): 以指定编码转换当前str为byte\r\n            * format():![图片](https://uploader.shimo.im/f/LnymyHnol4MmAj7l.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n#### byte\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: byte\r\n* 构造\r\n    * 字面值: b\'... ...\', b\"... ...\", 默认编码为\"utf-8\"\r\n    * 函数: str.encode(str)\r\n* 操作\r\n    * immutable\r\n        * decode(str): 以指定编码将byte转换为str\r\n### 结构\r\n\r\n#### set\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 字面值: {elem...}, 无法表示空集, elem之间可互为异质类型, 一般异质类型\r\n    * 函数: set(iterable)\r\n* 操作\r\n    * immutable\r\n        * 查\r\n            * 查值: elem in set\r\n            * 并: set1 | set2\r\n            * 交: set1 & set2\r\n            * 差: set1 - set2\r\n            * 对称差分: set1 ^ set2\r\n#### tuple\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 字面值: 多个逗号隔开或者加层括号![图片](https://uploader.shimo.im/f/EVaRwvpBzsajWfO6.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 函数: tuple()\r\n* 操作\r\n    * immutable\r\n        * 查\r\n            * 查: tuple[index]\r\n            * 查值: elem in tuple\r\n            * 多查: tuple[index:index]\r\n            * 并: +\r\n            * 重: *\r\n#### list\r\n\r\n* 特性\r\n    * mutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 字面值: [elem...], elem之间可互为异质类型, 一般同质类型\r\n    * 函数: list(iterable)\r\n* 操作\r\n    * immutable\r\n        * 查\r\n            * 查: list[index]\r\n            * 多查: list[index:index]\r\n            * 查值: elem in list, index[elem[, startIndex[, endIndex]]]\r\n            * 元素计数: count(elem)\r\n            * 复制: copy()\r\n            * 并: +\r\n            * 重: *\r\n    * mutable\r\n        * 增\r\n            * 增: insert(index, elem), append(elem)\r\n            * 多增: list[index:index] = iterable, extend(iterable)\r\n        * 删\r\n            * 删: del list[index], pop([index])\r\n            * 多删: del list[index:index], list[index:index] = iterable\r\n            * 删值: remove(elem)\r\n            * 清空: clear()\r\n        * 改\r\n            * 改: list[index] = elem\r\n            * 多改: list[index:index] = iterable\r\n            * 排序: sort(*, key=None, reverse=False), reverse()\r\n#### dict\r\n\r\n* 特性\r\n    * mutable\r\n    * extends iterable\r\n        * iterable迭代元素: key\r\n* 构造\r\n    * 字面值: {key: elem}, 可用字典推导式![图片](https://uploader.shimo.im/f/I5ambUMfFma9oG6l.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 函数: dict(iterable | 关键字参数)\r\n* 操作\r\n    * immutable\r\n        * 查: dict[key]\r\n        * 查值: key in dict\r\n        * 键值对序列: dict.items()\r\n    * mutable\r\n        * 增改: dict[key] = elem\r\n        * 删: del dict[key]\r\n### 迭代\r\n\r\n#### iterator接口\r\n\r\n* 构造\r\n    * 函数: iter(iterable)\r\n* 实现函数\r\n    * __next__(): 此方法返回迭代的元素, 迭代到尽头后抛出StopIteration异常\r\n* 操作\r\n    * next(iterator): 调用iterator的__next__()方法进行迭代\r\n#### iterable接口\r\n\r\n* 构造\r\n    * 实现了iterable接口的对象\r\n        * str, byte, range, set, tuple, list, dict, enumerate, zip, reversed, generate, 自定义\r\n* 实现函数\r\n    * __iter__(): 此函数需返回一个iterator对象\r\n* 操作\r\n    * 创建iterator: iter(iterable)\r\n    * 添索引: enumerate(iterable)\r\n    * 转置: zip(iterable)\r\n    * 倒序: reversed(iterable)\r\n    * 排序: sorted(iterable)\r\n    * 求和: sum(iterable)\r\n    * 自定义转化: expre for item in iterable [for item in iterable...] if expre, map(func, iterable)\r\n    * iterable->set: set(iterable)\r\n    * iterable->tuple: tuple(iterable)\r\n    * iterable->list: list(iterable)\r\n    * iterable->dict: dict(iterable)\r\n#### lenable接口\r\n\r\n* 实现函数\r\n    * __len__()\r\n* 操作\r\n    * len(lenable): 返回lenable对象长度\r\n#### range\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 函数: range(startNum, endNum, step)\r\n#### enumerate\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 函数: enumerate(iterable)\r\n#### zip\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 函数: zip(iterable)\r\n#### reversed\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: elem\r\n* 构造\r\n    * 函数: reversed(iterable)\r\n### 多任务\r\n\r\n#### generate\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: 协程每次执行的返回值\r\n* 构造\r\n    * 表达式: expre for item in iterable [for item in iterable...] if expre\r\n    * 定义:![图片](https://uploader.shimo.im/f/5gkPL1vdfCxOk7iV.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* 操作\r\n    * generate->list: list推导式\r\n    * generate->set: set推导式\r\n    * generate->dict: dict推导式\r\n### 输入输出\r\n\r\n#### file\r\n\r\n* 特性\r\n    * immutable\r\n    * extends iterable\r\n        * iterable迭代元素: 文本模式中的行\r\n* 构造\r\n    * 函数: open(filename, mode)\r\n        * mode\r\n            * r: 只读\r\n            * w: 只写, 文件不存在就创建\r\n            * r+: 读写\r\n            * w+: 读写, 文件不存在就创建\r\n            * a: 只写, 文件不存在就创建, 指针在文件尾\r\n            * a+: 读写, 文件不存在就创建, 指针在文件尾\r\n            * rb: 二进制模式只读\r\n            * wb: 二进制模式的只写\r\n* 操作\r\n    * immutable\r\n        * 查: read([size]), readline(), readlines()\r\n        * 查迭代位置: tell()\r\n        * 改迭代位置: seek(offset, whence)\r\n## 模块\r\n\r\n### 工作环境\r\n\r\n* venv: 虚拟环境\r\n    * 执行python -m venv name创建名为name的虚拟环境目录\r\n### 系统\r\n\r\n* sys: 系统模块\r\n    * argv: 传入模块的参数list\r\n    * path: 模块搜索路径\r\n    * ps1, ps2: 主次提示的字符串\r\n    * stdin, stdout, stderr:![图片](https://uploader.shimo.im/f/DExtmwiryD34bvOi.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * exit()\r\n* argparse: 命令行参数处理\r\n    * ArgumentParser()![图片](https://uploader.shimo.im/f/lhxS83LnvrM5kgs9.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* os: 操作系统\r\n    * getcwd(): 获取当前工作目录地址\r\n    * chdir(dir): 改变当前工作目录\r\n    * system(cmd): 运行命令行\r\n    * path\r\n        * exists(目录名): 判断是否存在此目录\r\n    * makedirs(目录名): 创建目录\r\n* shutil: 文件目录管理\r\n    * copyfile(copyfile, newfile): 复制文件\r\n    * move(dir, dir)![图片](https://uploader.shimo.im/f/yFqBnPGeoAOSQIVd.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* glob: 文件通配符\r\n    * glob.glob(glob): 查找当前目录文件名![图片](https://uploader.shimo.im/f/0EfpwjJNM8ZNn40R.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* datatime: 日期和时间\r\n    * date():![图片](https://uploader.shimo.im/f/BdoDtZQ0RAyVfinH.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n        * tody(): 返回当前时间的date对象\r\n            * strftime(str): date对象转换成格式化的str\r\n            * 差: -\r\n                * days: 天数\r\n### 多任务\r\n\r\n* threading\r\n    * Thread抽象类\r\n        * 构造\r\n            * 构造函数: threading.Thread\r\n        * 抽象函数\r\n            * run()\r\n        * 操作\r\n            * start(): 启动线程\r\n            * join(): 停止父线程等待当前线程完成\r\n### 数据处理\r\n\r\n* zlib, gzip, bz2, lzma, zipfile, tarfile: 数据压缩\r\n    * compress(byte): 压缩byte\r\n    * decompress(byte): 解压byte\r\n    * crc32(byte): 将byte对象通过crc算法转化为32位整数, 用于校验\r\n* json: 序列化模块\r\n    * dumps(list|tuple|dict): json对象转换成json字符串\r\n    * dump(list|tuple|dict, textFile): json对象写入到textFile中\r\n    * load(textFile): 存有json字符串的textFile转换成json对象\r\n* re: 正则表达式\r\n    * findall(str, str): 字符串匹配![图片](https://uploader.shimo.im/f/PdgNbE4GIgKB5jfQ.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * sub(str, str, str): 差![图片](https://uploader.shimo.im/f/PdgNbE4GIgKB5jfQ.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* string\r\n    * Template()\r\n        * substitute(dict|key=value...)\r\n        * safe_substitute(dict|key=value...)\r\n* textwrap\r\n    * fill()\r\n* locale\r\n    * setlocale()\r\n    * format()\r\n    * format_string\r\n* base64\r\n    * b64encode(bytes): 将字节码编码为base64的字节码\r\n    * b64decode(str): 将base64的str解码原来的字节码\r\n* csv: 逗号分隔格式读取或写入文件\r\n* xml.etree.ElementTree\r\n* xml.dom\r\n* xml.sax\r\n* gettext: 国际化\r\n* locale: 国际化\r\n* codecs: 国际化\r\n### 数学\r\n\r\n* math: 数学\r\n    * cos(num): 余弦函数\r\n    * log(num, num): 取对数\r\n* random: 随机\r\n    * choice(iterable): 从iterable对象中随机取出一个elem\r\n    * sample(iterable, num): 对iterable对象进行随机取样\r\n    * random(): 随机生成0-1的浮点数\r\n* uuid\r\n    * uuid4(): 返回uuid\r\n* statistics: 统计\r\n    * mean(iterable): 对elem为num的iterable对象求均值\r\n    * median(iterable): 对elem为num的iterable对象求中位数\r\n    * variance(iterable): 对elem为num的iterable对象求方差\r\n### 输入输出\r\n\r\n* socket![图片](https://uploader.shimo.im/f/WZ5pwwfSqwHKsvHp.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * socket(): 返回一个套接字对象\r\n    * 套接字对象\r\n        * connetct(iterable): 接收一个iterable对象, 配置ip与port\r\n        * send(byte): 发送byte数据\r\n        * recv(num): 接收指定大小的二进制数据\r\n* reprlib\r\n    * repr(): 缩略显示大型或深层嵌套的容器对象\r\n* pprint\r\n    * pprint()\r\n* logging\r\n    * debug(str)\r\n    * info(str)\r\n    * warning(str)\r\n    * error(str)\r\n    * critical(str)\r\n* text\r\n* urllib\r\n    * request\r\n        * urlopen(url):![图片](https://uploader.shimo.im/f/SZsg0V4EgcLmdXLk.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * parse\r\n        * quote(str): 将字符串进行url编码\r\n* xmlrpc.client: 远程调用\r\n* xmlrpc.server: 远程调用\r\n* smtplib: 邮件\r\n    * SMTP(url): 创建邮件服务器\r\n        * sendmail(args...): 发送邮件\r\n        * quit(): 释放资源\r\n* poplib: 邮件\r\n* email: 邮件\r\n* sqlite3: SQLite数据库\r\n### 测试\r\n\r\n* time\r\n    * time(): 返回当前时间\r\n* timeit: 性能测量\r\n    * Timer()![图片](https://uploader.shimo.im/f/vPS9njwFKOUlxQIb.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* doctest\r\n    * testmod()![图片](https://uploader.shimo.im/f/98p9YdFVy4OTDN8x.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n* unittest\r\n    * main()![图片](https://uploader.shimo.im/f/0He1D0tVlsRyCpD6.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n# 爬虫\r\n\r\n* requests模块![图片](https://uploader.shimo.im/f/WkTpTmTqqkXeo4pF.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * 请求方式\r\n        * get(url):  get方式发送http请求, 返回一个http对象\r\n        * post(url, data = file): post方式放松http请求\r\n        * 参数\r\n            * url: 请求地址\r\n            * headers: 请求头, dict对象\r\n            * timeout: 延迟时间, num对象\r\n            * proxies: 代理, dict对象![图片](https://uploader.shimo.im/f/mVtqEVIBCHm6H75L.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n    * Session类: 返回一个保持连接的session对象\r\n    * http对象\r\n        * status_code: 状态码\r\n        * encoding: 编码\r\n        * text: 文本\r\n* bs4, lxml模块\r\n    * BeautifulSop类\r\n        * 构造函数: BeautifulSop(str, str): 第一个参数为要查询的字符串, 第二个参数为选择器类型, 这里用\"lxml\", 需安装lxml模块\r\n        * prettify(): 对字符串进行格式化后返回\r\n        * 查找过滤\r\n            * find_all(标签名 或 True):![图片](https://uploader.shimo.im/f/luA5vkeidWFRGuuV.png!thumbnail?fileGuid=pChRCRHT93j6DYRY), True的时候代表所有子节点\r\n            * select(str), select_one(str): css过滤器语法\r\n            * 属性过滤:![图片](https://uploader.shimo.im/f/QcfZzRpB9Wj4KkwB.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)![图片](https://uploader.shimo.im/f/WsMFw5TJLw3paABA.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)![图片](https://uploader.shimo.im/f/BNy9dKiJMh4RoSRp.png!thumbnail?fileGuid=pChRCRHT93j6DYRY)\r\n                * 标签名: 第一个指定标签\r\n                * 属性名: 自己的属性值\r\n                * name: 自己的标签名\r\n                * 文本节点\r\n                    * text: 所有文本获取, 不获取注释\r\n                    * string: 文本或注释, 有空格和换行返回None\r\n                    * strings: 多个文本值获取\r\n                    * stripped_strings: 除掉空格和换行后的strings\r\n                * 父子节点\r\n                    * contents, children: 所有子节点(包括自己)组成的iterable对象, chidlren返回iterator对象\r\n                    * descendants: 获取所有子孙节点组成的iterable对象\r\n                    * parent: 获取父节点, 文本的父节点是自己\r\n                    * parents: 父辈节点\r\n                * 前后节点\r\n                    * next_sibling: 后兄弟节点\r\n                    * prev_sibling: 前兄弟节点\r\n                    * next_element: 后节点\r\n                    * next_elements: 后所有节点\r\n                    * previous_elemetn: 前节点\r\n                    * previous_elemetns: 前所有节点\r\n* 爬虫分类\r\n    * 个人\r\n        * 多线程与多进程爬虫\r\n        * 异步爬虫\r\n        * selenium爬虫\r\n    * 企业级\r\n        * Scrapy框架\r\n        * Celery分布式\r\n', 17, '2021-04-29 12:37:40', '2021-04-29 12:37:42');
INSERT INTO `article` VALUES (20, 'Mysql', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/20.png', NULL, 'Mysql索引', '# 版本\r\n- 5.7.26\r\n# 安装\r\n## docker安装\r\n\r\n- 拉取\r\n   - docker pull mysql:5.7\r\n- 启动\r\n   - docker run --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=密码 -v 主机挂载位置:/var/lib/mysql -v 主机挂载位置:/etc/mysql/conf.d -d mysql:5.7\r\n- 数据卷\r\n   - 配置: /etc/mysql/conf.d\r\n   - 数据: /var/lib/mysql\r\n# 三大设计范式\r\n\r\n- 第一范式: 表中所有字段都是不可分割的原子值\r\n- 第二范式: 除主键外的每一列必须完全依赖于主键, 如果要出现不完全依赖, 只可能发生在联合主键的情况下\r\n- 第三范式: 除开主键列的其他列之间不能有传递依赖关系\r\n# 登录\r\n\r\n- mysql -u用户名[@主机] -p密码\r\n# 备份\r\n\r\n- mysqldump -u 用户 -p 密码 -h 主机 -q -R --databases 数据库\r\n   - -u: 用户\r\n   - -p: 密码\r\n   - -h: 主机\r\n   - -p: 密码\r\n   - --databases: 备份指定数据库\r\n   - --all-databases: 备份所有数据库\r\n   - --compact: 压缩模式\r\n   - --comments: 添加注释信息\r\n   - --complete-insert: 输出完成的插入语句\r\n   - --lock-tables: 备份前, 锁定所有数据库表\r\n   - --no-create-db/--no-create-info: 禁止生成创建数据库语句\r\n   - --force: 出现错误时仍然继续备份操作\r\n   - --default-character-set: 指定默认字符集\r\n   - --add-locks: 备份数据库表时锁定数据库表\r\n# SQL语句\r\n## 退出\r\n\r\n- exit\r\n## 库表\r\n\r\n- show databases\r\n- create database 数据库\r\n- use 数据库\r\n- describe 表\r\n- show tables\r\n- create table 表 (字段 类型[ 字段约束 ...], ...[, 表约束, ...])\r\n   - 类型\r\n      - 数字\r\n         - smallint\r\n         - int(位数)\r\n         - bigint\r\n         - float\r\n         - double\r\n         - decimal\r\n      - 字符\r\n         - varchar(字节数)\r\n         - char(字节数)\r\n         - text\r\n         - blob\r\n      - 日期\r\n         - date\r\n         - time\r\n         - year\r\n         - datetime\r\n         - timestatmp\r\n   - 约束\r\n      - 主键约束\r\n         - 字段约束: primary key\r\n         - 表约束(联合主键): primary key(字段, ...)\r\n      - 自增约束\r\n         - 字段约束: auto_increment, 需和主键约束一起使用才有效\r\n      - 外键约束\r\n         - 表约束: foreign key(字段) references 表(字段)\r\n      - 唯一约束\r\n         - 字段约束: unique\r\n         - 表约束(联合唯一索引): unique(字段)\r\n      - 非空约束\r\n         - 字段约束: not null\r\n      - 默认约束\r\n         - 字段约束: default 值\r\n- alter table 表 操作\r\n   - 操作\r\n      - add 字段 类型[ 单字段约束 ...] | 表约束\r\n      - drop 字段 | 约束名\r\n      - modify 字段 类型[ 约束 ...]\r\n## 记录\r\n\r\n- 增删改查\r\n   - select 映射子句[去重子句] | 归并函数 from 表 | 连接子句 [过滤子句[分组子句[分组筛选子句[排序子句[界限子句]]]]]\r\n   - insert into 表 values (值, ...)\r\n   - update 表 set 字段=值, ... 过滤子句\r\n   - delete from 表 过滤子句\r\n- 子句\r\n   - 映射子句: 字段, ...\r\n      - *可以表示映射字段\r\n   - 去重子句: distinct 字段\r\n   - 连接子句: 内连接和外连接中匹配不上的为null\r\n      - 笛卡尔积: 表, ...\r\n      - 内连接: 表 inner join 表 on 条件\r\n      - 外连接: 表 left join 表 on 条件, 表 right join 表 on 条件, 表 full join 表 on 条件\r\n   - 过滤子句: where 条件\r\n   - 分组子句: group by 字段, 必须配合归并子句一起使用\r\n   - 分组过滤子句: having 条件\r\n   - 排序子句: order by 字段 升降序, ...\r\n      - 升降序: asc升序, desc降序\r\n   - 界限子句: limit 开始索引,记录个数\r\n- 运算\r\n   - 普通函数\r\n      - now(): 返回当前时间\r\n   - 映射函数\r\n      - year(date类型字段)\r\n   - 归并函数\r\n      - max(字段)\r\n      - min(字段)\r\n      - avg(字段)\r\n      - count(字段)\r\n   - 四则运算: +, -, *, /\r\n   - 条件\r\n      - 变量: 表中的字段\r\n      - 运算符\r\n         - 布尔运算符: and, or, not\r\n         - 关系运算符: =, >=, <=, >, <\r\n         - 字段 in(值, ...)\r\n         - any(值, ...)\r\n         - all(值, ...)\r\n         - 字段 between 值 and 值\r\n         - 字段 like 模糊匹配字符串， 字段 not like 模糊匹配字符串\r\n            - 模糊匹配字符串\r\n               - %表示.*\r\n   - 别名: 字段 | 表 as 别名\r\n   - 多表查询时的作用域: 表.字段\r\n- 联合\r\n   - union\r\n## 事务\r\n\r\n- 自动提交事务变量\r\n   - @@autocommit, 1表示开启, 0表示关闭, 默认为1\r\n   - 设置: set @@autocommit=0或1\r\n- 事务回滚: rollback\r\n- 事务提交: commit\r\n- 手动事务\r\n   - 需要先关闭自动提交事务, set @@autocommit=0\r\n- 自动事务\r\n   - 开启事务: begin或start transaction\r\n- 事务四大特征: ACID\r\n   - A: 原子性, 事务是最小单位, 不可再分割\r\n   - C: 一致性, 事务要求, 同一事务中的sql语句, 必须保证同时成功或同时失败\r\n   - I: 隔离性, 事务1和事务2之间具有隔离性\r\n      - 隔离级别变量\r\n         - 系统级别: @@global.transaction_isolation\r\n         - 会话级别: @@transaction_isolation\r\n         - 系统级别设置: set global transaction isolation level 隔离级别\r\n         - 会话级别设置: set transaction isolation level 隔离级别\r\n      - 隔离级别\r\n         - read uncommitted: 脏读, 读未提交的\r\n         - read commited: 不可重复读, 读已经提交的\r\n         - repeatable read: 幻读, 可以重复读\r\n         - serializable: 串行化\r\n   - D: 持久性, 事务一旦结束, 就不可返回\r\n## 权限\r\n\r\n- flush privileges: 刷新权限\r\n- 创建用户: create user \'用户\'@\'主机\' identified by \'密码\'\r\n   - 主机: localhost表示本机, %表示所有主机\r\n- 删除用户: drop user \'用户\'@\'主机\'\r\n- 修改密码: alter user \'用户\'@\'主机\' identified by \'密码\'\r\n- 用户授权: grant 权限 on 库.表 to \'用户\'@\'主机\' [with grant option]\r\n   - 权限: all privileges, select, update, insert, delete, drop, create\r\n   - 库和表: 可以用通配符表示\r\n   - with grant option: 加上表示该用户可给其他用户赋权, 但不能超过本身权限\r\n- 撤销权限: revoke 权限 on 库.表 from \'用户\'@\'主机\'\r\n- 查看用户权限信息: show grants for \'用户\'@\'主机\'\r\n- 忘记密码\r\n   - vim /etc/my.cnf 添加 skip-grant-tables\r\n   - 重启mysqld服务\r\n   - 以此来跳过mysql权限不要密码就能登陆\r\n   - mysql.user中的user字段=\'root\'的数据中的authentication_string字段设为password(\"新密码\")即可\r\n', 8, '2021-04-29 12:38:14', '2021-04-29 12:38:16');
INSERT INTO `article` VALUES (21, 'Egg', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/21.png', NULL, 'Egg索引', '# 脚手架\r\n\r\n* 核心库\r\n    * dependencies\r\n        * egg\r\n    * devDependencies\r\n        * egg-bin\r\n            * 脚本\r\n                * egg-bin dev: 启动服务\r\n* 搭建\r\n    * npm init egg --type=simple\r\n    * npm i\r\n# 目录结构\r\n\r\n* app\r\n    * controller: 定义各种controller的文件夹\r\n        * xxx.js![图片](https://uploader.shimo.im/f/LFmPAJmoayuMsjlL.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk):暴露一个继承了require(\"egg\").Controller的类, 类中可定义多个异步函数用作路由绑定函数, 异步函数的this是Controller对象\r\n    * service\r\n        * xxx.js![图片](https://uploader.shimo.im/f/VD0SShvFtBiU1ezr.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk):暴露一个继承了require(\"egg\").Service的类, 类中可定义多个异步函数用作代替controller操作数据库的接口,异步函数的this是Service对象\r\n    * middleware\r\n        * xxx.js![图片](https://uploader.shimo.im/f/a7cB9aaoUpC1msyG.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk):暴露一个函数, 参数为options对象, options对象在config.default.js中config.middleware中配置, 返回一个异步函数, 异步函数参数为Context对象和一个next()函数![图片](https://uploader.shimo.im/f/VzhVoDVjx5DzYON9.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk)\r\n    * router.js![图片](https://uploader.shimo.im/f/Dw6BX0rt4LkP22sM.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk): 暴露一个函数, 参数为Application对象, 函数内使用Application对象的router进行路由配置, Application对象的controller和middleware可以获取路由配置所需处理函数\r\n* config\r\n    * config.default.js![图片](https://uploader.shimo.im/f/bmyo4dbvjnnrWdvx.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk): 暴露一个函数, 参数为appInfo插件配置, 返回值为config对象和userConfig对象, config.插件名 用于配置各种插件, config.middleware用于配置中间件, config.keys配置keys\r\n    * plugin.js![图片](https://uploader.shimo.im/f/v52x6CTaFXoRoy8B.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk): 插件导入\r\n* app.js: 暴露一个函数, 函数参数为Application对象, 函数用作Application对象进行监听事件或其他事情, 会在服务启动时调用\r\n# 类\r\n\r\n* Application\r\n    * 实例\r\n        * router: 定义路由规则\r\n            * get(路由, controller | middleware, ...)\r\n            * post(路由, controller | middleware, ...)\r\n            * put(路由, controller | middleware, ...)\r\n            * delete(路由, controller | middleware, ...)\r\n        * controller: 索引已存在的controller文件夹下controller的指针, 如controller.admin.index.index会索引到controller/admin/index.js中的index异步函数\r\n        * middleware: 索引已存在middleware文件夹下的中间件指针\r\n        * 插件名: 访问各个插件\r\n        * config: 访问插件的配置, config.插件名 能访问到指定插件的配置\r\n        * cache: 用作缓存\r\n    * 原型\r\n        * once(事件, 回调函数): 一次性绑定\r\n        * on(事件, 回调函数): 绑定事件\r\n    * 事件\r\n        * server: 服务启动时触发\r\n            * 事件参数: server\r\n        * error: 出现异常时触发\r\n            * 事件参数: Error对象, Context对象\r\n        * request: 请求到来时触发\r\n            * 事件参数: Context对象\r\n        * response: 发出响应时触发\r\n            * 事件参数: Context对象\r\n* Context\r\n    * 实例\r\n        * ctx\r\n        * app\r\n        * config\r\n        * service: 索引已存在service文件夹下的service指针\r\n        * logger\r\n        * csrf\r\n        * session: 会话域![图片](https://uploader.shimo.im/f/wTk7Rnef7ytfttWT.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk)\r\n        * state: 请求域\r\n* Request\r\n* Response\r\n* Controller\r\n    * 实例\r\n        * ctx: Context对象\r\n        * app: Application对象\r\n* Service\r\n    * 实例\r\n        * ctx\r\n        * app\r\n* Helper\r\n* Config\r\n* Logger\r\n# 安全\r\n\r\n* xss\r\n* csrf\r\n    * 服务端默认有设置, 自定义可在eggjs官网查看\r\n    * 客户端需要获取cookie中的csrfToken字段的值, 然后在请求头中设置x-csrf-token字段为其值\r\n* 钓鱼\r\n* http参数污染\r\n* 远程代码执行\r\n# 插件\r\n\r\n## egg-mysql\r\n\r\n* 配置\r\n    * plugin.js\r\n```plain\r\nexports.mysql = {\r\n  enable: true,\r\n  package: \'egg-mysql\',\r\n};\r\n```\r\n    * config.default.js\r\n```plain\r\nexports.mysql = {\r\n  // database configuration\r\n  client: {\r\n    // host\r\n    host: \'mysql.com\',\r\n    // port\r\n    port: \'3306\',\r\n    // username\r\n    user: \'test_user\',\r\n    // password\r\n    password: \'test_password\',\r\n    // database\r\n    database: \'test\',    \r\n  },\r\n  // load into app, default is open\r\n  app: true,\r\n  // load into agent, default is close\r\n  agent: false,\r\n};\r\n```\r\n* 使用\r\n    * Mysql对象\r\n        * 构造\r\n            * Application对象.mysql\r\n        * 原型\r\n            * SQL语句操作\r\n                * async query(SQL语句, 占位值数组)![图片](https://uploader.shimo.im/f/5srK9rmoJuV2MvZY.png!thumbnail?fileGuid=ctyTRwXQxxCHQ3Tk)\r\n            * 封装操作\r\n                * async select(表名, 条件)\r\n                * async get(表名, 条件)\r\n                * async insert(表名, 数据)\r\n                * async update(表名, 数据)\r\n                * async delete(表名, 条件)\r\n    * transaction对象 extends mysql对象\r\n        * 构造\r\n            * mysql对象.beginTransaction()\r\n        * 原型\r\n            * async commit(): 提交事务\r\n            * async rollback(): 回滚事务\r\n## egg-cors\r\n\r\n* 配置\r\n    * plugin.js\r\n```plain\r\nexports.cors = {\r\n  enable: true,\r\n  package: \'egg-cors\',\r\n};\r\n```\r\n    * config.default.js\r\n```plain\r\n// Support all configurations in @koa/cors\r\n// {app_root}/config/config.default.js\r\nexports.cors = {\r\n  // {string|Function} origin: \'*\',\r\n  // {string|Array} allowMethods: \'GET,HEAD,PUT,POST,DELETE,PATCH\'\r\n};\r\n```\r\n## egg-jwt\r\n\r\n* 配置\r\n    * plugin.js\r\n```plain\r\n// {app_root}/config/plugin.js\r\nexports.jwt = {\r\n  enable: true,\r\n  package: \"egg-jwt\"\r\n};\r\n```\r\n    * config.default.js\r\n```plain\r\n// {app_root}/config/config.default.js\r\nexports.jwt = {\r\n  secret: \"123456\"\r\n};\r\n```\r\n* 使用\r\n    * JWT对象\r\n        * 构造\r\n            * Application对象.jwt\r\n        * 原型\r\n            * sign(载荷, 密钥): 生成token, 载荷必须设置iat不然会乱码, exp尽量设置\r\n            * verify(token, 密钥, 回调函数): 回调函数有Error对象和payload两个参数\r\n    * JWT_Config对象\r\n        * 构造\r\n            * Application对象.config.jwt\r\n        * 实例\r\n            * secret: 生成签名的加密算法所用的密钥, 在配置中配置, 只读\r\n* 示例\r\n    * router.js\r\n```javascript\r\n\'use strict\';\r\n/**\r\n * @param {Egg.Application} app - egg application\r\n */\r\nmodule.exports = app => {\r\n  const { router, controller, jwt } = app;\r\n  router.get(\'/\', controller.home.index);	//普通的路由\r\n  router.post(\'/login\', controller.users.login);  //登录并生成Token\r\n  router.get(\'/list\', jwt, controller.users.list);	//需要验证Token的路由\r\n};\r\n```\r\n    * users.js\r\n```plain\r\n\'use strict\';\r\nconst Controller = require(\'egg\').Controller;\r\nclass UsersController extends Controller {\r\n	//验证登录并生成Token\r\n	async login() {\r\n	    const { ctx, app } = this;\r\n	    //获取用户端传递的参数\r\n		const { data } = ctx.request.body;\r\n		//验证data数据，判断是否登录成功\r\n		//......\r\n		//成功则生成Token\r\n		//生成Token\r\n      	const token = app.jwt.sign({\r\n        	userID: data.userID,	//需要存储的Token数据\r\n      	}, app.config.jwt.secret);\r\n      	//将生成的Token返回给前端\r\n      	ctx.body = token;\r\n	}\r\n	//验证Token\r\n	async list() {\r\n		const { ctx, app } = this;\r\n		console.log(ctx.state.user);\r\n		//打印的内容为：{ userID:\'2345613\', iat: 1602390850 }\r\n		//iat为过期时间\r\n		//userID是生成Token时传入的 需要存储的Token数据\r\n		ctx.body = \'验证成功！\';\r\n	}\r\n}\r\nmodule.exports = UsersController;\r\n```\r\n', 21, '2021-04-29 12:39:27', '2021-04-29 12:39:29');
INSERT INTO `article` VALUES (22, 'Docker', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/22.png', NULL, 'Docker索引', '# 安装\r\n\r\n* 官网:[http://www.docker.com/](http://www.docker.com/?fileGuid=8Jq3dhVVCGqkqr3V)\r\n* 文档:[https://docs.docker.com/](https://docs.docker.com/?fileGuid=8Jq3dhVVCGqkqr3V)\r\n```plain\r\n# 1.卸载旧版本\r\nyum remove docker \\\r\n                  docker-client \\\r\n                  docker-client-latest \\\r\n                  docker-common \\\r\n                  docker-latest \\\r\n                  docker-latest-logrotate \\\r\n                  docker-logrotate \\\r\n                  docker-engine\r\n                  \r\n# 2.安装yum-utils, 提供yum-config-manager来设置镜像的仓库\r\nyum install -y yum-utils\r\nyum-config-manager \\\r\n    --add-repo \\\r\n    https://download.docker.com/linux/centos/docker-ce.repo\r\nyum makecache fast\r\n# 3.安装docker, docker-ce社区版 ee企业版\r\nyum install docker-ce docker-ce-cli containerd.io -y\r\n# 4.启动docker\r\nsystemctl start docker\r\n# 5.运行hello-wrold测试docker是否运行成功\r\ndocker run hello-world\r\n# 6.卸载依赖\r\nyum remove docker-ce docker-ce-cli containerd.io\r\n# 7.删除资源\r\nrm -rf /var/lib/docker\r\n```\r\n# 配置\r\n\r\n* /var/lib/docker\r\n    * ./containers: 容器\r\n    * ./image: 镜像\r\n    * ./network: 网络配置\r\n    * ./volumes: 具名挂载与匿名挂载的卷\r\n    * ./plugins: 插件\r\n# 原理\r\n\r\n## 之前的虚拟机技术\r\n\r\n    * 资源占用十分多\r\n    * 冗余步骤多\r\n    * 启动慢\r\n\r\n![图片](https://uploader.shimo.im/f/LVch60GHgDgt4uBE.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## 容器化技术: 并非一个完整的操作系统\r\n\r\n    * 虚拟机运行一个完整的操作系统, 然后在这个系统上安装和运行软件\r\n    * 容器直接运行在宿主机上, 没有自己的内核, 只有应用和库的环境\r\n\r\n![图片](https://uploader.shimo.im/f/26JcA4DPdiJoJmJ5.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## DevOps(开发、运维)\r\n\r\n![图片](https://uploader.shimo.im/f/lE1ita5DuuZ1xPJo.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## Docker基本组成\r\n\r\n![图片](https://uploader.shimo.im/f/SknQ5PuJvV8DXVd5.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n    * 镜像(image)\r\n\r\n![图片](https://uploader.shimo.im/f/KExT0KHV6SiXVOY4.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n    * 容器(container)\r\n\r\n![图片](https://uploader.shimo.im/f/oGqj0AWT8EX5Ah11.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n    * 仓库(repository)\r\n\r\n![图片](https://uploader.shimo.im/f/AFoz2Go8152eTo79.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## Docker如何工作\r\n\r\n    * Client-Server结构的系统, Server的守护进程运行在主机, 通过Socket从客户端访问\r\n    * Server接收到Client的指令, 就会执行相应操作\r\n## Docker为什么比VM快\r\n\r\n    * Docker有着比虚拟机更少的抽象层\r\n    * Docker利用的是宿主机的内核, vm需要的是GuestOS\r\n\r\n![图片](https://uploader.shimo.im/f/SuAkIPwotKFSd1fT.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n![图片](https://uploader.shimo.im/f/Wa479EV75I9DoD4g.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n![图片](https://uploader.shimo.im/f/QqsBJy8xUJWDTfnx.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## Docker镜像加载原理(UnionFS联合文件系统)\r\n\r\n* bootfs(公有的): 系统启动的大头\r\n* rootfs(私有的): 每个容器都不一样, 把他分层次, 下载过的层就不用从新下了\r\n\r\n![图片](https://uploader.shimo.im/f/dktrpdZ4pHxgMCxo.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n![图片](https://uploader.shimo.im/f/iEU4VqahPXtixOGS.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## ![图片](https://uploader.shimo.im/f/f2ijxRbTvwoyJSN9.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## 容器数据卷\r\n\r\n* 目的: 容器的持久化和同步操作, 容器间也是可以数据共享的\r\n* 指定和具名和匿名挂载\r\n    * docker run -d -P --name nginx03 -v /home:/etc/nginx nginx\r\n    * -v 主机路径:容器内路径, 就是指定挂载\r\n    * docker run -d -P --name nginx01 -v /etc/nginx nginx\r\n    * -v 容器内路径, 就是匿名挂载\r\n    * docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx\r\n    * -v 名字:容器内路径, 就是具名挂载\r\n* 容器间数据共享: docker run --name nginx04 --volumes-from ningx01 -d nginx, 这个命令会使新的容器nginx04的容器卷与nginx01的容器卷共享\r\n## DockerFile\r\n\r\n* 基本概念\r\n    * 每个保留感激案子都是大写字母\r\n    * 执行从上到下顺序\r\n    * #表示注释\r\n    * 每一个指令都会创建提交一个新的镜像层\r\n    * DockerFile: 构建文件, 定义了一切不走, 源代码\r\n    * DockerImages: 通过DockerFile构建生成的镜像, 最终发布和运行的产品\r\n    * Docker容器: 容i去就是镜像运行起来提供服务器\r\n* 指令\r\n    * FROM 镜像: 基础镜像, 一切从这里开始构建\r\n    * ADD 主机路径 容器路径: 把文件添加到镜像中 自动解压, tomcat镜像, 这个tomcat压缩包, 添加内容\r\n    * COPY 主机路径 容器路径: 类似ADD， 把文件拷贝到镜像中\r\n    * MAINTAINER 作者<邮箱>: 镜像是谁写的, 姓名+邮箱\r\n    * ENV 变量名 变量值： 构建的时候设置环境变量\r\n    * WORKDIR 容器路径: 镜像的工作目录\r\n    * VOLUME: 挂载的目录\r\n    * EXPOSE 端口号: 指定暴露的端口\r\n    * RUN 指令: 镜像构建的时候需要运行的命令\r\n    * CMD [\"指令\",\"指令\",...]: 指定这个容器启动的时候要运行的命令, 只有最后一个会生效, 可被docker run里的命令替代\r\n    * ENTRYPOINT [\"指令\",\"指令\"]: 指定这个容器启动的时候要运行的命令, 可追加命令\r\n    * ONBUILD: 当构建一个被继承DockerFile这个时候会运行ONBUILD指令, 触发指令\r\n\r\n![图片](https://uploader.shimo.im/f/bIOFxSkIDOtjPzR8.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## Docker网络\r\n\r\n* docker0网卡是docker网关\r\n* 没多一个容器就会多一个网卡\r\n* 桥接模式, veth-pair技术\r\n\r\n![图片](https://uploader.shimo.im/f/4aUcr5YlMZWfqMvh.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n# ![图片](https://uploader.shimo.im/f/r1mmmr3v8PBghXkR.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n# ![图片](https://uploader.shimo.im/f/8U7Etq2bECpg7KME.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n# 指令\r\n\r\n![图片](https://uploader.shimo.im/f/WZ3OzdOOEEXTCJG1.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n![图片](https://uploader.shimo.im/f/WRcAWWjOfBLCPmpw.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n\r\n## docker\r\n\r\n* docker version: 查看版本\r\n* docker info: docker的系统信息, 包括镜像和容器数量\r\n* docker login -u 账号: 登录账号\r\n* docker 命令 --help: 命令帮助\r\n## 镜像\r\n\r\n* docker search 镜像: 搜索镜像仓库\r\n    * --filter=列名=值: 过滤操作\r\n* docker push 镜像名: 发布到镜像仓库\r\n* docker pull 镜像[:版本]: 从仓库下载一个镜像![图片](https://uploader.shimo.im/f/jmPlojhwQQwZGzz5.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)![图片](https://uploader.shimo.im/f/qYRoJY3YAeYZwHYd.png!thumbnail?fileGuid=8Jq3dhVVCGqkqr3V)\r\n* docker save\r\n* docker load\r\n* docker images: 查看本地镜像\r\n    * 输出解释\r\n        * REPOSITORY: 镜像的仓库源\r\n        * TAG: 镜像的标签\r\n        * IMAGE ID: 镜像的id\r\n        * CREATED: 镜像的创建时间\r\n        * SIZE: 镜像的大小\r\n    * 可选项\r\n        * -a: 列出所有镜像\r\n        * -q: 只显示镜像的id\r\n* docker commit 容器ID 目标镜像名[:版本]: 提交容器成为一个新的镜像\r\n    * -m=\"提交的描述信息\"\r\n    * -a=\"作者\"\r\n* docker build -f DockerFile的路径 -t 镜像名 .\r\n    * -f: dockerfile路径, 若文件名在当前文件夹中就是Dockerfile则不用指定-f\r\n    * -t: 镜像名\r\n* docker rmi: 删除镜像\r\n    * 参数\r\n        * ID: 删除单个镜像\r\n        * $(docker images -q): 删除多个镜像\r\n    * 可选项\r\n        * -f: 强制删除\r\n## 容器\r\n\r\n* docker run: 启动一个镜像, 现在本地找镜像, 找不到再去公有库找\r\n    * 参数\r\n        * 镜像 命令\r\n        * 无: 此时需指定-it 镜像 命令 或 -d 镜像 命令\r\n    * 可选项\r\n        * -d: 后台方式运行容器, 若启动后没有对外提供服务则自动立刻停止\r\n        * -it 镜像 /bin/bash: 启动此镜像时, 在新建的容器中开启一个bash并移交IO给它\r\n        * --name=\"容器名\": 指定容器名字\r\n        * --net: 网络配置\r\n        * -p: 指定容器的端口\r\n            * 参数\r\n                * ip地址:主机端口:容器端口\r\n                * 主机端口:容器端口(常用)\r\n                * 容器端口\r\n        * -P: 随机指定端口\r\n        * -e \"环境配置修改\"\r\n        * -v: 容器数据卷, 可映射多个路径\r\n            * 参数\r\n                * 主机目录:容器目录: 指定挂载\r\n                * 名字:容器目录: 具名挂载\r\n                * 容器目录: 匿名挂载\r\n        * --volumes-from 容器ID: 继承另一个容器的数据卷\r\n* docker ps: 查看运行中的容器\r\n    * -a: 显示曾经运行的容器\r\n    * -n=个数:显示最近创建的n个容器\r\n    * -q: 只显示容器ID\r\n* docker rm: 删除容器\r\n    * 参数\r\n        * ID: 删除单个容器\r\n        * $(docker ps -q): 删除多个容器\r\n    * 可选项\r\n        * -f: 强制删除容器\r\n* 容器退出\r\n    * 不关闭退出: ctrl + p + q\r\n    * 关闭容器退出: exit\r\n## 容器状态\r\n\r\n* docker start|restart|stop|kill|pause|unpause 容器ID: 启动 或 重启 或 停止 或 杀死 或 暂停 或 取消暂停 容器\r\n* docker logs -tf --tail 10 容器ID: 查看容器日志\r\n* docker top 容器ID: 查看指定容器的进程状态\r\n* docker inspect 容器ID: 查看容器的所有信息\r\n* docker exec -it 容器ID /bin/bash: 在该容器开启新的bash, 并将IO交给这个新的bash\r\n* docker attach 容器ID /bin/bash: 将IO交给容器中现有的bash\r\n* docker cp 容器ID:容器内路径 本机路径: 在容器与本机间拷贝文件\r\n* docker volume: 查看容器卷\r\n    * 参数\r\n        * create: 创建一个容器卷\r\n        * ls: 列出所有容器卷\r\n        * inpect 卷名: 某个容器卷的详细信息\r\n        * prune: 删除所有没用的容器卷\r\n        * rm 卷名: 删除一个容器卷\r\n* docker history 镜像: 查看镜像如何一步步构建的过程\r\n\r\n', 16, '2021-04-29 12:42:51', '2021-04-29 12:42:53');
INSERT INTO `article` VALUES (23, 'Linux', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/23.png', NULL, 'Linux索引', '* 计算\r\n    * 存储\r\n    * 存储上的操作\r\n    * 网络的客户端与服务器\r\n    * 磁盘的客户端\r\n    * 标准IO的服务器\r\n* 复用\r\n    * 标识: 数据的复用\r\n    * 条件跳转和无条件跳转: 过程的复用\r\n* 传信息的方式\r\n    * 主动接收: 监听\r\n    * 被动接收: 中断\r\n    * 主动发送: 客户端\r\n    * 被动发送: 服务器\r\n# 虚拟机\r\n\r\n* 快照\r\n    * 类似git分支管理\r\n* vdi格式\r\n    * 虚拟机的硬盘\r\n* 共享文件夹\r\n    * 安装vmtool, 虚拟机挂在共享文件夹\r\n# 目录\r\n\r\n* /usr/: 用户安装的应用程序和文件都放在这里, 类似于windows的program files\r\n    * ./lib/: 库文件存放目录\r\n    * ./lib64/: 64位的库文件存放目录\r\n    * ./bin/: 用户常用的命令\r\n        * ./usr/bin\r\n        * ./usr/local/bin\r\n    * ./sbin/: 根用户常用的命令\r\n        * ./usr/sbin\r\n        * ./usr/local/sbin\r\n    * ./include/: 头文件存放目录\r\n    * ./share/: 帮助文档与共享文档存放路径\r\n    * ./local/: 用户自己安装的程序与编译完成程序存放目录\r\n* /etc(常用): 配置文件存放目录\r\n* /home(常用): 存放普通用户的主目录\r\n* /root(常用): 系统管理员的用户主目录\r\n* /lost+found: 一般情况下为空, 系统非法关机后, 这里就存放了一些文件\r\n* /boot(常用): 存放Linux启动文件\r\n* /proc(不能动): 虚拟目录, 系统内存的映射, 访问这个目录获取系统信息\r\n* /srv(不能动): 存放一些服务启动之后需要提取的数据\r\n* /sys(不能动): 安装了2.6内核中新出现的文件系统sysfs\r\n* /tmp: 用来存储临时文件\r\n* /dev: 设备管理器, 把所有的硬件用文件的形式存储\r\n* /media(常用): 自动识别一些设备, 如U盘、光驱, 识别之后把识别的设备挂载到这个目录下\r\n* /mnt(常用): 为了让用户临时挂载别的文件系统, 我们可以将外部的存储挂载在/mnt上\r\n* /opt: 给主机额外安装软件所存放的目录\r\n* /var(常用): 存放不断扩充的东西, 习惯将经常被修改的目录放在这个目录下, 最经典的就是日志\r\n    * ./log: 日志存放目录\r\n* /selinux: SELinux是一种安全子系统, 能控制程序只能访问特定文件, 有三种工作模式, 可自行设置\r\n# shell编程\r\n\r\n![图片](https://uploader.shimo.im/f/kSdwl4CRUpf6Eu75.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n* 文件头: #!/bin/bash\r\n* 执行\r\n    * 添加权限x设为可执行文件\r\n    * sh shell文件 或 -c \"命令\"\r\n    * source shell文件: 在本shell中执行shell文件\r\n* 注释\r\n    * 单行注释: #\r\n    * 多行注释: :<<! ... ... !\r\n* 变量\r\n    * 自定义变量\r\n        * 定义变量: 变量名=值\r\n        * 撤销变量: unset 变量\r\n        * 静态变量: readonly 变量=值, 无法撤销\r\n        * 命令赋值: 变量=`命令`or变量=$(命令)\r\n        * 规则\r\n            * 变量名可以由字母、数字和下划线组成, 但是不能以数字开头\r\n            * 等号两侧不能有空格\r\n            * 变量名称一般习惯为大写, 这是一个规范\r\n    * 系统环境变量\r\n        * /etc/profile文件里用 export 变量名=值 定义环境变量\r\n        * source /etc/profile 让修改后的配置信息立即生效\r\n    * 预定义变量\r\n        * $: 当前进程PID\r\n        * !: 后台运行的最后一个进程的进程号\r\n        * ?: 最后一次执行命令的返回状态, 0表示正确执行, 非0表示错误\r\n    * 位置参数![图片](https://uploader.shimo.im/f/nAt1VDDz77ilVpH2.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n        * n\r\n        * *\r\n        * @\r\n        * #\r\n    * 调用: $变量\r\n* 函数\r\n    * 定义: function funcName() { ... ... }\r\n    * 调用: funcName arg1 arg2...\r\n* 运算符![图片](https://uploader.shimo.im/f/FTjMb1jatAWPC3ij.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * 四则运算\r\n        * + - \\* / %\r\n        * 语法: $((运算式)) $[运算式] expr 运算式\r\n    * 布尔运算![图片](https://uploader.shimo.im/f/Q3WB6FQlc15bc2Km.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* 流程控制\r\n    * 分支\r\n        * if [ condition ] then ... ...[ elif [ condition ] then ... ...] fi![图片](https://uploader.shimo.im/f/lWo4lkm9TwKnriw9.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/OnsN6VblFonzvZBm.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n        * [ condition ] && ... ... || ... ...\r\n        * case![图片](https://uploader.shimo.im/f/netkJq9fwK8BmCcu.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * 循环\r\n        * for var in value1 value2 value3 do ... ... done![图片](https://uploader.shimo.im/f/ECsBFXtusZYZxN3n.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n        * for((初始;比较;变化)) do ... ... done\r\n        * while [ condition ] do ... ... done![图片](https://uploader.shimo.im/f/voO1xWl9zUOS5Vbl.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* 标准IO\r\n    * echo 输出内容: 输出内容到控制台, 可输出环境变量\r\n    * read: 读取控输入内容\r\n        * 选项\r\n            * -p: 指定读取值时的提示符\r\n            * -t: 指定读取值时的等待时间\r\n        * 参数\r\n            * 变量: 指定读取值得变量名\r\n* 时间\r\n    * sleep 秒数: 令脚本暂停几秒\r\n# 指令\r\n\r\n## 命令行\r\n\r\n* tab键: 命令补全\r\n* man 命令或配置文件: 获得帮助信息\r\n* help\r\n* clear: 清空命令行\r\n* history [条数]: 历史指令\r\n* !指令编号: 执行指定编号的历史指令\r\n* \\命令: 自动确认\r\n* 命令 &:以后台方式运行\r\n* 命令 nohup: 以后台方式运行\r\n* &&: 指令一起执行\r\n* ctrl+u: 删除当前行命令\r\n## 系统\r\n\r\n### 内核\r\n\r\n* 配置文件\r\n    * /etc/os-realease\r\n* uname -r: 内核版本信息\r\n### 主机名\r\n\r\n* 配置文件\r\n    * ./hostname文件: 主机名配置文件\r\n* 指令\r\n    * hostname: 显示主机名\r\n### 环境变量\r\n\r\n* 配置文件\r\n    * /etc/profile文件: 环境变量配置文件, export $环境变量=值来设置环境变量, 改了后要用source命令使其生效\r\n* 指令\r\n    * set: 查看所有环境变量\r\n### 启动\r\n\r\n* shutdown: 关机或重启, 默认 shutdown -h 1\r\n    * -h: 关机\r\n        * now: 立刻关机\r\n        * num: num分钟后关机,\r\n    * -r: 重启\r\n        * now: 立刻重启\r\n* halt: 关机\r\n* reboot: 重启\r\n* sync: 内存数据同步到磁盘![图片](https://uploader.shimo.im/f/d1YuQHtfGCVxPviv.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* init 运行级别: 切换运行级别\r\n    * 0: 关机\r\n    * 1: 单用户(找回丢失密码)\r\n        * 重启过程中按e进入编辑界面\r\n        * 找到fi linux16\r\n        * 在UTF-8后空格添加init=/bin/sh\r\n        * 摁ctrl+x进入单用户模式\r\n        * 输入mount -o remount,rw /\r\n        * 在新的一行输入passwd, 然后输入两次密码\r\n        * 输入touch /.autorelabel\r\n        * 输入exec /sbin/init\r\n    * 2: 多用户状态没有网络服务\r\n    * 3: 多用户状态有网络服务\r\n    * 4: 系统未使用保留给用户\r\n    * 5: 图形界面\r\n    * 6: 系统重启\r\n    * 常用运行级别是3和5, 也可以指定默认运行级别\r\n* systemctl get-default: 获取默认运行级别\r\n* systemctl set-default TARGET.target: 设置默认运行级别\r\n    * multi-user.target: 设置默认运行级别为3\r\n    * graphical.target: 设置默认运行级别为5\r\n### 备份与恢复\r\n\r\n* ![图片](https://uploader.shimo.im/f/Lmgfy37zZMtAVNjU.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* 方式一: tar打包与解压\r\n* 方式二: dump, restore命令\r\n    * dump![图片](https://uploader.shimo.im/f/umDDnsWKUYise8X5.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/v8wgq1ZpYanIpVJU.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/iwCZPKEKobQ2sBZu.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * restore![图片](https://uploader.shimo.im/f/IIzD2OFov0dMXmWy.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/is5W6Pk25LKMgh48.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/DqO30gep8BiWuLAu.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n### 时间\r\n\r\n* date [+时间格式]: 显示时间信息\r\n    * 时间格式\r\n        * %y: 年\r\n        * %m: 月\r\n        * %d: 日\r\n        * %H: 时\r\n        * %M: 分\r\n        * %S: 秒\r\n    * -s 时间: 设置时间\r\n* cal [年份]: 显示本月日历或指定年份日历\r\n## 文件目录\r\n\r\n### 路径\r\n\r\n* pwd: 显示当前所在dirpath\r\n* ls [dir]: 查看当前或指定dir下的所有file及dir\r\n    * -a: 显示隐藏file(linux下隐藏file以.开头)\r\n    * -l: 单列输出显示更详细信息, ls -l可简写成ll\r\n        * -rwxrw-r-- 1 root root 1213 Feb 2 09:39 abc\r\n        * 第0-9位\r\n            * 0位确定文件类型\r\n                * -是普通文件\r\n                * l是链接\r\n                * d是目录\r\n                * c是字符设备, 鼠标, 键盘\r\n                * b是块设备, 比如硬盘\r\n            * 1-3位确定所有者拥有的该资源的权限--user\r\n            * 4-6位确定所属组拥有该文件的权限--group\r\n            * 7-9位确定其他组拥有该文件的权限--other\r\n            * rwx也可用数字表示,r=4,w=2,x=1,和来表示rwx\r\n        * file为1, dir表示里面的子dir和file数之和\r\n        * 所有者\r\n        * 所属组\r\n        * file显示大小(字节), dir显示4096\r\n        * 最后修改日期\r\n    * -R: 递归\r\n    * -h: 以人更适合的方式显示\r\n* tree [dir]: 以树形结构查看指定目录\r\n* find: 从指定dir向下递归遍历各个子dir, 将满足条件的file或dir显示在终端\r\n    * -name file或dir: 指定file或dir\r\n    * -user user: 指定user\r\n    * -size filesize: 指定filesize![图片](https://uploader.shimo.im/f/2elazC72kxmBuTce.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * -atime +10: 指定时间, 这里指定的是10天前的文件\r\n* locate file: 查询filepath, 使用之前需更新其查询数据库updatedb\r\n* which cmd: 查询cmd的filepath\r\n* whereis 关键字: 查询关键字命令\r\n* basename 路径 [后缀]: 获取路径中文件名[可取消后缀]![图片](https://uploader.shimo.im/f/8HRQjowOvSAImDV4.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* dirname 绝对路径: 获取路径中的目录部分\r\n* cd dir: 切换dir\r\n* mkdir dir: 创建dir\r\n    * -p: 创建多级dir\r\n* touch file: 创建一个空file\r\n* cp source dest: 拷贝file或dir\r\n    * -r: 递归复制\r\n* ln source dest: 创建一个链接\r\n    * -s: 创建软链接\r\n* mv source dest: 移动file或dir\r\n* rmdir dir: 删除dir\r\n* rm 路径: 强制删除dir或file\r\n    * -r: 递归删除\r\n    * -f: 强制删除\r\n### 文件内容\r\n\r\n* grep format file: 过滤文件内容并输出\r\n    * -n: 显示行号\r\n    * -i: 忽略字母大小写\r\n    * -v: 反向匹配\r\n* wc: 统计\r\n    * -l: 统计行数\r\n    * -c: 统计字节数\r\n    * -w: 统计字数\r\n* cut: 切割内容的每一行![图片](https://uploader.shimo.im/f/Ia217BYMPNrW3jLK.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * -d 切割点: 以什么为切割点\r\n    * -f 段数: 切割结果为第几段\r\n* awk![图片](https://uploader.shimo.im/f/0AzDZpZ0bhbo3bQZ.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    \r\n    * -F \"切割点\" \'{print $段数}\': 按切割点分割, 并显示指定段\r\n* sort: 将内容进行排序![图片](https://uploader.shimo.im/f/SwSXiQFDhVcugA3N.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    \r\n    * -nr: 从大到小排序, 默认从小到大\r\n* uniq: 只显示单独项\r\n    \r\n    * -c: 统计每个单独项出现的次数![图片](https://uploader.shimo.im/f/fUalyIHAIlWV4aEq.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* |: 管道符, 跟xargs可以根据过滤器传递参数个数多次执行\r\n* >: 输出重定向, 覆盖\r\n* >>: 输出重定向, 追加\r\n* cat file: 查看file内容\r\n    \r\n    * -n: 显示行号\r\n* more file: 查看file内容\r\n    * space键: 翻页\r\n    * enter键: 翻行\r\n    * ctrl+f键: 向下滚一屏\r\n    * ctrl+b键: 返回上一屏\r\n    * =键: 输出当前行号\r\n    * q键: 离开\r\n* less file: 查看file内容, 一点点加载\r\n    * PgUp: 向上翻页\r\n    * PgDn: 向下翻页\r\n    * /关键字: 查找关键字\r\n    * n: 向下切换关键字\r\n    * N: 向上切换关键字\r\n* head file: 查看file前几行, 默认前10行\r\n    \r\n    * -n 行数: 查看的行数\r\n* tail file: 查看file末几行, 默认末10行\r\n    * -n 行数: 查看的行数\r\n    * -f: 实时追踪文档更新\r\n* vi或vim file: 编辑file\r\n    * vim命令行\r\n        * 正常模式: esc回退到正常模式\r\n            * yy键: 拷贝当前行, 5yy拷贝5行\r\n            * dd键: 删除当前行, 5dd删除5行\r\n            * p键: 粘贴\r\n            * u键: 撤销\r\n            * n键: 切换光标到下一个关键字\r\n            * Home键, End键: 移动到行首或行末\r\n            * 行号 + shift + g: 定位到指定行号\r\n            * gg键, G键: 定位到首行或末行\r\n            * PgUp键, PgDn键: 翻页\r\n        * 插入模式: 摁i键从正常模式进入\r\n        * 命令行模式: 摁:键从正常模式进入\r\n            * w: 保存\r\n            * q: 退出\r\n            * wq: 保存并退出\r\n            * q!: 强制退出\r\n            * set nu, set nonu: 设置或取消行号\r\n        * 查找模式: 摁/键从正常模式进入\r\n            * 关键字: 对关键字进行查找\r\n* 查看日志![图片](https://uploader.shimo.im/f/S7WJETeuI762GFb6.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n### 压缩解压\r\n\r\n* gzip file: 压缩file成.gz\r\n* gunzip file: 解压.gz的file\r\n* zip dest source: 压缩file或dir成.zip,压缩dir必须开启-r\r\n    * -r: 递归压缩\r\n* unzip file: 解压.zip的file\r\n    * -d: 指定解压path\r\n* tar file: 打包或压缩.tar.gz文件\r\n    * -c: 产生.tar打包文件\r\n    * -v: 显示详细信息\r\n    * -f: 指定压缩后的文件名\r\n    * -z: 打包同时压缩\r\n    * -x: 解包.tar文件\r\n    * 压缩成.tar.gz: tar -zcvf dest source\r\n    * 解压.tar.gz: tar -zxvf source -C dest\r\n    * 解压.tar: tar -xvf dest -C source\r\n## 权限\r\n\r\n### 用户\r\n\r\n* 配置文件\r\n    * /etc/passwd文件: 用户的配置文件, 记录用户的各种信息, 每行含义 用户名:口令:uid:gid:注释行描述/主目录/登录Shell\r\n    * /etc/shadow文件: 存放加密后的用户口令\r\n* 指令\r\n    * useradd user: 创建用户, 默认该用户的homedir在/home/用户\r\n        * -d dir: 指定homedir\r\n        * -g: 指定组名, 若无直接创建与用户同名的组并加入到其中\r\n    * userdel user: 删除用户, root用户才有这个权限\r\n        * -r: 删除用户同时删除homedir\r\n    * usermod user: 修改用户\r\n        * -g: 指定group\r\n        * -d: 指定homedir\r\n    * passwd [user]: 设置密码, 如果不指定用户则是给当前用户设置密码(root用户才有给其他用户设置密码的权限)\r\n    * id user: 查询用户信息\r\n    * sudo cmd: 以root用户权限运行命令\r\n    * su user: 切换用户并为此用户创建新的bash进程, 高权限到低权限不需要密码, 反之需要\r\n        * -: 显示上一次登录信息, 并将当前路径切换到homedir\r\n    * logout: 返回切换用户前的用户(运行级别3)\r\n    * exit: 返回切换用户前的用户\r\n    * who: 查询当前用户\r\n    * who am i: 查询当前登录的用户\r\n    * w, who, users: 返回已登录的用户信息\r\n### 组\r\n\r\n* 配置文件\r\n    * /etc/group文件: 组的配置文件, 每行含义 组名:口令:gid:组内用户列表\r\n* 指令\r\n    * groupadd group: 添加组\r\n    * gourpdel group: 删除组\r\n### 资源\r\n\r\n* chown user path: 改变资源的所有者\r\n    * -R: 递归改变\r\n* chgrp group path: 改变资源的所属组\r\n    * -R: 递归改变\r\n* chmod rights path: 改变资源的权限![图片](https://uploader.shimo.im/f/9rEzudJKBWLKNFuq.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/eJrSY4DKP0MwJDqY.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n## 包管理\r\n\r\n* x86_64: 适用于64位系统\r\n* i686, i386: 适用于32位系统\r\n* noarch: 通用\r\n### rpm\r\n\r\n* rpm: .rpm包管理工具\r\n    * -q package: 查询是否安装指定软件包\r\n    * -qa: 查询所有已安装软件包\r\n    * -qi package: 查询已安装指定软件包信息\r\n    * -ql package: 查询已安装指定软件包中的文件\r\n    * -qf path: 查询dir或file属于哪个软件包\r\n    * -e[ --nodeps] package: 卸载[强制]指定软件包\r\n    * -ivh 软件包全路径: 安装指定软件包\r\n### yum\r\n\r\n* 配置文件\r\n    * /etc/yum.repos.d/\r\n* yum install 包: 安装指定包\r\n* yum remove 包: 卸载指定包\r\n* yum search 包: 搜索包的相关信息\r\n* yum provides 包: 查看包来源\r\n* yum whatprovides 命令: 查询命令在什么包中\r\n* yum list: 查看服务器中可安装的软件包列表\r\n* yum info kernel -q: 检测内核版本, 显示可以升级的内核\r\n* yum-config-manager --add-repo 仓库: 更新仓库\r\n* yum makecache fast: 更新源\r\n* yum update kernel: 升级内核\r\n### dpkg\r\n\r\n* dpkg: .deb包管理工具\r\n    * -l: 显示已安装的软件列表\r\n    * -i 包: 安装指定包\r\n    * -i --instdir=包安装路径 包: 安装包到制定路径\r\n    * -r 包: 删除指定包\r\n    * -P 软件: 删除软件同时删除其配置文件\r\n    * -L 软件: 显示与软件关联的文件\r\n    * --unpack: 解开包\r\n    * -c: 显示包内文件列表\r\n    * --configure: 配置软件\r\n### apt\r\n\r\n* 配置文件\r\n    * /etc/apt/sources.list: 修改源\r\n* shell\r\n    * apt-get update: 更新源\r\n    * apt-get dist-upgrade: 更新系统\r\n    * apt-get install 包名: 安装包\r\n        * --reinstall: 重新安装\r\n        * -f: 修复安装\r\n    * apt-get build-dep 包名: 安装相关的编译环境\r\n    * apt-get source 包名: 下载包的源码\r\n    * apt-get upgrade: 更新已安装的包\r\n    * apt-get remove 包名: 卸载包\r\n        * --purge: 删除包括配置文件\r\n    * apt-cache search 包名: 搜索包\r\n    * apt-cache show 包名: 获取包信息\r\n    * apt-cache depends 包名: 获取包的依赖信息\r\n    * apt-cache rdepends 包名: 获取包的被依赖信息\r\n## 磁盘\r\n\r\n![图片](https://uploader.shimo.im/f/r3Xja9wprfizQbA3.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n### 磁盘信息\r\n\r\n* lsblk: 查询磁盘信息\r\n    * -f: 更详细的磁盘信息\r\n* df: 整体磁盘使用情况\r\n    * -h: 带计量单位\r\n* du [dir]: 查询指定目录的磁盘占用情况, 默认为当前目录\r\n    * -s: 指定dir占用大小汇总\r\n    * -h: 带计量单位\r\n    * -a: 含文件\r\n    * --max-depth=1: 子目录深度\r\n    * -c: 列出明细同时, 增加汇总值\r\n### 磁盘分区\r\n\r\n* 配置文件\r\n    * /etc/fstab文件: 磁盘分区挂载配置文件\r\n* 指令\r\n    * fdisk dev: 磁盘分区![图片](https://uploader.shimo.im/f/pj9uTLdJxxo5CN5w.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n### 磁盘格式化\r\n\r\n* mkfs dev: 格式化磁盘(指定磁盘文件系统)\r\n    * 类型\r\n        * windows\r\n            * ntfs:支持最大分区2TB，最大文件2TB，安全性和稳定性非常好，不易出现文件碎片。\r\n            * fat16：MS—DOS和win95采用的磁盘分区格式，采用16位的文件分配表，只支持2GB的磁盘分区，最大单文件2GB，且磁盘利用率低\r\n            * fat32：（即Vfat）采用32位的文件分配表，支持最大分区128GB，最大文件4GB\r\n        * linux\r\n            * ext2具有极快的速度和极小的CPU占用率，可用于硬盘和移动存储设备\r\n            * ext3增加日志功能，可回溯追踪\r\n            * ext4日志式文件系统，支持1EB（1024*1024TB），最大单文件16TB，支持连续写入可减少文件碎片。rhel6默认文件系统\r\n            * xfs可以管理500T的硬盘。rhel7默认文件系统\r\n            * brtfs文件系统针对固态盘做优化\r\n            * swap: 交换分区文件系统, 提供虚拟内存\r\n        * 其他\r\n            * RAMFS: 内存文件系统\r\n            * ISO 9660: 光盘文件系统\r\n            * NFS: 网络文件系统\r\n            * SMBAFS/CIFS: 支持Samba协议的网络文件系统\r\n    * -t ftype: 指定文件系统类型\r\n### 磁盘挂载\r\n\r\n* 挂载独立分区的目录\r\n    * boot: 操作系统启动分区\r\n    * swap: 交换分区\r\n* 指令\r\n    * mount dev dir: 挂载分区到指定dir\r\n    * umount dev或dir: 卸载指定分区\r\n## 网络\r\n\r\n* 虚拟机网络分类\r\n    * 桥接模式\r\n    * NAT模式\r\n    * 主机模式\r\n* 配置文件\r\n    * /etc/sysconfig/network-scripts/网卡: 网络配置文件\r\n        * BOOTPROTO: ip地址分配方式, dhcp或者static\r\n        * IPADDR: 静态分配的ip地址\r\n        * GATEWAY: 静态分配的网关\r\n        * DNS1: 域名解析地址\r\n    * ./hosts文件: 本机DNS服务配置文件\r\n* 服务: network\r\n* 指令\r\n    * ping net\r\n    * ifconfig: 查看网络配置信息\r\n    * ip a: 查看网络信息\r\n    * netstat: 查看端口使用情况\r\n        * -an: 按一定顺序排列输出\r\n        * -p: 显示哪个进程在调用\r\n    * curl ip地址:端口: 向该地址发起http请求\r\n    * wget url: 获取指定url返回的文件\r\n    * nmcli c reload(centos8): 重载网络配置\r\n    * nmcli d reapply 网卡名(centos8): 重启网卡\r\n## 进程\r\n\r\n* ps: 查看系统中的进程\r\n    * 列信息\r\n        * USER\r\n        * PID\r\n        * PPID\r\n        * %CPU\r\n        * %MEM\r\n        * VSZ: 虚拟内存占用\r\n        * RSS: 物理内存占用\r\n        * TTY: 终端信息\r\n        * STAT: 运行状态\r\n            * S: 休眠\r\n            * R: 运行\r\n            * D: 短期等待\r\n            * Z: 僵死\r\n            * N: 优先级比普通更低\r\n            * T: 被跟踪或被停止\r\n            * s: 会话的先导进程\r\n        * START: 执行的开始时间\r\n        * TIME: 占用的CPU时间\r\n        * COMMAND: 执行该进程的指令\r\n    * -a: 显示当前终端所有进程\r\n    * -u: 以用户的格式显示\r\n    * -x: 显示后台进程运行的参数\r\n    * -e: 显示所有进程\r\n    * -f: 以全格式显示\r\n    * -C 进程名: 列出指定进程名的相关信息\r\n    * --no-header: 以无表头的形式显示\r\n* pstree: 查看进程树\r\n    * -u: 显示进程的所属用户\r\n    * -p: 显示进程的PID\r\n* top: 动态监控进程\r\n    * -d 秒数: 指定每隔几秒更新, 默认3秒\r\n    * -i: 使top不显示任何闲置或者僵死进程\r\n    * -p: 通过指定监控进程ID来仅仅监控某个进程的状态\r\n    * 交互\r\n        * P键: 按CPU使用率排序\r\n        * M键: 按内存使用率排序\r\n        * N键: 按PID排序\r\n        * u键: 查看指定用户进程\r\n        * k键: 终止指定进程\r\n        * q键: 退出top\r\n* kill pid: 终止指定pid的进程与其子进程\r\n    * -9: 强制终止\r\n* killall 进程名: 终止指定进程名的进程与其子进程\r\n## 服务\r\n\r\n* 配置文件\r\n    * /usr/lib/systemd/system目录: systemctl可以管理的服务\r\n    * /etc/init.d目录: service指令管理的服务\r\n* systemctl start或stop或restart或reload或status 服务名: 启动指定服务\r\n* setup: 查看服务, 设置服务自启动\r\n* chkconfig 服务名 off或on: 查看service管理的服务在各个运行级别下的自启动状态\r\n    * --list: 查看服务\r\n    * --level 运行级别 服务名 off或on: 设置服务在各个级别上的自启动\r\n* systemctl list-unit-files: 查看systemctl管理的服务在3和5运行级别下的自启动状态\r\n* systemctl enable 服务名: 设置服务在3和5运行级别下自启动\r\n* systemctl disable 服务名: 关闭服务在3和5运行级别下自启动\r\n* systemctl is-enabled 服务名: 查询指定服务是否在3和5运行级别下自启动\r\n### 防火墙\r\n\r\n* 客户: firewall-cmd\r\n* 服务: firewalld\r\n* 指令\r\n    * firewall-cmd --list-all: 查看用户开放的所有端口\r\n    * firewall-cmd --zone=public --list-ports: 查看所有用户自己开放的端口\r\n    * firewall-cmd --permanent --add-port=端口号/协议: 开放端口访问\r\n    * firewall-cmd --permanent --remove-port=端口号/协议: 关闭端口访问\r\n    * firewall-cmd --reload: 重新载入服务才能生效\r\n    * firewall-cmd --query-port=端口/协议: 查询端口是否开放\r\n### 任务调度\r\n\r\n* 客户: crontab at\r\n* 服务: crond atd\r\n* 指令\r\n    * 周期任务\r\n        * crontab:![图片](https://uploader.shimo.im/f/4aGQ1w8MJJRzBsE2.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n            * -e: 编辑crontab定时任务![图片](https://uploader.shimo.im/f/vIJhvwuJ5X7OwH6a.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n                * 5个占位符的说明\r\n                    * 第一个: 一小时中的第几分钟0-59\r\n                    * 第二个: 一天中的第几小时0-23\r\n                    * 第三个: 一个月中的第几天1-31\r\n                    * 第四个: 一年中的第几月1-12\r\n                    * 第五个: 一周中的星期几0-7(0和7都代表星期日)\r\n                * 特殊符号![图片](https://uploader.shimo.im/f/6hWOoEi2ASjlYLRg.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n                    * *: 代表任何时间\r\n                    * ,: 代表不连续时间\r\n                    * -: 代表连续时间\r\n                    * */n: 代表每隔多久执行一次\r\n            * -l: 查询crontab任务\r\n            * -r: 删除当前用户所有crontab任务\r\n    * 定时任务\r\n        * at:![图片](https://uploader.shimo.im/f/jSyqWHKvSwoJ1NkV.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/DcAvztALVFpqzcEb.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n            * -m: 指定任务被完成后, 给用户发送邮件\r\n            * -I: atq的别名\r\n            * -d: atrm的别名\r\n            * -v: 显示任务将被执行的时间\r\n            * -c: 打印任务的内容到标准输出\r\n            * -V: 显示版本信息\r\n            * -q 队列: 使用指定的队列\r\n            * -f file: 从指定文件读入任务而不是从标准输入读入\r\n            * -t 时间参数: 以时间参数的形式提交要运行的任务\r\n### 日志\r\n\r\n* 配置文件\r\n    * /etc/rsyslog.conf: 日志管理\r\n        * 日志类型:![图片](https://uploader.shimo.im/f/Now3VG5pyaKHsDkU.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n        * 日志级别:![图片](https://uploader.shimo.im/f/1Gtplgzn1ipUzjry.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * /etc/logrotate.conf: 日志轮替![图片](https://uploader.shimo.im/f/wBtUaOo62uqwylxG.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/rxbmsDLsg5vEfUsD.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/k7oT5OTIgqV9exT7.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n    * /etc/logrotate.d: 自定义日志轮替的目录![图片](https://uploader.shimo.im/f/rlqcvnoBkCR3oYpz.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* 日志文件: /var/log/\r\n    * 事件产生的时间\r\n    * 产生事件的服务器的用户名\r\n    * 产生事件的服务名或程序名\r\n    * 事件的具体信息\r\n* 服务: rsyslog\r\n* 指令\r\n    * logrotate(在crond管理下每天执行, 不用手动执行)\r\n    * journalctl: 内存日志\r\n        * -n 行数: 输出指定行数的最近日志\r\n        * -p 日志级别: 输出指定日志级别的日志\r\n### SSH\r\n\r\n![图片](https://uploader.shimo.im/f/uov2QlaHazG2JyAJ.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n* 安装: openssh-server\r\n* 客户: ssh\r\n* 服务: sshd\r\n* 指令\r\n    * ssh 用户@主机: 客户端登录服务器\r\n### Docker\r\n\r\n[https://shimo.im/docs/8Jq3dhVVCGqkqr3V](https://shimo.im/docs/8Jq3dhVVCGqkqr3V?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n### 数据库\r\n\r\n[https://shimo.im/docs/qwXHQR39xhdCVcT6](https://shimo.im/docs/qwXHQR39xhdCVcT6?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n* 安装: mysql-common mysql-libs mysql mysql-server\r\n* 客户: mysql\r\n* 服务: mysqld\r\n### Nginx\r\n\r\n[https://shimo.im/docs/6DGP3XH6GPkPRDhX](https://shimo.im/docs/6DGP3XH6GPkPRDhX?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n### keepalived\r\n\r\n[https://shimo.im/docs/xkhJRDdTqG6pkChp](https://shimo.im/docs/xkhJRDdTqG6pkChp?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n# 定制自己的linux\r\n\r\n## 启动流程\r\n\r\n1. 首先linux要通过自检, 检查硬件设备有没有故障\r\n2. 如果有多块启动盘, 需要在BIOS中选择启动磁盘\r\n3. 启动MBR中的bootloader引导程序\r\n4. 加载内核文件\r\n    * 关键文件kernel: vimlinuz-3.10.0-957.el7.x86_64\r\n    * 关键文件initrd: initramfs-3.10.0-957.el7.x86_64.img\r\n5. 执行所有进程的父进程, 老祖宗systemd\r\n6. 欢迎界面\r\n## 制作min linux思路分析\r\n\r\n1. 在现有Linux系统上加一块硬盘/dev/sdb, 在硬盘上分两个区, 一个是/boot, 一个是/, 并将其格式化, 需要明确的是, 现在加的这个硬盘在现有的linux系统中是/dev/sdb, 但是, 当我们把东西全部设置好时, 要把这个硬盘拔除, 放在新系统上, 此时, 就是/dev/sda\r\n2. 在/dev/sdb硬盘上, 将其打造成独立的linux系统, 里面的所有文件是需要拷贝进去的\r\n3. 作为能独立运行的Linux系统, 内核是一定不能少, 要把内核文件和initramfs文件也一起拷到/dev/sdb上\r\n4. 以上步骤完成, 我们的自制linux就完成, 创建一个新的linux虚拟机, 将其硬盘指向我们创建的硬盘, 启动即可\r\n* 安装grub, 内核文件拷贝至目标磁盘: grub2-install --root-directory=/mnt /dev/sdb\r\n* 确认是否安装成功: hexdump -C -n 512 /dev/sdb\r\n* 将boot拷贝进sdb的boot: cp -rf /boot/* /mnt/boot/\r\n* 修改/mnt/boot/grub2/grub.cfg文件\r\n# 可视化\r\n\r\n## webmin\r\n\r\n![图片](https://uploader.shimo.im/f/B8nQiWkcLzFB490T.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)![图片](https://uploader.shimo.im/f/cQhERdWaC421Sur4.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n## 宝塔\r\n\r\n![图片](https://uploader.shimo.im/f/KrMoaSM4kDnU9vjf.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n\r\n* bt default: 显示默认用户名密码\r\n# 定制\r\n\r\n## Java\r\n\r\n* jdk![图片](https://uploader.shimo.im/f/71Jn0S9PSrmd0xg5.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* tomcat![图片](https://uploader.shimo.im/f/X1bW6Ob3lYC2hIsO.png!thumbnail?fileGuid=3w3Cv3tGDJtxty8r)\r\n* idea\r\n* mysql\r\n    * 安装mysql先要把centos自带的mriadb卸载, 不然会冲突\r\n    * rpm -e --nodeps mariadb-libs\r\n    * rpm -e --nodeps marisa\r\n    * 安装mysql\r\n    * rpm -ivh mysql-common\r\n    * rpm -ivh mysql-libs\r\n    * rpm -ivh mysql-client\r\n    * rpm -ivh mysql-server\r\n    * 设置密码\r\n    * mysql自动给root用户设置随机密码, 运行 grep \"password\" /var/log/mysqld.log可查看当前密码\r\n    * mysql -u root -p 查看到的密码: 进入mysql客户端\r\n    * set global validate_password_policy=0: 将密码设置安全设置设为0\r\n    * flush privileges: 刷新权限\r\n', 42, '2021-04-29 12:43:24', '2021-04-29 12:43:26');
INSERT INTO `article` VALUES (24, 'Nginx', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/24.png', NULL, 'Nginx索引', '# 版本\r\n\r\n* 1.12.2\r\n# 概念\r\n\r\n* nginx是什么, 做什么事情\r\n    * 高性能反向代理服务器, 但也可以做正向代理服务器\r\n    * 占用内存少\r\n    * 并发能力强\r\n    * 最高50000并发连接\r\n* 反向代理\r\n    * 正向代理: 请求多台不同的服务器，正向代理到一台服务器\r\n    * 反向代理: 请求一台服务器, 反向代理到多台不同服务器\r\n* 负载均衡\r\n    * 将一台服务器的负载通过反向代理平均到多个服务器\r\n* 动静分离\r\n# 原理\r\n\r\n# 安装\r\n\r\n* pcre-8.37\r\n* openssl-1.0.1\r\n* zlib-1.2.8\r\n* nginx-1.12.2\r\n* yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel\r\n* nginx解压后在其目录里运行./configure再make && make install进行编译安装\r\n* docker 安装\r\n\r\n![图片](https://uploader.shimo.im/f/EvQV71DJqEBOQI8O.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n# 指令\r\n\r\n* nginx -v: 版本号查看\r\n* nginx: 启动nginx\r\n* nginx -s stop: 停止nginx\r\n* nginx -s reload: 重载配置文件\r\n# 配置\r\n\r\n* ./conf/nginx.conf\r\n    * 全局块: 配置文件开始到events块之间的内容, 设置一些影响nginx服务器整体运行的指令\r\n        * worker_processes 1: 值越高, 并发能力越强, 受硬件约束, 一般设置为和cpu核数相等\r\n    * events块: 涉及的指令主要影响Nginx服务器与用户的网络连接\r\n        * worker_connetctions 1024: 支持的最大连接数, 对Nginx影响较大\r\n    * http块: 配置最频繁的部分, 包括http全局块和server块\r\n        * http全局块: 包括文件引入、MIME-TYPE定义、日志自定义、连接超时时间、单链接请求数上限等\r\n        * upstream块: 负载均衡块\r\n            * 负载均衡策略\r\n                * 轮询(默认)\r\n                * weight: 通过指定权重来进行负载均衡\r\n                * ip_hash: 通过对ip的判定, 让同一ip访问固定的server, 可以解决session问题\r\n                * fair: 按后端服务器的响应时间来分配请求, 相应时间短的优先分配\r\n            * upstream myserver {}: 指定负载均衡块的名字\r\n            * ip_hash: 设置为ip_hash模式\r\n            * fair: 设置为fair模式\r\n            * server 115.28.52.63:8080 weight=1: 指定负载均衡的url地址\r\n        * server块: 和虚拟主机有密切关系, 虚拟主机从用户角度看, 和一台独立的硬件主机是完全一样的, 该技术是为了节省互联网服务器硬件成本, 分全局server块和location块\r\n            * 全局server块\r\n                * listen 80: 监听端口\r\n                * server_name localhost: 监听主机\r\n            * location块\r\n                * location [ = | ~ | ~* | ^~ ] uri {}\r\n                    * =: 用于不含正则表达式的uri前, 要求请求字符串与uri严格匹配\r\n                    * ~: 用于含正则表达式的uri, 且区分大小写\r\n                    * ~*: 用于含正则表达式的uri, 且不区分大小写\r\n                    * ^~: 用于不含正则表达式的uri, 把请求交给匹配度最高的location处理\r\n                * root /data: 静态资源所在目录\r\n                * index index.html:  / 路径所显示的静态资源\r\n                * try_files $uri /index.html: 替代index index.html, BrowserRouter\r\n                * autoindex on: 设为可列出目录\r\n                * proxy_pass[http://127.0.0.1:8080:](http://127.0.0.1:8080:?fileGuid=6DGP3XH6GPkPRDhX)反向代理url地址或负载均衡块的url地址![图片](https://uploader.shimo.im/f/liXiFsRdgD56JKwE.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n# 实例\r\n\r\n* 实例1-反向代理\r\n\r\n![图片](https://uploader.shimo.im/f/ecozk2DcSQR4waMr.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/w4aCeYGywYVW0ujn.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/QKAonSGarebUFXct.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/0f9swQySCdYLoo6X.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/9Kl69e0F61GY29Sc.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n* 实例2-负载均衡\r\n\r\n![图片](https://uploader.shimo.im/f/O2cq4N1ni4KDGEJM.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n* 实例3-动静分离\r\n\r\n![图片](https://uploader.shimo.im/f/I3fD7Xka1pTxHADU.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/b7kXCeIyUkE4jS6d.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n* 实例4-配置高可用集群\r\n\r\n![图片](https://uploader.shimo.im/f/nihd50wmOuQY9547.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/cxAtYnJFvv1LteYR.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/dWF3D932CfltgOZi.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/nWD7bAYktkwv5lVn.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/l0jWCj2I8Is0VHcQ.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/XV7AQfP4gFO97r9u.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/duJOHX9IOvwQwCFN.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n![图片](https://uploader.shimo.im/f/r6yLocdASxdm7m9B.png!thumbnail?fileGuid=6DGP3XH6GPkPRDhX)\r\n\r\n\r\n\r\n', 60, '2021-04-29 12:44:01', '2021-04-29 12:44:03');
INSERT INTO `article` VALUES (25, 'Git', '\r\nhttps://dao77777-blog.oss-cn-chengdu.aliyuncs.com/cover/25.png', NULL, 'Git索引', '# 概念\r\n\r\n## 区\r\n\r\n* 工作区\r\n* 暂存区\r\n* 本地库\r\n* 代码托管中心: 远程库\r\n## 协作方式\r\n\r\n* 团队内部协作: 一个远程库给多个本地库开放权限进行协作\r\n* 跨团队协作: 多个远程库之间进行协作, 从别人的远程库fork到自己的远程库, 再clone到自己的本地库, 进行操作后push到自己的远程库, 自己的远程库pull request到别人的远程库, 别人的远程库审核之后merge到别人自己的远程库\r\n## 工作流\r\n\r\n* git flow(主流): master主分支, develop开发分支, hotfix热修复分支, release发布分支, 功能分支![图片](https://uploader.shimo.im/f/rRcrywn8vBNp1b8L.png!thumbnail?fileGuid=HKT3YXcJkKgTJCtW)\r\n* 集中式: 单一master分支进行开发\r\n* forking\r\n# 命令行\r\n\r\n## 标识\r\n\r\n* git config user.email \"email@example.com\"：设置本仓库邮箱\r\n    * 选项\r\n        * --global: 设置全局邮箱\r\n* git config --global user.name \"Your Name\"：设置本仓库用户名\r\n    * 选项\r\n        * --global: 设置全局用户名\r\n## 版本管理\r\n\r\n### 跟踪\r\n\r\n* git add 文件路径: 跟踪指定文件\r\n* git rm --cache 文件路径: 取消跟踪指定文件\r\n### 查\r\n\r\n* git status: 显示工作区与暂存区(显示为红色), 暂存区和本地库(显示为绿色)之间的差异\r\n* git diff [部分哈希值] 文件路径: 比较指定文件在工作区与暂存区的具体差异, 若带了部分哈希值则与本地库中指定版本进行比较\r\n* git log: 显示本地库所有版本, 每个版本显示哈希值, 作者和邮件, 注释\r\n    * 选项\r\n        * --oneline: 每个版本只显示一行, 只显示哈希值的部分和注释\r\n        * --pretty=oneline: 每个版本只显示一行, 只显示哈希值和注释\r\n        * --graph：以图方式显示\r\n* git reflog: 显示本地库所有版本, 每个版本显示部分哈希值, 指针, 注释\r\n### 提交\r\n\r\n* git add 文件路径: 同步暂存区与工作区一致\r\n* git commit: 同步本地库与暂存区一致\r\n    * 选项\r\n        * -m \"提交注释\": 对本次提交进行注释\r\n        * -a: 直接同步本地库与工作区一致\r\n### 回退\r\n\r\n* git restore 文件路径: 同步工作区与暂存区一致\r\n    * 选项\r\n        * --statged: 同步暂存区与本地库一致\r\n* git reset 部分哈希值|HEAD~步数: 版本跳转到指定哈希值或回退指定步数的版本\r\n    * 选项\r\n        * --hard: 工作区, 暂存区, 本地库版本跳转\r\n        * --mixed: 暂存区, 本地库版本跳转\r\n        * --soft: 本地库版本跳转\r\n## 分支\r\n\r\n### 本地分支\r\n\r\n* git branch\r\n    * 参数\r\n        * 分支名: 创建指定分支\r\n    * 选项\r\n        * -v: 查看所有分支\r\n        * -d 分支名: 删除指定分支\r\n* git checkout 分支名: 切换分支\r\n* git merge\r\n    * 参数\r\n        * 分支名: 将指定分支合并到当前分支\r\n    * 可选项\r\n        * --abort: 在合并冲突后可停止分支合并\r\n* 解决冲突: git merge 分支名 后若发生冲突, 则需手动解决冲突的文件, 然后git add, git commit 完成合并\r\n### 远程分支\r\n\r\n* git remote\r\n    * 可选项\r\n        * -v: 查看所有远程库地址与别名\r\n        * add 别名 远程库地址: 添加远程库地址与别名\r\n* git push 远程库别名 分支: 将本地库指定分支合并到远程库指定分支\r\n    * 可选项\r\n        * --delete: 删除远程库指定分支\r\n* git pull 远程库别名 分支: 将远程库指定分支合并到本地库指定分支, 相当于 git fetch 远程库别名 分支 + git merge 远程库别名/分支\r\n* git clone 远程库地址: 克隆整个远程库\r\n## 标签\r\n\r\n* git  tag <标签名> ：给当前HEAD所在版本打标签\r\n    * -d <标签名>：删除一个标签\r\n* git tag <标签名> <版本号>：给指定版本号打上标签\r\n* git tag -a <标签名> -m \"<说明>\" 版本号：给指定版本号打上带说明的标签\r\n* git tag：查看所有标签，按字母排序列出\r\n* git show <标签名>：显示指定标签信息\r\n## 忽略\r\n\r\n* .gitignore文件: 在根目录下创建, 表示忽略掉的文件![图片](https://uploader.shimo.im/f/oDC571UNXLCfVHTt.png!thumbnail?fileGuid=HKT3YXcJkKgTJCtW)\r\n## gitlab服务器\r\n\r\n', 202, '2021-04-29 12:44:27', '2021-04-29 12:44:29');

-- ----------------------------
-- Table structure for article_category
-- ----------------------------
DROP TABLE IF EXISTS `article_category`;
CREATE TABLE `article_category`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `category_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_category
-- ----------------------------
INSERT INTO `article_category` VALUES (1, 1, 2, '2021-04-22 23:28:14', '2021-04-22 23:28:18');
INSERT INTO `article_category` VALUES (2, 2, 2, '2021-04-22 23:28:32', '2021-04-22 23:28:34');
INSERT INTO `article_category` VALUES (3, 3, 2, '2021-04-22 23:28:44', '2021-04-22 23:28:46');
INSERT INTO `article_category` VALUES (4, 4, 5, '2021-04-29 12:30:44', '2021-04-29 12:30:46');
INSERT INTO `article_category` VALUES (5, 5, 5, '2021-04-29 12:30:54', '2021-04-29 12:30:57');
INSERT INTO `article_category` VALUES (6, 6, 7, '2021-04-29 12:31:38', '2021-04-29 12:31:40');
INSERT INTO `article_category` VALUES (7, 7, 7, '2021-04-29 12:31:45', '2021-04-29 12:31:48');
INSERT INTO `article_category` VALUES (8, 8, 6, '2021-04-29 12:32:07', '2021-04-29 12:32:10');
INSERT INTO `article_category` VALUES (9, 9, 6, '2021-04-29 12:32:17', '2021-04-29 12:32:19');
INSERT INTO `article_category` VALUES (10, 10, 6, '2021-04-29 12:32:25', '2021-04-29 12:32:28');
INSERT INTO `article_category` VALUES (11, 11, 1, '2021-04-29 12:40:02', '2021-04-29 12:40:05');
INSERT INTO `article_category` VALUES (12, 12, 1, '2021-04-29 12:40:10', '2021-04-29 12:40:12');
INSERT INTO `article_category` VALUES (13, 13, 1, '2021-04-29 12:40:16', '2021-04-29 12:40:18');
INSERT INTO `article_category` VALUES (14, 14, 2, '2021-04-29 12:40:44', '2021-04-29 12:40:46');
INSERT INTO `article_category` VALUES (15, 15, 2, '2021-04-29 12:40:52', '2021-04-29 12:40:54');
INSERT INTO `article_category` VALUES (16, 16, 2, '2021-04-29 12:40:59', '2021-04-29 12:41:01');
INSERT INTO `article_category` VALUES (17, 17, 2, '2021-04-29 12:41:07', '2021-04-29 12:41:08');
INSERT INTO `article_category` VALUES (18, 18, 2, '2021-04-29 12:41:14', '2021-04-29 12:41:15');
INSERT INTO `article_category` VALUES (19, 19, 3, '2021-04-29 12:42:02', '2021-04-29 12:42:05');
INSERT INTO `article_category` VALUES (20, 20, 3, '2021-04-29 12:42:11', '2021-04-29 12:42:15');
INSERT INTO `article_category` VALUES (21, 21, 3, '2021-04-29 12:42:20', '2021-04-29 12:42:21');
INSERT INTO `article_category` VALUES (22, 22, 4, '2021-04-29 12:45:01', '2021-04-29 12:45:03');
INSERT INTO `article_category` VALUES (23, 23, 4, '2021-04-29 12:45:09', '2021-04-29 12:45:11');
INSERT INTO `article_category` VALUES (24, 24, 4, '2021-04-29 12:45:17', '2021-04-29 12:45:19');
INSERT INTO `article_category` VALUES (25, 25, 4, '2021-04-29 12:45:25', '2021-04-29 12:45:27');

-- ----------------------------
-- Table structure for article_comment
-- ----------------------------
DROP TABLE IF EXISTS `article_comment`;
CREATE TABLE `article_comment`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `comment_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 18 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_comment
-- ----------------------------
INSERT INTO `article_comment` VALUES (15, 25, 32, '2021-04-29 14:41:34', '2021-04-29 14:41:34');
INSERT INTO `article_comment` VALUES (16, 1, 33, '2021-04-29 16:14:12', '2021-04-29 16:14:12');
INSERT INTO `article_comment` VALUES (17, 25, 34, '2021-04-29 19:52:10', '2021-04-29 19:52:10');

-- ----------------------------
-- Table structure for article_tag
-- ----------------------------
DROP TABLE IF EXISTS `article_tag`;
CREATE TABLE `article_tag`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `tag_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_tag
-- ----------------------------
INSERT INTO `article_tag` VALUES (1, 1, 1, '2021-04-22 23:28:14', '2021-04-22 23:28:18');
INSERT INTO `article_tag` VALUES (2, 2, 1, '2021-04-22 23:28:32', '2021-04-22 23:28:34');
INSERT INTO `article_tag` VALUES (3, 3, 1, '2021-04-22 23:28:44', '2021-04-22 23:28:46');
INSERT INTO `article_tag` VALUES (4, 4, 1, '2021-04-29 12:48:39', '2021-04-29 12:48:41');
INSERT INTO `article_tag` VALUES (5, 5, 1, '2021-04-29 12:51:04', '2021-04-29 12:51:05');
INSERT INTO `article_tag` VALUES (6, 6, 1, '2021-04-29 12:51:11', '2021-04-29 12:51:13');
INSERT INTO `article_tag` VALUES (7, 7, 1, '2021-04-29 12:51:17', '2021-04-29 12:51:19');
INSERT INTO `article_tag` VALUES (8, 8, 1, '2021-04-29 12:51:24', '2021-04-29 12:51:26');
INSERT INTO `article_tag` VALUES (9, 9, 1, '2021-04-29 12:51:32', '2021-04-29 12:51:37');
INSERT INTO `article_tag` VALUES (10, 10, 1, '2021-04-29 12:51:48', '2021-04-29 12:51:50');
INSERT INTO `article_tag` VALUES (11, 11, 1, '2021-04-29 12:51:58', '2021-04-29 12:52:00');
INSERT INTO `article_tag` VALUES (12, 12, 1, '2021-04-29 12:52:05', '2021-04-29 12:52:07');
INSERT INTO `article_tag` VALUES (13, 13, 1, '2021-04-29 12:52:11', '2021-04-29 12:52:13');
INSERT INTO `article_tag` VALUES (14, 14, 1, '2021-04-29 12:52:20', '2021-04-29 12:52:21');
INSERT INTO `article_tag` VALUES (15, 15, 1, '2021-04-29 12:52:26', '2021-04-29 12:52:28');
INSERT INTO `article_tag` VALUES (16, 16, 1, '2021-04-29 12:52:33', '2021-04-29 12:52:34');
INSERT INTO `article_tag` VALUES (17, 17, 1, '2021-04-29 12:52:40', '2021-04-29 12:52:41');
INSERT INTO `article_tag` VALUES (18, 18, 1, '2021-04-29 12:52:51', '2021-04-29 12:52:53');
INSERT INTO `article_tag` VALUES (19, 19, 1, '2021-04-29 12:53:00', '2021-04-29 12:53:02');
INSERT INTO `article_tag` VALUES (20, 20, 1, '2021-04-29 12:53:08', '2021-04-29 12:53:09');
INSERT INTO `article_tag` VALUES (21, 21, 1, '2021-04-29 12:53:13', '2021-04-29 12:53:15');
INSERT INTO `article_tag` VALUES (22, 22, 1, '2021-04-29 12:53:20', '2021-04-29 12:53:21');
INSERT INTO `article_tag` VALUES (23, 23, 1, '2021-04-29 12:53:26', '2021-04-29 12:53:27');
INSERT INTO `article_tag` VALUES (24, 24, 1, '2021-04-29 12:53:37', '2021-04-29 12:53:39');
INSERT INTO `article_tag` VALUES (25, 25, 1, '2021-04-29 12:53:46', '2021-04-29 12:53:48');

-- ----------------------------
-- Table structure for article_visitor_like
-- ----------------------------
DROP TABLE IF EXISTS `article_visitor_like`;
CREATE TABLE `article_visitor_like`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `visitor_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_visitor_like
-- ----------------------------
INSERT INTO `article_visitor_like` VALUES (1, 1, 1, '2021-04-22 23:47:11', '2021-04-22 23:47:13');

-- ----------------------------
-- Table structure for article_visitor_read
-- ----------------------------
DROP TABLE IF EXISTS `article_visitor_read`;
CREATE TABLE `article_visitor_read`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `article_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `visitor_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of article_visitor_read
-- ----------------------------
INSERT INTO `article_visitor_read` VALUES (1, 1, 1, '2021-04-22 23:47:27', '2021-04-22 23:47:29');

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog`  (
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `signature` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeBlogCreate` datetime NULL DEFAULT NULL,
  `icon` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `background` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `toTop` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('道五七', NULL, '山中何事？松花酿酒，春水煎茶。', '2021-04-22 23:34:13', 'https://dao77777-blog.oss-cn-chengdu.aliyuncs.com/icon/favicon.png', 'https://dao77777-blog.oss-cn-chengdu.aliyuncs.com/background/background.png', 'https://dao77777-blog.oss-cn-chengdu.aliyuncs.com/toTop/toTop.png');

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `categoryName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES (1, '基础', '2021-04-22 23:25:47', '2021-04-22 23:25:49');
INSERT INTO `category` VALUES (2, '前端', '2021-04-29 03:22:14', '2021-04-29 03:22:16');
INSERT INTO `category` VALUES (3, '后端', '2021-04-29 03:22:46', '2021-04-29 03:22:48');
INSERT INTO `category` VALUES (4, '运维', '2021-04-29 03:23:28', '2021-04-29 03:23:30');
INSERT INTO `category` VALUES (5, '数学', '2021-04-29 03:23:44', '2021-04-29 03:23:46');
INSERT INTO `category` VALUES (6, '运维', '2021-04-29 03:24:02', '2021-04-29 03:24:05');
INSERT INTO `category` VALUES (7, '杂', '2021-04-29 03:24:54', '2021-04-29 03:24:56');

-- ----------------------------
-- Table structure for comment
-- ----------------------------
DROP TABLE IF EXISTS `comment`;
CREATE TABLE `comment`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `content` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `nickname` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `browser` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `operatingSystem` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `site` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 36 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment
-- ----------------------------
INSERT INTO `comment` VALUES (32, '哈哈哈', '玄七', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', NULL, NULL, '2021-04-29 14:41:34', '2021-04-29 14:41:34');
INSERT INTO `comment` VALUES (33, 'cs', NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', NULL, NULL, '2021-04-29 16:14:12', '2021-04-29 16:14:12');
INSERT INTO `comment` VALUES (34, 'fd', NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', NULL, NULL, '2021-04-29 19:52:10', '2021-04-29 19:52:10');
INSERT INTO `comment` VALUES (35, 'd', NULL, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36', NULL, NULL, '2021-04-30 00:22:44', '2021-04-30 00:22:44');

-- ----------------------------
-- Table structure for comment_comment
-- ----------------------------
DROP TABLE IF EXISTS `comment_comment`;
CREATE TABLE `comment_comment`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `comment_id_replied` int(11) UNSIGNED NULL DEFAULT NULL,
  `comment_id_reply` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 16 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of comment_comment
-- ----------------------------
INSERT INTO `comment_comment` VALUES (15, 33, 35, '2021-04-30 00:22:44', '2021-04-30 00:22:44');

-- ----------------------------
-- Table structure for music
-- ----------------------------
DROP TABLE IF EXISTS `music`;
CREATE TABLE `music`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of music
-- ----------------------------

-- ----------------------------
-- Table structure for tag
-- ----------------------------
DROP TABLE IF EXISTS `tag`;
CREATE TABLE `tag`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `tagName` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 5 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tag
-- ----------------------------
INSERT INTO `tag` VALUES (1, '索引', '2021-04-22 23:26:58', '2021-04-22 23:27:01');

-- ----------------------------
-- Table structure for visitor
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `ip` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitor
-- ----------------------------
INSERT INTO `visitor` VALUES (1, '192.168.0.1', '2021-04-22 23:43:04', '2021-04-22 23:43:06');

-- ----------------------------
-- Table structure for visitor_comment_like
-- ----------------------------
DROP TABLE IF EXISTS `visitor_comment_like`;
CREATE TABLE `visitor_comment_like`  (
  `id` int(11) UNSIGNED NOT NULL AUTO_INCREMENT,
  `visitor_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `comment_id` int(11) UNSIGNED NULL DEFAULT NULL,
  `timeCreate` datetime NOT NULL,
  `timeUpdate` datetime NOT NULL,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of visitor_comment_like
-- ----------------------------
INSERT INTO `visitor_comment_like` VALUES (1, 1, 2, '2021-04-22 23:46:43', '2021-04-22 23:46:45');

SET FOREIGN_KEY_CHECKS = 1;
